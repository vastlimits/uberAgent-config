
#
# The rules are generated from the Sigma GitHub repository at https://github.com/SigmaHQ/sigma
# To generate the ruleset, please follow the instructions provided in the repository: https://github.com/vastlimits/pySigma-backend-uberAgent/
#
# The command used to generate the ruleset is:
#    sigma convert -s -f conf -p uberagent-7.1.0 -t uberagent /home/runner/work/uberAgent-config/uberAgent-config/build/sigma-medium-windows >> uberAgent-ESA-am-sigma-medium-windows.conf
#

[ActivityMonitoringRule platform=Windows]
# Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system
# Author: frack113
RuleId = f8ad2e2c-40b6-4117-84d7-20b89896ab23
RuleName = Suspicious Scan Loop Network
EventType = Process.Start
Tag = proc-start-suspicious-scan-loop-network
RiskScore = 50
Annotation = {"mitre_attack": ["T1059", "T1018"]}
Query = (icontains(Process.CommandLine, "for ") or icontains(Process.CommandLine, "foreach ")) and (icontains(Process.CommandLine, "nslookup") or icontains(Process.CommandLine, "ping"))


[ActivityMonitoringRule platform=Windows]
# Detects Kerberos DLL being loaded by an Office Product
# Author: Antonlovesdnb
RuleId = 7417e29e-c2e7-4cf6-a2e8-767228c64837
RuleName = Active Directory Kerberos DLL Loaded Via Office Application
EventType = Image.Load
Tag = active-directory-kerberos-dll-loaded-via-office-application
RiskScore = 50
Annotation = {"mitre_attack": ["T1204.002"]}
Query = (iendswith(Process.Path, "\\excel.exe") or iendswith(Process.Path, "\\mspub.exe") or iendswith(Process.Path, "\\onenote.exe") or iendswith(Process.Path, "\\onenoteim.exe") or iendswith(Process.Path, "\\outlook.exe") or iendswith(Process.Path, "\\powerpnt.exe") or iendswith(Process.Path, "\\winword.exe")) and iendswith(Image.Path, "\\kerberos.dll")
GenericProperty1 = Image.Path


[ActivityMonitoringRule platform=Windows]
# Detects the creation of recent element file that points to an .ISO, .IMG, .VHD or .VHDX file as often used in phishing attacks.
# This can be a false positive on server systems but on workstations users should rarely mount .iso or .img files.
# Author: Florian Roth (Nextron Systems)
RuleId = 4358e5a5-7542-4dcb-b9f3-87667371839b
RuleName = ISO or Image Mount Indicator in Recent Files
EventType = File.Create
Tag = iso-or-image-mount-indicator-in-recent-files
RiskScore = 50
Annotation = {"mitre_attack": ["T1566.001"]}
Query = (iendswith(File.Path, ".iso.lnk") or iendswith(File.Path, ".img.lnk") or iendswith(File.Path, ".vhd.lnk") or iendswith(File.Path, ".vhdx.lnk")) and icontains(File.Path, "\\Microsoft\\Windows\\Recent\\")
GenericProperty1 = File.Path


[ActivityMonitoringRule platform=Windows]
# Csi.exe is a signed binary from Microsoft that comes with Visual Studio and provides C# interactive capabilities. It can be used to run C# code from a file passed as a parameter in command line. Early version of this utility provided with Microsoft “Roslyn” Community Technology Preview was named 'rcsi.exe'
# Author: Konstantin Grishchenko, oscd.community
RuleId = 40b95d31-1afc-469e-8d34-9a3a667d058e
RuleName = Suspicious Csi.exe Usage
EventType = Process.Start
Tag = proc-start-suspicious-csi.exe-usage
RiskScore = 50
Annotation = {"mitre_attack": ["T1072", "T1218"]}
Query = (iendswith(Process.Path, "\\csi.exe") or iendswith(Process.Path, "\\rcsi.exe") or Process.Name in ["csi.exe", "rcsi.exe"]) and Process.Company == "Microsoft Corporation"
GenericProperty1 = Process.Company


[ActivityMonitoringRule platform=Windows]
# Detects WMI script event consumers
# Author: Thomas Patzke
RuleId = ec1d5e28-8f3b-4188-a6f8-6e8df81dc28e
RuleName = WMI Persistence - Script Event Consumer
EventType = Process.Start
Tag = proc-start-wmi-persistence-script-event-consumer
RiskScore = 50
Annotation = {"mitre_attack": ["T1546.003"]}
Query = Process.Path == "C:\\WINDOWS\\system32\\wbem\\scrcons.exe" and Parent.Path == "C:\\Windows\\System32\\svchost.exe"
GenericProperty1 = Parent.Path


[ActivityMonitoringRule platform=Windows]
# Detects suspicious reconnaissance command line activity on Windows systems using Net.EXE
# Author: Florian Roth (Nextron Systems), omkar72, @svch0st, Nasreddine Bencherchali (Nextron Systems)
RuleId = d95de845-b83c-4a9a-8a6a-4fc802ebf6c0
RuleName = Suspicious Group And Account Reconnaissance Activity Using Net.EXE
EventType = Process.Start
Tag = proc-start-suspicious-group-and-account-reconnaissance-activity-using-net.exe
RiskScore = 50
Annotation = {"mitre_attack": ["T1087.001", "T1087.002"]}
Query = (iendswith(Process.Path, "\\net.exe") or iendswith(Process.Path, "\\net1.exe") or Process.Name in ["net.exe", "net1.exe"]) and ((icontains(Process.CommandLine, " group ") or icontains(Process.CommandLine, " localgroup ")) and (icontains(Process.CommandLine, "domain admins") or icontains(Process.CommandLine, " administrator") or icontains(Process.CommandLine, " administrateur") or icontains(Process.CommandLine, "enterprise admins") or icontains(Process.CommandLine, "Exchange Trusted Subsystem") or icontains(Process.CommandLine, "Remote Desktop Users") or icontains(Process.CommandLine, "Utilisateurs du Bureau à distance") or icontains(Process.CommandLine, "Usuarios de escritorio remoto") or icontains(Process.CommandLine, " /do")) and not icontains(Process.CommandLine, " /add") or icontains(Process.CommandLine, " accounts ") and icontains(Process.CommandLine, " /do"))


[ActivityMonitoringRule platform=Windows]
# Detects potential DLL side loading of DLLs that are part of the Wazuh security platform
# Author: X__Junior (Nextron Systems)
RuleId = db77ce78-7e28-4188-9337-cf30e2b3ba9f
RuleName = Potential Wazuh Security Platform DLL Sideloading
EventType = Image.Load
Tag = potential-wazuh-security-platform-dll-sideloading
RiskScore = 50
Annotation = {"mitre_attack": ["T1574.001", "T1574.002"]}
Query = (iendswith(Image.Path, "\\libwazuhshared.dll") or iendswith(Image.Path, "\\libwinpthread-1.dll")) and not (istartswith(Image.Path, "C:\\Program Files\\") or istartswith(Image.Path, "C:\\Program Files (x86)\\")) and not ((icontains(Image.Path, "\\AppData\\Local\\") or icontains(Image.Path, "\\ProgramData\\")) and iendswith(Image.Path, "\\mingw64\\bin\\libwinpthread-1.dll"))
GenericProperty1 = Image.Path


[ActivityMonitoringRule platform=Windows]
# Detects driver load of the System Informer tool
# Author: Florian Roth (Nextron Systems)
RuleId = 10cb6535-b31d-4512-9962-513dcbc42cc1
RuleName = PUA - System Informer Driver Load
EventType = Driver.Load
Tag = pua-system-informer-driver-load
RiskScore = 50
Annotation = {"mitre_attack": ["T1543"]}
Query = iendswith(Image.Path, "\\SystemInformer.sys") or icontains(Image.Hashes, "SHA256=8B9AD98944AC9886EA4CB07700E71B78BE4A2740934BB7E46CA3B56A7C59AD24") or icontains(Image.Hashes, "SHA256=A41348BEC147CA4D9EA2869817527EB5CEA2E20202AF599D2B30625433BCF454") or icontains(Image.Hashes, "SHA256=38EE0A88AF8535A11EFE8D8DA9C6812AA07067B75A64D99705A742589BDD846D") or icontains(Image.Hashes, "SHA256=A773891ACF203A7EB0C0D30942FB1347648F1CD918AE2BFD9A4857B4DCF5081B") or icontains(Image.Hashes, "SHA256=4C3B81AC88A987BBDF7D41FA0AECC2CEDF5B9BD2F45E7A21F376D05345FC211D") or icontains(Image.Hashes, "SHA256=3241BC14BEC51CE6A691B9A3562E5C1D52E9D057D27A3D67FD0B245C350B6D34") or icontains(Image.Hashes, "SHA256=047C42E9BBA28366868847C7DAFC1E043FB038C796422D37220493517D68EE89") or icontains(Image.Hashes, "SHA256=18931DC81E95D0020466FA091E16869DBE824E543A4C2C8FE644FA71A0F44FEB") or icontains(Image.Hashes, "SHA256=B4C2EF76C204273132FDE38F0DED641C2C5EE767652E64E4C4071A4A973B6C1B") or icontains(Image.Hashes, "SHA256=640954AFC268565F7DAA6E6F81A8EE05311E33E34332B501A3C3FE5B22ADEA97") or icontains(Image.Hashes, "SHA256=251BE949F662C838718F8AA0A5F8211FB90346D02BD63FF91E6B224E0E01B656") or icontains(Image.Hashes, "SHA256=E2606F272F7BA054DF16BE464FDA57211EF0D14A0D959F9C8DCB0575DF1186E4") or icontains(Image.Hashes, "SHA256=3A9E1D17BEEB514F1B9B3BACAEE7420285DE5CBDCE89C5319A992C6CBD1DE138") or Image.Hash.SHA256 in ["8b9ad98944ac9886ea4cb07700e71b78be4a2740934bb7e46ca3b56a7c59ad24", "a41348bec147ca4d9ea2869817527eb5cea2e20202af599d2b30625433bcf454", "38ee0a88af8535a11efe8d8da9c6812aa07067b75a64d99705a742589bdd846d", "a773891acf203a7eb0c0d30942fb1347648f1cd918ae2bfd9a4857b4dcf5081b", "4c3b81ac88a987bbdf7d41fa0aecc2cedf5b9bd2f45e7a21f376d05345fc211d", "3241bc14bec51ce6a691b9a3562e5c1d52e9d057d27a3d67fd0b245c350b6d34", "047c42e9bba28366868847c7dafc1e043fb038c796422d37220493517d68ee89", "18931dc81e95d0020466fa091e16869dbe824e543a4c2c8fe644fa71a0f44feb", "b4c2ef76c204273132fde38f0ded641c2c5ee767652e64e4c4071a4a973b6c1b", "640954afc268565f7daa6e6f81a8ee05311e33e34332b501a3c3fe5b22adea97", "251be949f662c838718f8aa0a5f8211fb90346d02bd63ff91e6b224e0e01b656", "e2606f272f7ba054df16be464fda57211ef0d14a0d959f9c8dcb0575df1186e4", "3a9e1d17beeb514f1b9b3bacaee7420285de5cbdce89c5319a992c6cbd1de138"]
GenericProperty1 = Image.Path
GenericProperty2 = Image.Hash.SHA256
GenericProperty3 = Image.Hashes


[ActivityMonitoringRule platform=Windows]
# Detects when an admin share is mounted using net.exe
# Author: oscd.community, Teymur Kheirkhabarov @HeirhabarovT, Zach Stanford @svch0st, wagga
RuleId = 3abd6094-7027-475f-9630-8ab9be7b9725
RuleName = Windows Admin Share Mount Via Net.EXE
EventType = Process.Start
Tag = proc-start-windows-admin-share-mount-via-net.exe
RiskScore = 50
Annotation = {"mitre_attack": ["T1021.002"]}
Query = (iendswith(Process.Path, "\\net.exe") or iendswith(Process.Path, "\\net1.exe") or Process.Name in ["net.exe", "net1.exe"]) and icontains(Process.CommandLine, " use ") and Process.CommandLine like "* \\\\*\\*$*"


[ActivityMonitoringRule platform=Windows]
# Detects value modification of registry key containing path to binary used as screensaver.
# Author: Bartlomiej Czyz @bczyz1, oscd.community
RuleId = 67a6c006-3fbe-46a7-9074-2ba3b82c3000
RuleName = Path To Screensaver Binary Modified
EventType = Reg.Any
Tag = path-to-screensaver-binary-modified
RiskScore = 50
Annotation = {"mitre_attack": ["T1546.002"]}
Query = iendswith(Reg.Key.Target, "\\Control Panel\\Desktop\\SCRNSAVE.EXE") and not (iendswith(Process.Path, "\\rundll32.exe") or iendswith(Process.Path, "\\explorer.exe"))
Hive = HKLM,HKU
GenericProperty1 = Reg.Key.Target


[ActivityMonitoringRule platform=Windows]
# Detects port forwarding activity via SSH.exe
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleId = 327f48c1-a6db-4eb8-875a-f6981f1b0183
RuleName = Port Forwarding Activity Via SSH.EXE
EventType = Process.Start
Tag = proc-start-port-forwarding-activity-via-ssh.exe
RiskScore = 50
Annotation = {"mitre_attack": ["T1572", "T1021.001", "T1021.004"]}
Query = iendswith(Process.Path, "\\ssh.exe") and (icontains(Process.CommandLine, " -R ") or icontains(Process.CommandLine, " /R "))


[ActivityMonitoringRule platform=Windows]
# Detects the desktopimgdownldr utility being used to download a remote file. An adversary may use desktopimgdownldr to download arbitrary files as an alternative to certutil.
# Author: Tim Rauch
RuleId = 214641c2-c579-4ecb-8427-0cf19df6842e
RuleName = Remote File Download Via Desktopimgdownldr Utility
EventType = Process.Start
Tag = proc-start-remote-file-download-via-desktopimgdownldr-utility
RiskScore = 50
Annotation = {"mitre_attack": ["T1105"]}
Query = iendswith(Process.Path, "\\desktopimgdownldr.exe") and iendswith(Parent.Path, "\\desktopimgdownldr.exe") and icontains(Process.CommandLine, "/lockscreenurl:http")
GenericProperty1 = Parent.Path


[ActivityMonitoringRule platform=Windows]
# Detects creation of a file named "ErrorHandler.cmd" in the "C:\WINDOWS\Setup\Scripts\" directory which could be used as a method of persistence
# The content of C:\WINDOWS\Setup\Scripts\ErrorHandler.cmd is read whenever some tools under C:\WINDOWS\System32\oobe\ (e.g. Setup.exe) fail to run for any reason.
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleId = 15904280-565c-4b73-9303-3291f964e7f9
RuleName = Potential Persistence Attempt Via ErrorHandler.Cmd
EventType = File.Create
Tag = potential-persistence-attempt-via-errorhandler.cmd
RiskScore = 50
Query = iendswith(File.Path, "\\WINDOWS\\Setup\\Scripts\\ErrorHandler.cmd")
GenericProperty1 = File.Path


[ActivityMonitoringRule platform=Windows]
# Detects uncommon one-liner command having ping and copy at the same time, which is usually used by malware.
# Author: X__Junior (Nextron Systems)
RuleId = ded2b07a-d12f-4284-9b76-653e37b6c8b0
RuleName = Suspicious Ping/Copy Command Combination
EventType = Process.Start
Tag = proc-start-suspicious-ping/copy-command-combination
RiskScore = 50
Annotation = {"mitre_attack": ["T1070.004"]}
Query = (iendswith(Process.Path, "\\cmd.exe") or Process.Name == "Cmd.Exe") and (icontains(Process.CommandLine, " -n ") or icontains(Process.CommandLine, " /n ")) and icontains(Process.CommandLine, "ping") and icontains(Process.CommandLine, "copy ") and icontains(Process.CommandLine, " /y ")


[ActivityMonitoringRule platform=Windows]
# The Workflow Command-line Compiler can be used for AWL bypass and is listed in Microsoft's recommended block rules.
# Author: Christopher Peacock @SecurePeacock, SCYTHE @scythe_io
RuleId = 49be8799-7b4d-4fda-ad23-cafbefdebbc5
RuleName = Use of Wfc.exe
EventType = Process.Start
Tag = proc-start-use-of-wfc.exe
RiskScore = 50
Annotation = {"mitre_attack": ["T1127"]}
Query = iendswith(Process.Path, "\\wfc.exe") or Process.Name == "wfc.exe"


[ActivityMonitoringRule platform=Windows]
# Detects the execution of "wmic" with the "process" flag, which adversary might use to list processes running on the compromised host or list installed software hotfixes and patches.
# Author: frack113
RuleId = 221b251a-357a-49a9-920a-271802777cc0
RuleName = Process Reconnaissance Via Wmic.EXE
EventType = Process.Start
Tag = proc-start-process-reconnaissance-via-wmic.exe
RiskScore = 50
Annotation = {"mitre_attack": ["T1047"]}
Query = (iendswith(Process.Path, "\\WMIC.exe") or Process.Name == "wmic.exe") and icontains(Process.CommandLine, "process") and not (icontains(Process.CommandLine, "call") and icontains(Process.CommandLine, "create"))


[ActivityMonitoringRule platform=Windows]
# Detects potential DLL sideloading using the Microsoft Office winword process via the '/l' flag.
# Author: Victor Sergeev, oscd.community
RuleId = f7375e28-5c14-432f-b8d1-1db26c832df3
RuleName = Potential Arbitrary DLL Load Using Winword
EventType = Process.Start
Tag = proc-start-potential-arbitrary-dll-load-using-winword
RiskScore = 50
Annotation = {"mitre_attack": ["T1202"]}
Query = (iendswith(Process.Path, "\\WINWORD.exe") or Process.Name == "WinWord.exe") and icontains(Process.CommandLine, "/l ") and icontains(Process.CommandLine, ".dll")


[ActivityMonitoringRule platform=Windows]
# Detects the deletion of the event log files which may indicate an attempt to destroy forensic evidence
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleId = 63c779ba-f638-40a0-a593-ddd45e8b1ddc
RuleName = EventLog EVTX File Deleted
EventType = File.Delete
Tag = eventlog-evtx-file-deleted
RiskScore = 50
Annotation = {"mitre_attack": ["T1070"]}
Query = istartswith(File.Path, "C:\\Windows\\System32\\winevt\\Logs\\") and iendswith(File.Path, ".evtx")
GenericProperty1 = File.Path


[ActivityMonitoringRule platform=Windows]
# Detects the execution of a shell (powershell, bash, wsl...) via Visual Studio Code tunnel. Attackers can abuse this functionality to establish a C2 channel and execute arbitrary commands on the system.
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleId = f4a623c2-4ef5-4c33-b811-0642f702c9f1
RuleName = Visual Studio Code Tunnel Shell Execution
EventType = Process.Start
Tag = proc-start-visual-studio-code-tunnel-shell-execution
RiskScore = 50
Annotation = {"mitre_attack": ["T1071.001"]}
Query = icontains(Parent.Path, "\\servers\\Stable-") and iendswith(Parent.Path, "\\server\\node.exe") and icontains(Parent.CommandLine, ".vscode-server") and ((iendswith(Process.Path, "\\powershell.exe") or iendswith(Process.Path, "\\pwsh.exe")) and icontains(Process.CommandLine, "\\terminal\\browser\\media\\shellIntegration.ps1") or iendswith(Process.Path, "\\wsl.exe") or iendswith(Process.Path, "\\bash.exe"))
GenericProperty1 = Parent.Path
GenericProperty2 = Parent.CommandLine


[ActivityMonitoringRule platform=Windows]
# Detects potential suspicious execution of a GUID like folder name located in a suspicious location such as %TEMP% as seen being used in IcedID attacks
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleId = 90b63c33-2b97-4631-a011-ceb0f47b77c3
RuleName = Suspicious Execution From GUID Like Folder Names
EventType = Process.Start
Tag = proc-start-suspicious-execution-from-guid-like-folder-names
RiskScore = 50
Annotation = {"mitre_attack": ["T1027"]}
Query = (icontains(Process.CommandLine, "\\AppData\\Roaming\\") or icontains(Process.CommandLine, "\\AppData\\Local\\Temp\\")) and icontains(Process.CommandLine, "\\{") and icontains(Process.CommandLine, "}\\") and not (icontains(Process.Path, "\\{") and icontains(Process.Path, "}\\") or isnull(Process.Path) or Process.Path == "C:\\Windows\\System32\\drvinst.exe")


[ActivityMonitoringRule platform=Windows]
# Detects the creation of a new PowerShell module ".psm1", ".psd1", ".dll", ".ps1", etc. by a non-PowerShell process
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleId = e3845023-ca9a-4024-b2b2-5422156d5527
RuleName = PowerShell Module File Created By Non-PowerShell Process
EventType = File.Create
Tag = powershell-module-file-created-by-non-powershell-process
RiskScore = 50
Query = (icontains(File.Path, "\\WindowsPowerShell\\Modules\\") or icontains(File.Path, "\\PowerShell\\7\\Modules\\")) and not (iendswith(Process.Path, ":\\Program Files\\PowerShell\\7-preview\\pwsh.exe") or iendswith(Process.Path, ":\\Program Files\\PowerShell\\7\\pwsh.exe") or iendswith(Process.Path, ":\\Windows\\System32\\poqexec.exe") or iendswith(Process.Path, ":\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell_ise.exe") or iendswith(Process.Path, ":\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe") or iendswith(Process.Path, ":\\Windows\\SysWOW64\\poqexec.exe") or iendswith(Process.Path, ":\\Windows\\SysWOW64\\WindowsPowerShell\\v1.0\\powershell_ise.exe") or iendswith(Process.Path, ":\\Windows\\SysWOW64\\WindowsPowerShell\\v1.0\\powershell.exe"))
GenericProperty1 = File.Path


[ActivityMonitoringRule platform=Windows]
# Detects execition of commands and binaries from the context of The program compatibility assistant (Pcalua.exe). This can be used as a LOLBIN in order to bypass application whitelisting.
# Author: Nasreddine Bencherchali (Nextron Systems), E.M. Anhaus (originally from Atomic Blue Detections, Endgame), oscd.community
RuleId = 0955e4e1-c281-4fb9-9ee1-5ee7b4b754d2
RuleName = Use of Pcalua For Execution
EventType = Process.Start
Tag = proc-start-use-of-pcalua-for-execution
RiskScore = 50
Annotation = {"mitre_attack": ["T1059"]}
Query = iendswith(Process.Path, "\\pcalua.exe") and icontains(Process.CommandLine, " -a")


[ActivityMonitoringRule platform=Windows]
# Detects netsh commands that turns off the Windows firewall
# Author: Fatih Sirin
RuleId = 57c4bf16-227f-4394-8ec7-1b745ee061c3
RuleName = Firewall Disabled via Netsh.EXE
EventType = Process.Start
Tag = proc-start-firewall-disabled-via-netsh.exe
RiskScore = 50
Annotation = {"mitre_attack": ["T1562.004"]}
Query = (iendswith(Process.Path, "\\netsh.exe") or Process.Name == "netsh.exe") and (icontains(Process.CommandLine, "firewall") and icontains(Process.CommandLine, "set") and icontains(Process.CommandLine, "opmode") and icontains(Process.CommandLine, "disable") or icontains(Process.CommandLine, "advfirewall") and icontains(Process.CommandLine, "set") and icontains(Process.CommandLine, "state") and icontains(Process.CommandLine, "off"))


[ActivityMonitoringRule platform=Windows]
# Detects piping the password to an anydesk instance via CMD and the '--set-password' flag.
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleId = b1377339-fda6-477a-b455-ac0923f9ec2c
RuleName = Remote Access Tool - AnyDesk Piped Password Via CLI
EventType = Process.Start
Tag = proc-start-remote-access-tool-anydesk-piped-password-via-cli
RiskScore = 50
Annotation = {"mitre_attack": ["T1219"]}
Query = icontains(Process.CommandLine, "/c ") and icontains(Process.CommandLine, "echo ") and icontains(Process.CommandLine, ".exe --set-password")


[ActivityMonitoringRule platform=Windows]
# The "VSIISExeLauncher.exe" binary part of the Visual Studio/VS Code can be used to execute arbitrary binaries
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleId = 18749301-f1c5-4efc-a4c3-276ff1f5b6f8
RuleName = Use of VSIISExeLauncher.exe
EventType = Process.Start
Tag = proc-start-use-of-vsiisexelauncher.exe
RiskScore = 50
Annotation = {"mitre_attack": ["T1127"]}
Query = (iendswith(Process.Path, "\\VSIISExeLauncher.exe") or Process.Name == "VSIISExeLauncher.exe") and (icontains(Process.CommandLine, " -p ") or icontains(Process.CommandLine, " -a "))


[ActivityMonitoringRule platform=Windows]
# Detects deletion of files with extensions often used for backup files. Adversaries may delete or remove built-in operating system data and turn off services designed to aid in the recovery of a corrupted system to prevent recovery.
# Author: frack113
RuleId = 06125661-3814-4e03-bfa2-1e4411c60ac3
RuleName = Backup Files Deleted
EventType = File.Delete
Tag = backup-files-deleted
RiskScore = 50
Annotation = {"mitre_attack": ["T1490"]}
Query = (iendswith(Process.Path, "\\cmd.exe") or iendswith(Process.Path, "\\powershell.exe") or iendswith(Process.Path, "\\pwsh.exe") or iendswith(Process.Path, "\\wt.exe") or iendswith(Process.Path, "\\rundll32.exe") or iendswith(Process.Path, "\\regsvr32.exe")) and (iendswith(File.Path, ".VHD") or iendswith(File.Path, ".bac") or iendswith(File.Path, ".bak") or iendswith(File.Path, ".wbcat") or iendswith(File.Path, ".bkf") or iendswith(File.Path, ".set") or iendswith(File.Path, ".win") or iendswith(File.Path, ".dsk"))
GenericProperty1 = File.Path


[ActivityMonitoringRule platform=Windows]
# Detects uncommon child processes of the Add-In deployment cache updating utility (AddInutil.exe) which could be a sign of potential abuse of the binary to proxy execution via a custom Addins.Store payload.
# Author: Michael McKinley (@McKinleyMike), Tony Latteri (@TheLatteri)
RuleId = b5746143-59d6-4603-8d06-acbd60e166ee
RuleName = Uncommon Child Process Of AddinUtil.EXE
EventType = Process.Start
Tag = proc-start-uncommon-child-process-of-addinutil.exe
RiskScore = 50
Annotation = {"mitre_attack": ["T1218"]}
Query = iendswith(Parent.Path, "\\addinutil.exe") and not (iendswith(Process.Path, ":\\Windows\\System32\\conhost.exe") or iendswith(Process.Path, ":\\Windows\\System32\\werfault.exe") or iendswith(Process.Path, ":\\Windows\\SysWOW64\\werfault.exe"))
GenericProperty1 = Parent.Path


[ActivityMonitoringRule platform=Windows]
# Detects the execution of WMIC with the "csproduct" which is used to obtain information such as hardware models and vendor information
# Author: Florian Roth (Nextron Systems)
RuleId = 3e3ceccd-6c06-48b8-b5ff-ab1d25db8c1d
RuleName = Hardware Model Reconnaissance Via Wmic.EXE
EventType = Process.Start
Tag = proc-start-hardware-model-reconnaissance-via-wmic.exe
RiskScore = 50
Annotation = {"mitre_attack": ["T1047"]}
Query = (iendswith(Process.Path, "\\wmic.exe") or Process.Name == "wmic.exe") and icontains(Process.CommandLine, "csproduct")


[ActivityMonitoringRule platform=Windows]
# Detect use of the Windows 8.3 short name. Which could be used as a method to avoid command-line detection
# Author: frack113, Nasreddine Bencherchali
RuleId = 349d891d-fef0-4fe4-bc53-eee623a15969
RuleName = Use Short Name Path in Command Line
EventType = Process.Start
Tag = proc-start-use-short-name-path-in-command-line
RiskScore = 50
Annotation = {"mitre_attack": ["T1564.004"]}
Query = (icontains(Process.CommandLine, "~1\\") or icontains(Process.CommandLine, "~2\\")) and not (Parent.Path in ["C:\\Windows\\System32\\Dism.exe", "C:\\Windows\\System32\\cleanmgr.exe", "C:\\Program Files\\GPSoftware\\Directory Opus\\dopus.exe"] or iendswith(Parent.Path, "\\WebEx\\WebexHost.exe") or iendswith(Parent.Path, "\\thor\\thor64.exe") or iendswith(Parent.Path, "\\veam.backup.shell.exe") or iendswith(Parent.Path, "\\winget.exe") or iendswith(Parent.Path, "\\Everything\\Everything.exe") or icontains(Parent.Path, "\\AppData\\Local\\Temp\\WinGet\\") or icontains(Process.CommandLine, "\\appdata\\local\\webex\\webex64\\meetings\\wbxreport.exe") or icontains(Process.CommandLine, "C:\\Program Files\\Git\\post-install.bat") or icontains(Process.CommandLine, "C:\\Program Files\\Git\\cmd\\scalar.exe"))
GenericProperty1 = Parent.Path


[ActivityMonitoringRule platform=Windows]
# Detects potential SquiblyTwo attack technique with possible renamed WMIC via Imphash and OriginalFileName fields
# Author: Markus Neis, Florian Roth
RuleId = 8d63dadf-b91b-4187-87b6-34a1114577ea
RuleName = Potential SquiblyTwo Technique Execution
EventType = Process.Start
Tag = proc-start-potential-squiblytwo-technique-execution
RiskScore = 50
Annotation = {"mitre_attack": ["T1047", "T1220", "T1059.005", "T1059.007"]}
Query = (iendswith(Process.Path, "\\wmic.exe") or Process.Name == "wmic.exe" or Process.Hash.IMP in ["1B1A3F43BF37B5BFE60751F2EE2F326E", "37777A96245A3C74EB217308F3546F4C", "9D87C9D67CE724033C0B40CC4CA1B206"] or icontains(Process.Hashes, "IMPHASH=1B1A3F43BF37B5BFE60751F2EE2F326E") or icontains(Process.Hashes, "IMPHASH=37777A96245A3C74EB217308F3546F4C") or icontains(Process.Hashes, "IMPHASH=9D87C9D67CE724033C0B40CC4CA1B206")) and icontains(Process.CommandLine, "format:") and icontains(Process.CommandLine, "http")
GenericProperty1 = Process.Hash.IMP
GenericProperty2 = Process.Hashes


[ActivityMonitoringRule platform=Windows]
# Detects potential DLL sideloading of "AVKkid.dll"
# Author: X__Junior (Nextron Systems)
RuleId = 952ed57c-8f99-453d-aee0-53a49c22f95d
RuleName = Potential AVKkid.DLL Sideloading
EventType = Image.Load
Tag = potential-avkkid.dll-sideloading
RiskScore = 50
Annotation = {"mitre_attack": ["T1574.001", "T1574.002"]}
Query = iendswith(Image.Path, "\\AVKkid.dll") and not ((icontains(Process.Path, "C:\\Program Files (x86)\\G DATA\\") or icontains(Process.Path, "C:\\Program Files\\G DATA\\")) and iendswith(Process.Path, "\\AVKKid.exe") and (istartswith(Image.Path, "C:\\Program Files (x86)\\G DATA\\") or istartswith(Image.Path, "C:\\Program Files\\G DATA\\")))
GenericProperty1 = Image.Path


[ActivityMonitoringRule platform=Windows]
# Detects the execution of a system command via the ScreenConnect RMM service.
# Author: Ali Alwashali
RuleId = b1f73849-6329-4069-bc8f-78a604bb8b23
RuleName = Remote Access Tool - ScreenConnect Remote Command Execution
EventType = Process.Start
Tag = proc-start-remote-access-tool-screenconnect-remote-command-execution
RiskScore = 50
Annotation = {"mitre_attack": ["T1059.003"]}
Query = iendswith(Parent.Path, "\\ScreenConnect.ClientService.exe") and (iendswith(Process.Path, "\\cmd.exe") or Process.Name == "Cmd.Exe") and icontains(Process.CommandLine, "\\TEMP\\ScreenConnect\\")
GenericProperty1 = Parent.Path


[ActivityMonitoringRule platform=Windows]
# Detects browsers starting with the remote debugging flags. Which is a technique often used to perform browser injection attacks
# Author: pH-T (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)
RuleId = b3d34dc5-2efd-4ae3-845f-8ec14921f449
RuleName = Browser Started with Remote Debugging
EventType = Process.Start
Tag = proc-start-browser-started-with-remote-debugging
RiskScore = 50
Annotation = {"mitre_attack": ["T1185"]}
Query = icontains(Process.CommandLine, " --remote-debugging-") or iendswith(Process.Path, "\\firefox.exe") and icontains(Process.CommandLine, " -start-debugger-server")


[ActivityMonitoringRule platform=Windows]
# Detects execution of a browser process with a URL argument pointing to a file with a potentially interesting extension. This can be abused to download arbitrary files or to hide from the user for example by launching the browser in a minimized state.
# Author: Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)
RuleId = 94771a71-ba41-4b6e-a757-b531372eaab6
RuleName = File Download From Browser Process Via Inline URL
EventType = Process.Start
Tag = proc-start-file-download-from-browser-process-via-inline-url
RiskScore = 50
Annotation = {"mitre_attack": ["T1105"]}
Query = (iendswith(Process.Path, "\\brave.exe") or iendswith(Process.Path, "\\chrome.exe") or iendswith(Process.Path, "\\msedge.exe") or iendswith(Process.Path, "\\opera.exe") or iendswith(Process.Path, "\\vivaldi.exe")) and icontains(Process.CommandLine, "http") and (iendswith(Process.CommandLine, ".7z") or iendswith(Process.CommandLine, ".dat") or iendswith(Process.CommandLine, ".dll") or iendswith(Process.CommandLine, ".exe") or iendswith(Process.CommandLine, ".hta") or iendswith(Process.CommandLine, ".ps1") or iendswith(Process.CommandLine, ".psm1") or iendswith(Process.CommandLine, ".txt") or iendswith(Process.CommandLine, ".vbe") or iendswith(Process.CommandLine, ".vbs") or iendswith(Process.CommandLine, ".zip"))


[ActivityMonitoringRule platform=Windows]
# Detects when a possible suspicious driver is being installed via pnputil.exe lolbin
# Author: Hai Vaknin @LuxNoBulIshit, Avihay eldad  @aloneliassaf, Austin Songer @austinsonger
RuleId = a2ea3ae7-d3d0-40a0-a55c-25a45c87cac1
RuleName = Suspicious Driver Install by pnputil.exe
EventType = Process.Start
Tag = proc-start-suspicious-driver-install-by-pnputil.exe
RiskScore = 50
Annotation = {"mitre_attack": ["T1547"]}
Query = (icontains(Process.CommandLine, "-i") or icontains(Process.CommandLine, "/install") or icontains(Process.CommandLine, "-a") or icontains(Process.CommandLine, "/add-driver") or icontains(Process.CommandLine, ".inf")) and iendswith(Process.Path, "\\pnputil.exe")


[ActivityMonitoringRule platform=Windows]
# Detects the use of Jlaive to execute assemblies in a copied PowerShell
# Author: Jose Luis Sanchez Martinez (@Joseliyo_Jstnk)
RuleId = 0a99eb3e-1617-41bd-b095-13dc767f3def
RuleName = HackTool - Jlaive In-Memory Assembly Execution
EventType = Process.Start
Tag = proc-start-hacktool-jlaive-in-memory-assembly-execution
RiskScore = 50
Annotation = {"mitre_attack": ["T1059.003"]}
Query = iendswith(Parent.Path, "\\cmd.exe") and iendswith(Parent.CommandLine, ".bat") and (iendswith(Process.Path, "\\xcopy.exe") and icontains(Process.CommandLine, "powershell.exe") and icontains(Process.CommandLine, ".bat.exe") or iendswith(Process.Path, "\\xcopy.exe") and icontains(Process.CommandLine, "pwsh.exe") and icontains(Process.CommandLine, ".bat.exe") or iendswith(Process.Path, "\\attrib.exe") and icontains(Process.CommandLine, "+s") and icontains(Process.CommandLine, "+h") and icontains(Process.CommandLine, ".bat.exe"))
GenericProperty1 = Parent.Path
GenericProperty2 = Parent.CommandLine


[ActivityMonitoringRule platform=Windows]
# Detects PowerShell core DLL being loaded by an Office Product
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleId = bb2ba6fb-95d4-4a25-89fc-30bb736c021a
RuleName = PowerShell Core DLL Loaded Via Office Application
EventType = Image.Load
Tag = powershell-core-dll-loaded-via-office-application
RiskScore = 50
Query = (iendswith(Process.Path, "\\excel.exe") or iendswith(Process.Path, "\\mspub.exe") or iendswith(Process.Path, "\\outlook.exe") or iendswith(Process.Path, "\\onenote.exe") or iendswith(Process.Path, "\\onenoteim.exe") or iendswith(Process.Path, "\\powerpnt.exe") or iendswith(Process.Path, "\\winword.exe")) and (icontains(Image.Path, "\\System.Management.Automation.Dll") or icontains(Image.Path, "\\System.Management.Automation.ni.Dll"))
GenericProperty1 = Image.Path


[ActivityMonitoringRule platform=Windows]
# Detects a suspicious copy operation that tries to copy a program from system (System32, SysWOW64, WinSxS) directories to another on disk.
# Often used to move LOLBINs such as 'certutil' or 'desktopimgdownldr' to a different location with a different name in order to bypass detections based on locations.
# Author: Florian Roth (Nextron Systems), Markus Neis, Tim Shelton (HAWK.IO), Nasreddine Bencherchali (Nextron Systems)
RuleId = fff9d2b7-e11c-4a69-93d3-40ef66189767
RuleName = Suspicious Copy From or To System Directory
EventType = Process.Start
Tag = proc-start-suspicious-copy-from-or-to-system-directory
RiskScore = 50
Annotation = {"mitre_attack": ["T1036.003"]}
Query = (iendswith(Process.Path, "\\cmd.exe") and icontains(Process.CommandLine, "copy ") or (iendswith(Process.Path, "\\powershell.exe") or iendswith(Process.Path, "\\pwsh.exe")) and (icontains(Process.CommandLine, "copy-item") or icontains(Process.CommandLine, " copy ") or icontains(Process.CommandLine, "cpi ") or icontains(Process.CommandLine, " cp ")) or iendswith(Process.Path, "\\robocopy.exe") or iendswith(Process.Path, "\\xcopy.exe") or Process.Name in ["robocopy.exe", "XCOPY.EXE"]) and (icontains(Process.CommandLine, "\\System32") or icontains(Process.CommandLine, "\\SysWOW64") or icontains(Process.CommandLine, "\\WinSxS"))


[ActivityMonitoringRule platform=Windows]
# Detects suspicious powershell download cradle using nslookup. This cradle uses nslookup to extract payloads from DNS records
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleId = 1b3b01c7-84e9-4072-86e5-fc285a41ff23
RuleName = Nslookup PowerShell Download Cradle - ProcessCreation
EventType = Process.Start
Tag = proc-start-nslookup-powershell-download-cradle-processcreation
RiskScore = 50
Query = (icontains(Process.Path, "\\nslookup.exe") or Process.Name == "\\nslookup.exe") and (iendswith(Parent.Path, "\\powershell.exe") or iendswith(Parent.Path, "\\pwsh.exe")) and (icontains(Process.CommandLine, " -q=txt ") or icontains(Process.CommandLine, " -querytype=txt "))
GenericProperty1 = Parent.Path


[ActivityMonitoringRule platform=Windows]
# Well-known TAP software installation. Possible preparation for data exfiltration using tunneling techniques
# Author: Daniil Yugoslavskiy, Ian Davis, oscd.community
RuleId = 99793437-3e16-439b-be0f-078782cf953d
RuleName = Tap Installer Execution
EventType = Process.Start
Tag = proc-start-tap-installer-execution
RiskScore = 50
Annotation = {"mitre_attack": ["T1048"]}
Query = iendswith(Process.Path, "\\tapinstall.exe") and not (Process.Path in ["C:\\Program Files\\Avast Software\\SecureLine VPN\\tapinstall.exe", "C:\\Program Files (x86)\\Avast Software\\SecureLine VPN\\tapinstall.exe"] or istartswith(Process.Path, "C:\\Program Files\\OpenVPN Connect\\drivers\\tap\\") or istartswith(Process.Path, "C:\\Program Files (x86)\\Proton Technologies\\ProtonVPNTap\\installer\\"))


[ActivityMonitoringRule platform=Windows]
# Detects potentially uncommon child processes of SndVol.exe (the Windows volume mixer)
# Author: X__Junior (Nextron Systems)
RuleId = ba42babc-0666-4393-a4f7-ceaf5a69191e
RuleName = Uncommon Child Processes Of SndVol.exe
EventType = Process.Start
Tag = proc-start-uncommon-child-processes-of-sndvol.exe
RiskScore = 50
Query = iendswith(Parent.Path, "\\SndVol.exe") and not (iendswith(Process.Path, "\\rundll32.exe") and icontains(Process.CommandLine, " shell32.dll,Control_RunDLL "))
GenericProperty1 = Parent.Path


[ActivityMonitoringRule platform=Windows]
# Detects Microsoft Excel loading an Add-In (.xll) file from an uncommon location
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleId = af4c4609-5755-42fe-8075-4effb49f5d44
RuleName = Microsoft Excel Add-In Loaded From Uncommon Location
EventType = Image.Load
Tag = microsoft-excel-add-in-loaded-from-uncommon-location
RiskScore = 50
Annotation = {"mitre_attack": ["T1204.002"]}
Query = iendswith(Process.Path, "\\excel.exe") and (icontains(Image.Path, "\\Desktop\\") or icontains(Image.Path, "\\Downloads\\") or icontains(Image.Path, "\\Perflogs\\") or icontains(Image.Path, "\\Temp\\") or icontains(Image.Path, "\\Users\\Public\\") or icontains(Image.Path, "\\Windows\\Tasks\\")) and iendswith(Image.Path, ".xll")
GenericProperty1 = Image.Path


[ActivityMonitoringRule platform=Windows]
# Detects a non-browser process interacting with the Google API which could indicate the use of a covert C2 such as Google Sheet C2 (GC2-sheet)
# Author: Gavin Knapp
RuleId = 7e9cf7b6-e827-11ed-a05b-0242ac120003
RuleName = Suspicious Non-Browser Network Communication With Google API
EventType = Net.Any
Tag = suspicious-non-browser-network-communication-with-google-api
RiskScore = 50
Annotation = {"mitre_attack": ["T1102"]}
Query = (icontains(Net.Target.Name, "oauth2.googleapis.com") or icontains(Net.Target.Name, "sheets.googleapis.com") or icontains(Net.Target.Name, "drive.googleapis.com") or icontains(Net.Target.Name, "www.googleapis.com")) and not (iendswith(Process.Path, "\\brave.exe") or iendswith(Process.Path, ":\\Program Files\\Google\\Chrome\\Application\\chrome.exe") or iendswith(Process.Path, ":\\Program Files (x86)\\Google\\Chrome\\Application\\chrome.exe") or icontains(Process.Path, ":\\Program Files\\Google\\Drive File Stream\\") and iendswith(Process.Path, "\\GoogleDriveFS.exe") or iendswith(Process.Path, ":\\Program Files\\Mozilla Firefox\\firefox.exe") or iendswith(Process.Path, ":\\Program Files (x86)\\Mozilla Firefox\\firefox.exe") or iendswith(Process.Path, ":\\Program Files (x86)\\Internet Explorer\\iexplore.exe") or iendswith(Process.Path, ":\\Program Files\\Internet Explorer\\iexplore.exe") or iendswith(Process.Path, "\\maxthon.exe") or icontains(Process.Path, ":\\Program Files (x86)\\Microsoft\\EdgeWebView\\Application\\") or iendswith(Process.Path, ":\\Program Files (x86)\\Microsoft\\Edge\\Application\\msedge.exe") or iendswith(Process.Path, ":\\Program Files\\Microsoft\\Edge\\Application\\msedge.exe") or iendswith(Process.Path, "\\WindowsApps\\MicrosoftEdge.exe") or (icontains(Process.Path, ":\\Program Files (x86)\\Microsoft\\EdgeCore\\") or icontains(Process.Path, ":\\Program Files\\Microsoft\\EdgeCore\\")) and (iendswith(Process.Path, "\\msedge.exe") or iendswith(Process.Path, "\\msedgewebview2.exe")) or iendswith(Process.Path, "\\opera.exe") or iendswith(Process.Path, "\\safari.exe") or iendswith(Process.Path, "\\seamonkey.exe") or iendswith(Process.Path, "\\vivaldi.exe") or iendswith(Process.Path, "\\whale.exe") or iendswith(Process.Path, "\\GoogleUpdate.exe") or iendswith(Process.Path, "\\outlook.exe") or iendswith(Process.Path, "\\teams.exe"))
GenericProperty1 = Net.Target.Name


[ActivityMonitoringRule platform=Windows]
# Extract data from cab file and hide it in an alternate data stream
# Author: frack113
RuleId = 4b13db67-0c45-40f1-aba8-66a1a7198a1e
RuleName = Suspicious Extrac32 Alternate Data Stream Execution
EventType = Process.Start
Tag = proc-start-suspicious-extrac32-alternate-data-stream-execution
RiskScore = 50
Annotation = {"mitre_attack": ["T1564.004"]}
Query = icontains(Process.CommandLine, "extrac32.exe") and icontains(Process.CommandLine, ".cab") and regex_match(Process.CommandLine, r":[^\\\\]")


[ActivityMonitoringRule platform=Windows]
# Conti recommendation to its affiliates to use esentutl to access NTDS dumped file. Trickbot also uses this utilities to get MSEdge info via its module pwgrab.
# Author: sam0x90
RuleId = 7df1713a-1a5b-4a4b-a071-dc83b144a101
RuleName = Esentutl Gather Credentials
EventType = Process.Start
Tag = proc-start-esentutl-gather-credentials
RiskScore = 50
Annotation = {"mitre_attack": ["T1003", "T1003.003"]}
Query = icontains(Process.CommandLine, "esentutl") and icontains(Process.CommandLine, " /p")


[ActivityMonitoringRule platform=Windows]
# Detects the creation of system dlls that are not present on the system. Usually to achieve dll hijacking
# Author: Nasreddine Bencherchali (Nextron Systems), fornotes
RuleId = df6ecb8b-7822-4f4b-b412-08f524b4576c
RuleName = Creation Of Non-Existent System DLL
EventType = File.Create
Tag = creation-of-non-existent-system-dll
RiskScore = 50
Annotation = {"mitre_attack": ["T1574.001", "T1574.002"]}
Query = (File.Path in ["C:\\Windows\\System32\\WLBSCTRL.dll", "C:\\Windows\\System32\\TSMSISrv.dll", "C:\\Windows\\System32\\TSVIPSrv.dll", "C:\\Windows\\System32\\wow64log.dll", "C:\\Windows\\System32\\WptsExtensions.dll", "C:\\Windows\\System32\\wbem\\wbemcomn.dll"] or iendswith(File.Path, "\\SprintCSP.dll")) and not istartswith(Process.Path, "C:\\Windows\\System32\\")
GenericProperty1 = File.Path


[ActivityMonitoringRule platform=Windows]
# Detects usage of the "ms-appinstaller" protocol handler via command line to potentially download arbitrary files via AppInstaller.EXE
# The downloaded files are temporarly stored in ":\Users\%username%\AppData\Local\Packages\Microsoft.DesktopAppInstaller_8wekyb3d8bbwe\AC\INetCache\<RANDOM-8-CHAR-DIRECTORY>"
# Author: Nasreddine Bencherchali (Nextron Systems), Swachchhanda Shrawan Poudel
RuleId = 180c7c5c-d64b-4a63-86e9-68910451bc8b
RuleName = Potential File Download Via MS-AppInstaller Protocol Handler
EventType = Process.Start
Tag = proc-start-potential-file-download-via-ms-appinstaller-protocol-handler
RiskScore = 50
Annotation = {"mitre_attack": ["T1218"]}
Query = Process.CommandLine like "*ms-appinstaller://*source=*" and icontains(Process.CommandLine, "http")


[ActivityMonitoringRule platform=Windows]
# Detects invocation of Microsoft Workflow Compiler, which may permit the execution of arbitrary unsigned code.
# Author: Nik Seetharaman, frack113
RuleId = 419dbf2b-8a9b-4bea-bf99-7544b050ec8d
RuleName = Microsoft Workflow Compiler Execution
EventType = Process.Start
Tag = proc-start-microsoft-workflow-compiler-execution
RiskScore = 50
Annotation = {"mitre_attack": ["T1127", "T1218"]}
Query = iendswith(Process.Path, "\\Microsoft.Workflow.Compiler.exe") or Process.Name == "Microsoft.Workflow.Compiler.exe"


[ActivityMonitoringRule platform=Windows]
# Detects potential DLL sideloading using ClassicExplorer32.dll from the Classic Shell software
# Author: frack113
RuleId = caa02837-f659-466f-bca6-48bde2826ab4
RuleName = Potential DLL Sideloading Via ClassicExplorer32.dll
EventType = Image.Load
Tag = potential-dll-sideloading-via-classicexplorer32.dll
RiskScore = 50
Annotation = {"mitre_attack": ["T1574.001", "T1574.002"]}
Query = iendswith(Image.Path, "\\ClassicExplorer32.dll") and not istartswith(Image.Path, "C:\\Program Files\\Classic Shell\\")
GenericProperty1 = Image.Path


[ActivityMonitoringRule platform=Windows]
# Detects potential abuse of the "register_app.vbs" script that is part of the Windows SDK. The script offers the capability to register new VSS/VDS Provider as a COM+ application. Attackers can use this to install malicious DLLs for persistence and execution.
# Author: Austin Songer @austinsonger
RuleId = 28c8f68b-098d-45af-8d43-8089f3e35403
RuleName = Potential Register_App.Vbs LOLScript Abuse
EventType = Process.Start
Tag = proc-start-potential-register_app.vbs-lolscript-abuse
RiskScore = 50
Annotation = {"mitre_attack": ["T1218"]}
Query = (iendswith(Process.Path, "\\cscript.exe") or iendswith(Process.Path, "\\wscript.exe") or Process.Name in ["cscript.exe", "wscript.exe"]) and icontains(Process.CommandLine, ".vbs -register ")


[ActivityMonitoringRule platform=Windows]
# Detects execution of the "cloudflared" tool with the tunnel "cleanup" flag in order to cleanup tunnel connections.
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleId = 7050bba1-1aed-454e-8f73-3f46f09ce56a
RuleName = Cloudflared Tunnel Connections Cleanup
EventType = Process.Start
Tag = proc-start-cloudflared-tunnel-connections-cleanup
RiskScore = 50
Annotation = {"mitre_attack": ["T1102", "T1090", "T1572"]}
Query = icontains(Process.CommandLine, " tunnel ") and icontains(Process.CommandLine, "cleanup ") and (icontains(Process.CommandLine, " --config ") or icontains(Process.CommandLine, " --connector-id "))


[ActivityMonitoringRule platform=Windows]
# Detects the execution of the LOLBIN jsc.exe used by .NET to compile javascript code to .exe or .dll format
# Author: frack113
RuleId = 52788a70-f1da-40dd-8fbd-73b5865d6568
RuleName = JSC Convert Javascript To Executable
EventType = Process.Start
Tag = proc-start-jsc-convert-javascript-to-executable
RiskScore = 50
Annotation = {"mitre_attack": ["T1127"]}
Query = iendswith(Process.Path, "\\jsc.exe") and icontains(Process.CommandLine, ".js")


[ActivityMonitoringRule platform=Windows]
# Detects DLL sideloading of "dbgcore.dll"
# Author: Nasreddine Bencherchali (Nextron Systems), Wietze Beukema (project and research)
RuleId = 9ca2bf31-0570-44d8-a543-534c47c33ed7
RuleName = Potential DLL Sideloading Of DBGCORE.DLL
EventType = Image.Load
Tag = potential-dll-sideloading-of-dbgcore.dll
RiskScore = 50
Annotation = {"mitre_attack": ["T1574.001", "T1574.002"]}
Query = iendswith(Image.Path, "\\dbgcore.dll") and not (istartswith(Image.Path, "C:\\Program Files (x86)\\") or istartswith(Image.Path, "C:\\Program Files\\") or istartswith(Image.Path, "C:\\Windows\\SoftwareDistribution\\") or istartswith(Image.Path, "C:\\Windows\\System32\\") or istartswith(Image.Path, "C:\\Windows\\SystemTemp\\") or istartswith(Image.Path, "C:\\Windows\\SysWOW64\\") or istartswith(Image.Path, "C:\\Windows\\WinSxS\\")) and not iendswith(Image.Path, "\\Steam\\bin\\cef\\cef.win7x64\\dbgcore.dll")
GenericProperty1 = Image.Path


[ActivityMonitoringRule platform=Windows]
# Detects the use of NirCmd tool for command execution, which could be the result of legitimate administrative activity
# Author: Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)
RuleId = 4e2ed651-1906-4a59-a78a-18220fca1b22
RuleName = PUA - NirCmd Execution
EventType = Process.Start
Tag = proc-start-pua-nircmd-execution
RiskScore = 50
Annotation = {"mitre_attack": ["T1569.002"]}
Query = iendswith(Process.Path, "\\NirCmd.exe") or Process.Name == "NirCmd.exe" or icontains(Process.CommandLine, " execmd ") or icontains(Process.CommandLine, ".exe script ") or icontains(Process.CommandLine, ".exe shexec ") or icontains(Process.CommandLine, " runinteractive ") or (icontains(Process.CommandLine, " exec ") or icontains(Process.CommandLine, " exec2 ")) and (icontains(Process.CommandLine, " show ") or icontains(Process.CommandLine, " hide "))


[ActivityMonitoringRule platform=Windows]
# Detects the creation of new DLL assembly files by "aspnet_compiler.exe", which could be a sign of "aspnet_compiler" abuse to proxy execution through a build provider.
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleId = 4c7f49ee-2638-43bb-b85b-ce676c30b260
RuleName = Assembly DLL Creation Via AspNetCompiler
EventType = File.Create
Tag = assembly-dll-creation-via-aspnetcompiler
RiskScore = 50
Query = iendswith(Process.Path, "\\aspnet_compiler.exe") and icontains(File.Path, "\\Temporary ASP.NET Files\\") and icontains(File.Path, "\\assembly\\tmp\\") and icontains(File.Path, ".dll")
GenericProperty1 = File.Path


[ActivityMonitoringRule platform=Windows]
# Detects possible password spraying attempts using Dsacls
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleId = bac9fb54-2da7-44e9-988f-11e9a5edbc0c
RuleName = Potential Password Spraying Attempt Using Dsacls.EXE
EventType = Process.Start
Tag = proc-start-potential-password-spraying-attempt-using-dsacls.exe
RiskScore = 50
Annotation = {"mitre_attack": ["T1218"]}
Query = (iendswith(Process.Path, "\\dsacls.exe") or Process.Name == "DSACLS.EXE") and icontains(Process.CommandLine, "/user:") and icontains(Process.CommandLine, "/passwd:")


[ActivityMonitoringRule platform=Windows]
# Detects execution of the "VMwareToolBoxCmd.exe" with the "script" and "set" flag to setup a specific script to run for a specific VM state
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleId = 7aa4e81a-a65c-4e10-9f81-b200eb229d7d
RuleName = Potential Persistence Via VMwareToolBoxCmd.EXE VM State Change Script
EventType = Process.Start
Tag = proc-start-potential-persistence-via-vmwaretoolboxcmd.exe-vm-state-change-script
RiskScore = 50
Annotation = {"mitre_attack": ["T1059"]}
Query = (iendswith(Process.Path, "\\VMwareToolBoxCmd.exe") or Process.Name == "toolbox-cmd.exe") and icontains(Process.CommandLine, " script ") and icontains(Process.CommandLine, " set ")


[ActivityMonitoringRule platform=Windows]
# Detects the execution of DeviceCredentialDeployment to hide a process from view
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleId = b8b1b304-a60f-4999-9a6e-c547bde03ffd
RuleName = DeviceCredentialDeployment Execution
EventType = Process.Start
Tag = proc-start-devicecredentialdeployment-execution
RiskScore = 50
Annotation = {"mitre_attack": ["T1218"]}
Query = iendswith(Process.Path, "\\DeviceCredentialDeployment.exe")


[ActivityMonitoringRule platform=Windows]
# Detects manual execution of the "Microsoft Compatibility Appraiser" task via schtasks.
# In order to trigger persistence stored in the "\AppCompatFlags\TelemetryController" registry key.
# Author: Sreeman
RuleId = f548a603-c9f2-4c89-b511-b089f7e94549
RuleName = Potential Persistence Via Microsoft Compatibility Appraiser
EventType = Process.Start
Tag = proc-start-potential-persistence-via-microsoft-compatibility-appraiser
RiskScore = 50
Annotation = {"mitre_attack": ["T1053.005"]}
Query = (iendswith(Process.Path, "\\schtasks.exe") or Process.Name == "schtasks.exe") and icontains(Process.CommandLine, "run ") and icontains(Process.CommandLine, "\\Application Experience\\Microsoft Compatibility Appraiser")


[ActivityMonitoringRule platform=Windows]
# Detects the creation or modification of a vscode related powershell profile which could indicate suspicious activity as the profile can be used as a mean of persistence
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleId = 3a9fa2ec-30bc-4ebd-b49e-7c9cff225502
RuleName = VsCode Powershell Profile Modification
EventType = File.Create
Tag = vscode-powershell-profile-modification
RiskScore = 50
Annotation = {"mitre_attack": ["T1546.013"]}
Query = iendswith(File.Path, "\\Microsoft.VSCode_profile.ps1")
GenericProperty1 = File.Path


[ActivityMonitoringRule platform=Windows]
# Detects the excution of a potential recon command where the results are piped to "findstr". This is meant to trigger on inline calls of "cmd.exe" via the "/c" or "/k" for example. Attackers often time use this to extract specific information they require in their chain.
# Author: Nasreddine Bencherchali (Nextron Systems), frack113
RuleId = ccb5742c-c248-4982-8c5c-5571b9275ad3
RuleName = Recon Command Output Piped To Findstr.EXE
EventType = Process.Start
Tag = proc-start-recon-command-output-piped-to-findstr.exe
RiskScore = 50
Annotation = {"mitre_attack": ["T1057"]}
Query = icontains(Process.CommandLine, "ipconfig /all | find ") or icontains(Process.CommandLine, "ipconfig /all | findstr ") or icontains(Process.CommandLine, "ipconfig | find ") or icontains(Process.CommandLine, "ipconfig | findstr ") or icontains(Process.CommandLine, "ipconfig.exe /all | find ") or icontains(Process.CommandLine, "ipconfig.exe /all | findstr ") or icontains(Process.CommandLine, "ipconfig.exe | find ") or icontains(Process.CommandLine, "ipconfig.exe | findstr ") or icontains(Process.CommandLine, "net start | find") or icontains(Process.CommandLine, "net start | findstr") or icontains(Process.CommandLine, "net.exe start | find") or icontains(Process.CommandLine, "net.exe start | findstr") or icontains(Process.CommandLine, "net1 start | find") or icontains(Process.CommandLine, "net1 start | findstr") or icontains(Process.CommandLine, "net1.exe start | find") or icontains(Process.CommandLine, "net1.exe start | findstr") or icontains(Process.CommandLine, "netstat -ano | find") or icontains(Process.CommandLine, "netstat -ano | findstr") or icontains(Process.CommandLine, "netstat | find") or icontains(Process.CommandLine, "netstat | findstr") or icontains(Process.CommandLine, "netstat.exe -ano | find") or icontains(Process.CommandLine, "netstat.exe -ano | findstr") or icontains(Process.CommandLine, "netstat.exe | find") or icontains(Process.CommandLine, "netstat.exe | findstr") or icontains(Process.CommandLine, "ping | find") or icontains(Process.CommandLine, "ping | findstr") or icontains(Process.CommandLine, "ping.exe | find") or icontains(Process.CommandLine, "ping.exe | findstr") or icontains(Process.CommandLine, "systeminfo | find ") or icontains(Process.CommandLine, "systeminfo | findstr ") or icontains(Process.CommandLine, "systeminfo.exe | find ") or icontains(Process.CommandLine, "systeminfo.exe | findstr ") or icontains(Process.CommandLine, "tasklist | find ") or icontains(Process.CommandLine, "tasklist | findstr ") or icontains(Process.CommandLine, "tasklist.exe | find ") or icontains(Process.CommandLine, "tasklist.exe | findstr ") or icontains(Process.CommandLine, "whoami /all | find ") or icontains(Process.CommandLine, "whoami /all | findstr ") or icontains(Process.CommandLine, "whoami.exe /all | find ") or icontains(Process.CommandLine, "whoami.exe /all | findstr ")


[ActivityMonitoringRule platform=Windows]
# Detects usage of the Get-ADComputer cmdlet to collect computer information and output it to a file
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleId = 435e10e4-992a-4281-96f3-38b11106adde
RuleName = Computer Discovery And Export Via Get-ADComputer Cmdlet
EventType = Process.Start
Tag = proc-start-computer-discovery-and-export-via-get-adcomputer-cmdlet
RiskScore = 50
Annotation = {"mitre_attack": ["T1033"]}
Query = (iendswith(Process.Path, "\\powershell.exe") or iendswith(Process.Path, "\\pwsh.exe") or Process.Name in ["PowerShell.EXE", "pwsh.dll"]) and icontains(Process.CommandLine, "Get-ADComputer ") and icontains(Process.CommandLine, " -Filter \*") and (icontains(Process.CommandLine, " > ") or icontains(Process.CommandLine, " | Select ") or icontains(Process.CommandLine, "Out-File") or icontains(Process.CommandLine, "Set-Content") or icontains(Process.CommandLine, "Add-Content"))


[ActivityMonitoringRule platform=Windows]
# Detects using Rpcping.exe to send a RPC test connection to the target server (-s) and force the NTLM hash to be sent in the process.
# Author: Julia Fomina, oscd.community
RuleId = 93671f99-04eb-4ab4-a161-70d446a84003
RuleName = Capture Credentials with Rpcping.exe
EventType = Process.Start
Tag = proc-start-capture-credentials-with-rpcping.exe
RiskScore = 50
Annotation = {"mitre_attack": ["T1003"]}
Query = iendswith(Process.Path, "\\rpcping.exe") and (icontains(Process.CommandLine, "-s") or icontains(Process.CommandLine, "/s")) and (icontains(Process.CommandLine, "-u") and icontains(Process.CommandLine, "NTLM") or icontains(Process.CommandLine, "/u") and icontains(Process.CommandLine, "NTLM") or icontains(Process.CommandLine, "-t") and icontains(Process.CommandLine, "ncacn_np") or icontains(Process.CommandLine, "/t") and icontains(Process.CommandLine, "ncacn_np"))


[ActivityMonitoringRule platform=Windows]
# Detects the creation of the LiveKD driver, which is used for live kernel debugging
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleId = 16fe46bb-4f64-46aa-817d-ff7bec4a2352
RuleName = LiveKD Driver Creation
EventType = File.Create
Tag = livekd-driver-creation
RiskScore = 50
Query = File.Path == "C:\\Windows\\System32\\drivers\\LiveKdD.SYS" and (iendswith(Process.Path, "\\livekd.exe") or iendswith(Process.Path, "\\livek64.exe"))
GenericProperty1 = File.Path


[ActivityMonitoringRule platform=Windows]
# Detects potential suspicious behaviour using secedit.exe. Such as exporting or modifying the security policy
# Author: Janantha Marasinghe
RuleId = c2c76b77-32be-4d1f-82c9-7e544bdfe0eb
RuleName = Potential Suspicious Activity Using SeCEdit
EventType = Process.Start
Tag = proc-start-potential-suspicious-activity-using-secedit
RiskScore = 50
Annotation = {"mitre_attack": ["T1562.002", "T1547.001", "T1505.005", "T1556.002", "T1562", "T1574.007", "T1564.002", "T1546.008", "T1546.007", "T1547.014", "T1547.010", "T1547.002", "T1557", "T1082"]}
Query = (iendswith(Process.Path, "\\secedit.exe") or Process.Name == "SeCEdit") and (icontains(Process.CommandLine, "/export") and icontains(Process.CommandLine, "/cfg") or icontains(Process.CommandLine, "/configure") and icontains(Process.CommandLine, "/db"))


[ActivityMonitoringRule platform=Windows]
# Detects code execution via Pester.bat (Pester - Powershell Modulte for testing)
# Author: frack113, Nasreddine Bencherchali
RuleId = 18988e1b-9087-4f8a-82fe-0414dce49878
RuleName = Execute Code with Pester.bat as Parent
EventType = Process.Start
Tag = proc-start-execute-code-with-pester.bat-as-parent
RiskScore = 50
Annotation = {"mitre_attack": ["T1059.001", "T1216"]}
Query = (iendswith(Parent.Path, "\\powershell.exe") or iendswith(Parent.Path, "\\pwsh.exe")) and icontains(Parent.CommandLine, "\\WindowsPowerShell\\Modules\\Pester\\") and (icontains(Parent.CommandLine, "{ Invoke-Pester -EnableExit ;") or icontains(Parent.CommandLine, "{ Get-Help \""))
GenericProperty1 = Parent.Path
GenericProperty2 = Parent.CommandLine


[ActivityMonitoringRule platform=Windows]
# Detects suspicious msiexec process starts with web addresses as parameter
# Author: Florian Roth (Nextron Systems)
RuleId = f7b5f842-a6af-4da5-9e95-e32478f3cd2f
RuleName = MsiExec Web Install
EventType = Process.Start
Tag = proc-start-msiexec-web-install
RiskScore = 50
Annotation = {"mitre_attack": ["T1218.007", "T1105"]}
Query = icontains(Process.CommandLine, " msiexec") and icontains(Process.CommandLine, "://")


[ActivityMonitoringRule platform=Windows]
# Detects the creation of screensaver files (.scr) outside of system folders. Attackers may execute an application as an ".SCR" file using "rundll32.exe desk.cpl,InstallScreenSaver" for example.
# Author: Christopher Peacock @securepeacock, SCYTHE @scythe_io
RuleId = c048f047-7e2a-4888-b302-55f509d4a91d
RuleName = SCR File Write Event
EventType = File.Create
Tag = scr-file-write-event
RiskScore = 50
Annotation = {"mitre_attack": ["T1218.011"]}
Query = iendswith(File.Path, ".scr") and not (icontains(File.Path, ":\\$WINDOWS.~BT\\NewOS\\") or icontains(File.Path, ":\\Windows\\System32\\") or icontains(File.Path, ":\\Windows\\SysWOW64\\") or icontains(File.Path, ":\\Windows\\WinSxS\\") or icontains(File.Path, ":\\WUDownloadCache\\"))
GenericProperty1 = File.Path


[ActivityMonitoringRule platform=Windows]
# Detects potential DLL sideloading of "roboform.dll", a DLL used by RoboForm Password Manager
# Author: X__Junior (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)
RuleId = f64c9b2d-b0ad-481d-9d03-7fc75020892a
RuleName = Potential RoboForm.DLL Sideloading
EventType = Image.Load
Tag = potential-roboform.dll-sideloading
RiskScore = 50
Annotation = {"mitre_attack": ["T1574.001", "T1574.002"]}
Query = (iendswith(Image.Path, "\\roboform.dll") or iendswith(Image.Path, "\\roboform-x64.dll")) and not ((istartswith(Process.Path, " C:\\Program Files (x86)\\Siber Systems\\AI RoboForm\\") or istartswith(Process.Path, " C:\\Program Files\\Siber Systems\\AI RoboForm\\")) and (iendswith(Process.Path, "\\robotaskbaricon.exe") or iendswith(Process.Path, "\\robotaskbaricon-x64.exe")))
GenericProperty1 = Image.Path


[ActivityMonitoringRule platform=Windows]
# Detects when verclsid.exe is used to run COM object via GUID
# Author: Victor Sergeev, oscd.community
RuleId = d06be4b9-8045-428b-a567-740a26d9db25
RuleName = Verclsid.exe Runs COM Object
EventType = Process.Start
Tag = proc-start-verclsid.exe-runs-com-object
RiskScore = 50
Annotation = {"mitre_attack": ["T1218"]}
Query = (iendswith(Process.Path, "\\verclsid.exe") or Process.Name == "verclsid.exe") and icontains(Process.CommandLine, "/S") and icontains(Process.CommandLine, "/C")


[ActivityMonitoringRule platform=Windows]
# Detects usage of winget to add new additional download sources
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleId = 05ebafc8-7aa2-4bcd-a269-2aec93f9e842
RuleName = Add New Download Source To Winget
EventType = Process.Start
Tag = proc-start-add-new-download-source-to-winget
RiskScore = 50
Annotation = {"mitre_attack": ["T1059"]}
Query = (iendswith(Process.Path, "\\winget.exe") or Process.Name == "winget.exe") and icontains(Process.CommandLine, "source ") and icontains(Process.CommandLine, "add ")


[ActivityMonitoringRule platform=Windows]
# Detects suspicious child processes of Wscript/Cscript
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleId = b6676963-0353-4f88-90f5-36c20d443c6a
RuleName = Cscript/Wscript Suspicious Child Process
EventType = Process.Start
Tag = proc-start-cscript/wscript-suspicious-child-process
RiskScore = 50
Query = (iendswith(Parent.Path, "\\wscript.exe") or iendswith(Parent.Path, "\\cscript.exe")) and (iendswith(Process.Path, "\\cmd.exe") or iendswith(Process.Path, "\\powershell.exe") or iendswith(Process.Path, "\\pwsh.exe")) and (icontains(Process.CommandLine, "mshta") and icontains(Process.CommandLine, "http") or icontains(Process.CommandLine, "rundll32") or icontains(Process.CommandLine, "regsvr32") or icontains(Process.CommandLine, "msiexec"))
GenericProperty1 = Parent.Path


[ActivityMonitoringRule platform=Windows]
# Detects signs of potential use of the WSMAN provider from uncommon processes locally and remote execution.
# Author: Roberto Rodriguez (Cyb3rWard0g), OTR (Open Threat Research)
RuleId = ad1f4bb9-8dfb-4765-adb6-2a7cfb6c0f94
RuleName = Suspicious WSMAN Provider Image Loads
EventType = Image.Load
Tag = suspicious-wsman-provider-image-loads
RiskScore = 50
Annotation = {"mitre_attack": ["T1059.001", "T1021.003"]}
Query = (iendswith(Image.Path, "\\WsmSvc.dll") or iendswith(Image.Path, "\\WsmAuto.dll") or iendswith(Image.Path, "\\Microsoft.WSMan.Management.ni.dll") or Process.Name in ["WsmSvc.dll", "WSMANAUTOMATION.DLL", "Microsoft.WSMan.Management.dll"] or iendswith(Process.Path, "\\svchost.exe") and Process.Name == "WsmWmiPl.dll") and not (iendswith(Process.Path, "\\powershell.exe") or iendswith(Process.Path, "C:\\Windows\\System32\\sdiagnhost.exe") or iendswith(Process.Path, "C:\\Windows\\System32\\services.exe") or icontains(Process.CommandLine, "svchost.exe -k netsvcs -p -s BITS") or icontains(Process.CommandLine, "svchost.exe -k GraphicsPerfSvcGroup -s GraphicsPerfSvc") or icontains(Process.CommandLine, "svchost.exe -k NetworkService -p -s Wecsvc") or icontains(Process.CommandLine, "svchost.exe -k netsvcs") or (istartswith(Process.Path, "C:\\Windows\\Microsoft.NET\\Framework64\\v") or istartswith(Process.Path, "C:\\Windows\\Microsoft.NET\\Framework\\v")) and iendswith(Process.Path, "\\mscorsvw.exe") or Process.Path in ["C:\\Windows\\System32\\Configure-SMRemoting.exe", "C:\\Windows\\System32\\ServerManager.exe"] or istartswith(Process.Path, "C:\\Windows\\Temp\\asgard2-agent\\") or istartswith(Process.Path, "C:\\Program Files\\Citrix\\") or iendswith(Process.Path, "\\powershell_ise.exe") or istartswith(Process.Path, "C:\\$WINDOWS.~BT\\Sources\\")) and not (iendswith(Process.Path, "\\svchost.exe") and isnull(Process.CommandLine))
GenericProperty1 = Image.Path


[ActivityMonitoringRule platform=Windows]
# Detects usage of winget to install applications via manifest file. Adversaries can abuse winget to download payloads remotely and execute them.
# The manifest option enables you to install an application by passing in a YAML file directly to the client.
# Winget can be used to download and install exe, msi or msix files later.
# Author: Sreeman, Florian Roth (Nextron Systems), frack113
RuleId = 313d6012-51a0-4d93-8dfc-de8553239e25
RuleName = Install New Package Via Winget Local Manifest
EventType = Process.Start
Tag = proc-start-install-new-package-via-winget-local-manifest
RiskScore = 50
Annotation = {"mitre_attack": ["T1059"]}
Query = (iendswith(Process.Path, "\\winget.exe") or Process.Name == "winget.exe") and (icontains(Process.CommandLine, "install") or icontains(Process.CommandLine, " add ")) and (icontains(Process.CommandLine, "-m ") or icontains(Process.CommandLine, "--manifest"))


[ActivityMonitoringRule platform=Windows]
# Detects the use of the Microsoft signed script "CL_mutexverifiers" to proxy the execution of additional PowerShell script commands
# Author: Nasreddine Bencherchali (Nextron Systems), oscd.community, Natalia Shornikova, frack113
RuleId = 1e0e1a81-e79b-44bc-935b-ddb9c8006b3d
RuleName = Potential Script Proxy Execution Via CL_Mutexverifiers.ps1
EventType = Process.Start
Tag = proc-start-potential-script-proxy-execution-via-cl_mutexverifiers.ps1
RiskScore = 50
Annotation = {"mitre_attack": ["T1216"]}
Query = (iendswith(Parent.Path, "\\powershell.exe") or iendswith(Parent.Path, "\\pwsh.exe")) and iendswith(Process.Path, "\\powershell.exe") and icontains(Process.CommandLine, " -nologo -windowstyle minimized -file ") and (icontains(Process.CommandLine, "\\AppData\\Local\\Temp\\") or icontains(Process.CommandLine, "\\Windows\\Temp\\"))
GenericProperty1 = Parent.Path


[ActivityMonitoringRule platform=Windows]
# Detects suspicious command line flags that let the user set a target user and command as e.g. seen in PsExec-like tools
# Author: Florian Roth (Nextron Systems)
RuleId = 50d66fb0-03f8-4da0-8add-84e77d12a020
RuleName = Suspicious RunAs-Like Flag Combination
EventType = Process.Start
Tag = proc-start-suspicious-runas-like-flag-combination
RiskScore = 50
Query = (icontains(Process.CommandLine, " -u system ") or icontains(Process.CommandLine, " --user system ") or icontains(Process.CommandLine, " -u NT") or icontains(Process.CommandLine, " -u \"NT") or icontains(Process.CommandLine, " -u 'NT") or icontains(Process.CommandLine, " --system ") or icontains(Process.CommandLine, " -u administrator ")) and (icontains(Process.CommandLine, " -c cmd") or icontains(Process.CommandLine, " -c \"cmd") or icontains(Process.CommandLine, " -c powershell") or icontains(Process.CommandLine, " -c \"powershell") or icontains(Process.CommandLine, " --command cmd") or icontains(Process.CommandLine, " --command powershell") or icontains(Process.CommandLine, " -c whoami") or icontains(Process.CommandLine, " -c wscript") or icontains(Process.CommandLine, " -c cscript"))


[ActivityMonitoringRule platform=Windows]
# Detect usage of DLL "coregen.exe" (Microsoft CoreCLR Native Image Generator) binary to sideload arbitrary DLLs.
# Author: frack113
RuleId = 0fa66f66-e3f6-4a9c-93f8-4f2610b00171
RuleName = Potential DLL Sideloading Using Coregen.exe
EventType = Image.Load
Tag = potential-dll-sideloading-using-coregen.exe
RiskScore = 50
Annotation = {"mitre_attack": ["T1218", "T1055"]}
Query = iendswith(Process.Path, "\\coregen.exe") and not (istartswith(Image.Path, "C:\\Windows\\System32\\") or istartswith(Image.Path, "C:\\Windows\\SysWOW64\\") or istartswith(Image.Path, "C:\\Program Files\\Microsoft Silverlight\\") or istartswith(Image.Path, "C:\\Program Files (x86)\\Microsoft Silverlight\\"))
GenericProperty1 = Image.Path


[ActivityMonitoringRule platform=Windows]
# Detects execution of the AgentExecutor.exe binary. Which can be abused as a LOLBIN to execute powershell scripts with the ExecutionPolicy "Bypass" or any binary named "powershell.exe" located in the path provided by 6th positional argument
# Author: Nasreddine Bencherchali (Nextron Systems), memory-shards
RuleId = 7efd2c8d-8b18-45b7-947d-adfe9ed04f61
RuleName = AgentExecutor PowerShell Execution
EventType = Process.Start
Tag = proc-start-agentexecutor-powershell-execution
RiskScore = 50
Annotation = {"mitre_attack": ["T1218"]}
Query = (Process.Path == "\\AgentExecutor.exe" or Process.Name == "AgentExecutor.exe") and (icontains(Process.CommandLine, " -powershell") or icontains(Process.CommandLine, " -remediationScript"))


[ActivityMonitoringRule platform=Windows]
# Detects suspicious process related to rundll32 based on arguments
# Author: frack113, Zaw Min Htun (ZETA)
RuleId = 73fcad2e-ff14-4c38-b11d-4172c8ac86c7
RuleName = Suspicious Rundll32 Script in CommandLine
EventType = Process.Start
Tag = proc-start-suspicious-rundll32-script-in-commandline
RiskScore = 50
Annotation = {"mitre_attack": ["T1218.011"]}
Query = icontains(Process.CommandLine, "rundll32") and (icontains(Process.CommandLine, "mshtml,RunHTMLApplication") or icontains(Process.CommandLine, "mshtml,#135")) and (icontains(Process.CommandLine, "javascript:") or icontains(Process.CommandLine, "vbscript:"))


[ActivityMonitoringRule platform=Windows]
# Detects suspicious process run from unusual locations
# Author: juju4, Jonhnathan Ribeiro, oscd.community
RuleId = 15b75071-74cc-47e0-b4c6-b43744a62a2b
RuleName = Suspicious Process Start Locations
EventType = Process.Start
Tag = proc-start-suspicious-process-start-locations
RiskScore = 50
Annotation = {"mitre_attack": ["T1036"]}
Query = icontains(Process.Path, ":\\RECYCLER\\") or icontains(Process.Path, ":\\SystemVolumeInformation\\") or istartswith(Process.Path, "C:\\Windows\\Tasks\\") or istartswith(Process.Path, "C:\\Windows\\debug\\") or istartswith(Process.Path, "C:\\Windows\\fonts\\") or istartswith(Process.Path, "C:\\Windows\\help\\") or istartswith(Process.Path, "C:\\Windows\\drivers\\") or istartswith(Process.Path, "C:\\Windows\\addins\\") or istartswith(Process.Path, "C:\\Windows\\cursors\\") or istartswith(Process.Path, "C:\\Windows\\system32\\tasks\\")


[ActivityMonitoringRule platform=Windows]
# Detects set value ms-msdt MSProtocol URI scheme in Registry that could be an attempt to exploit CVE-2022-30190.
# Author: Sittikorn S
RuleId = 2d9403d5-7927-46b7-8216-37ab7c9ec5e3
RuleName = Suspicious Set Value of MSDT in Registry (CVE-2022-30190)
EventType = Reg.Any
Tag = suspicious-set-value-of-msdt-in-registry-(cve-2022-30190)
RiskScore = 50
Annotation = {"mitre_attack": ["T1221"]}
Query = istartswith(Reg.Key.Target, "HKCR\\ms-msdt\\")
Hive = HKLM,HKU
GenericProperty1 = Reg.Key.Target


[ActivityMonitoringRule platform=Windows]
# Detects the usage of "reg.exe" in order to query reconnaissance information from the registry. Adversaries may interact with the Windows registry to gather information about credentials, the system, configuration, and installed software.
# Author: Timur Zinniatullin, oscd.community
RuleId = 970007b7-ce32-49d0-a4a4-fbef016950bd
RuleName = Potential Configuration And Service Reconnaissance Via Reg.EXE
EventType = Process.Start
Tag = proc-start-potential-configuration-and-service-reconnaissance-via-reg.exe
RiskScore = 50
Annotation = {"mitre_attack": ["T1012", "T1007"]}
Query = (iendswith(Process.Path, "\\reg.exe") or Process.Name == "reg.exe") and icontains(Process.CommandLine, "query") and (icontains(Process.CommandLine, "currentVersion\\windows") or icontains(Process.CommandLine, "winlogon\\") or icontains(Process.CommandLine, "currentVersion\\shellServiceObjectDelayLoad") or icontains(Process.CommandLine, "currentVersion\\run") or icontains(Process.CommandLine, "currentVersion\\policies\\explorer\\run") or icontains(Process.CommandLine, "currentcontrolset\\services"))


[ActivityMonitoringRule platform=Windows]
# Detects the execution of "dotnet-dump" with the "collect" flag. The execution could indicate potential process dumping of critical processes such as LSASS
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleId = 53d8d3e1-ca33-4012-adf3-e05a4d652e34
RuleName = Process Memory Dump Via Dotnet-Dump
EventType = Process.Start
Tag = proc-start-process-memory-dump-via-dotnet-dump
RiskScore = 50
Annotation = {"mitre_attack": ["T1218"]}
Query = (iendswith(Process.Path, "\\dotnet-dump.exe") or Process.Name == "dotnet-dump.dll") and icontains(Process.CommandLine, "collect")


[ActivityMonitoringRule platform=Windows]
# Detect usage of the "runexehelper.exe" binary as a proxy to launch other programs
# Author: frack113
RuleId = cd71385d-fd9b-4691-9b98-2b1f7e508714
RuleName = Lolbin Runexehelper Use As Proxy
EventType = Process.Start
Tag = proc-start-lolbin-runexehelper-use-as-proxy
RiskScore = 50
Annotation = {"mitre_attack": ["T1218"]}
Query = iendswith(Parent.Path, "\\runexehelper.exe")
GenericProperty1 = Parent.Path


[ActivityMonitoringRule platform=Windows]
# Monitors for the hiding possible malicious files in the C:\Windows\Fonts\ location. This folder doesn't require admin privillege to be written and executed from.
# Author: Sreeman
RuleId = ae9b0bd7-8888-4606-b444-0ed7410cb728
RuleName = Writing Of Malicious Files To The Fonts Folder
EventType = Process.Start
Tag = proc-start-writing-of-malicious-files-to-the-fonts-folder
RiskScore = 50
Annotation = {"mitre_attack": ["T1211", "T1059"]}
Query = (icontains(Process.CommandLine, "echo") or icontains(Process.CommandLine, "copy") or icontains(Process.CommandLine, "type") or icontains(Process.CommandLine, "file createnew") or icontains(Process.CommandLine, "cacls")) and icontains(Process.CommandLine, "C:\\Windows\\Fonts\\") and (icontains(Process.CommandLine, ".sh") or icontains(Process.CommandLine, ".exe") or icontains(Process.CommandLine, ".dll") or icontains(Process.CommandLine, ".bin") or icontains(Process.CommandLine, ".bat") or icontains(Process.CommandLine, ".cmd") or icontains(Process.CommandLine, ".js") or icontains(Process.CommandLine, ".msh") or icontains(Process.CommandLine, ".reg") or icontains(Process.CommandLine, ".scr") or icontains(Process.CommandLine, ".ps") or icontains(Process.CommandLine, ".vb") or icontains(Process.CommandLine, ".jar") or icontains(Process.CommandLine, ".pl") or icontains(Process.CommandLine, ".inf") or icontains(Process.CommandLine, ".cpl") or icontains(Process.CommandLine, ".hta") or icontains(Process.CommandLine, ".msi") or icontains(Process.CommandLine, ".vbs"))


[ActivityMonitoringRule platform=Windows]
# Detects when a system process (i.e. located in system32, syswow64, etc.) loads a DLL from a suspicious location or a location with permissive permissions such as "C:\Users\Public"
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleId = 9e9a9002-56c4-40fd-9eff-e4b09bfa5f6c
RuleName = DLL Load By System Process From Suspicious Locations
EventType = Image.Load
Tag = dll-load-by-system-process-from-suspicious-locations
RiskScore = 50
Annotation = {"mitre_attack": ["T1070"]}
Query = istartswith(Process.Path, "C:\\Windows\\") and (istartswith(Image.Path, "C:\\Users\\Public\\") or istartswith(Image.Path, "C:\\PerfLogs\\"))
GenericProperty1 = Image.Path


[ActivityMonitoringRule platform=Windows]
# Detects usage of the "Import-Module" cmdlet to load the "Microsoft.ActiveDirectory.Management.dl" DLL. Which is often used by attackers to perform AD enumeration.
# Author: frack113
RuleId = 70bc5215-526f-4477-963c-a47a5c9ebd12
RuleName = Potential Active Directory Enumeration Using AD Module - ProcCreation
EventType = Process.Start
Tag = proc-start-potential-active-directory-enumeration-using-ad-module-proccreation
RiskScore = 50
Query = (iendswith(Process.Path, "\\powershell.exe") or iendswith(Process.Path, "\\pwsh.exe") or Process.Name in ["PowerShell.EXE", "pwsh.dll"]) and (icontains(Process.CommandLine, "Import-Module ") or icontains(Process.CommandLine, "ipmo ")) and icontains(Process.CommandLine, "Microsoft.ActiveDirectory.Management.dll")


[ActivityMonitoringRule platform=Windows]
# Detects creation of new ".dll" files inside the plugins directory of a notepad++ installation by a process other than "gup.exe". Which could indicates possible persistence
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleId = 54127bd4-f541-4ac3-afdb-ea073f63f692
RuleName = Potential Persistence Via Notepad++ Plugins
EventType = File.Create
Tag = potential-persistence-via-notepad++-plugins
RiskScore = 50
Query = icontains(File.Path, "\\Notepad++\\plugins\\") and iendswith(File.Path, ".dll") and not (iendswith(Process.Path, "\\Notepad++\\updater\\gup.exe") or istartswith(Process.Path, "C:\\Users\\") and icontains(Process.Path, "\\AppData\\Local\\Temp\\") and (iendswith(Process.Path, "\\target.exe") or iendswith(Process.Path, "Installer.x64.exe")))
GenericProperty1 = File.Path


[ActivityMonitoringRule platform=Windows]
# Download or Copy file with Extrac32
# Author: frack113
RuleId = aa8e035d-7be4-48d3-a944-102aec04400d
RuleName = Suspicious Extrac32 Execution
EventType = Process.Start
Tag = proc-start-suspicious-extrac32-execution
RiskScore = 50
Annotation = {"mitre_attack": ["T1105"]}
Query = (icontains(Process.CommandLine, "extrac32.exe") or iendswith(Process.Path, "\\extrac32.exe") or Process.Name == "extrac32.exe") and icontains(Process.CommandLine, ".cab") and (icontains(Process.CommandLine, "/C") or icontains(Process.CommandLine, "/Y") or icontains(Process.CommandLine, " \\\\"))


[ActivityMonitoringRule platform=Windows]
# Detects execution of ntdsutil.exe, which can be used for various attacks against the NTDS database (NTDS.DIT)
# Author: Thomas Patzke
RuleId = 2afafd61-6aae-4df4-baed-139fa1f4c345
RuleName = Invocation of Active Directory Diagnostic Tool (ntdsutil.exe)
EventType = Process.Start
Tag = proc-start-invocation-of-active-directory-diagnostic-tool-(ntdsutil.exe)
RiskScore = 50
Annotation = {"mitre_attack": ["T1003.003"]}
Query = iendswith(Process.Path, "\\ntdsutil.exe")


[ActivityMonitoringRule platform=Windows]
# Detects the creation of files with certain extensions on a static web site. This can be indicative of potential uploads of a web shell.
# Author: Beyu Denis, oscd.community, Tim Shelton, Thurein Oo
RuleId = 39f1f9f2-9636-45de-98f6-a4046aa8e4b9
RuleName = Potential Webshell Creation On Static Website
EventType = File.Create
Tag = potential-webshell-creation-on-static-website
RiskScore = 50
Annotation = {"mitre_attack": ["T1505.003"]}
Query = (icontains(File.Path, "\\inetpub\\wwwroot\\") and (icontains(File.Path, ".ashx") or icontains(File.Path, ".asp") or icontains(File.Path, ".ph") or icontains(File.Path, ".soap")) or (icontains(File.Path, "\\www\\") or icontains(File.Path, "\\htdocs\\") or icontains(File.Path, "\\html\\")) and icontains(File.Path, ".ph")) and not (icontains(File.Path, "\\AppData\\Local\\Temp\\") or icontains(File.Path, "\\Windows\\Temp\\") or Process.Path == "System" or icontains(File.Path, "\\xampp"))
GenericProperty1 = File.Path


[ActivityMonitoringRule platform=Windows]
# Detects the creation of a schtasks that potentially executes a payload stored in the Windows Registry using PowerShell.
# Author: X__Junior (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)
RuleId = 86588b36-c6d3-465f-9cee-8f9093e07798
RuleName = Scheduled Task Executing Payload from Registry
EventType = Process.Start
Tag = proc-start-scheduled-task-executing-payload-from-registry
RiskScore = 50
Annotation = {"mitre_attack": ["T1053.005", "T1059.001"]}
Query = (iendswith(Process.Path, "\\schtasks.exe") or Process.Name == "schtasks.exe") and icontains(Process.CommandLine, "/Create") and (icontains(Process.CommandLine, "Get-ItemProperty") or icontains(Process.CommandLine, " gp ")) and (icontains(Process.CommandLine, "HKCU:") or icontains(Process.CommandLine, "HKLM:") or icontains(Process.CommandLine, "registry::") or icontains(Process.CommandLine, "HKEY_")) and not (icontains(Process.CommandLine, "FromBase64String") or icontains(Process.CommandLine, "encodedcommand"))


[ActivityMonitoringRule platform=Windows]
# Detects a remote DLL load event via "rundll32.exe".
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleId = f40017b3-cb2e-4335-ab5d-3babf679c1de
RuleName = Remote DLL Load Via Rundll32.EXE
EventType = Image.Load
Tag = remote-dll-load-via-rundll32.exe
RiskScore = 50
Annotation = {"mitre_attack": ["T1204.002"]}
Query = iendswith(Process.Path, "\\rundll32.exe") and istartswith(Image.Path, "\\\\")
GenericProperty1 = Image.Path


[ActivityMonitoringRule platform=Windows]
# Detects new process creation using WMIC via the "process call create" flag
# Author: Michael Haag, Florian Roth (Nextron Systems), juju4, oscd.community
RuleId = 526be59f-a573-4eea-b5f7-f0973207634d
RuleName = New Process Created Via Wmic.EXE
EventType = Process.Start
Tag = proc-start-new-process-created-via-wmic.exe
RiskScore = 50
Annotation = {"mitre_attack": ["T1047"]}
Query = (iendswith(Process.Path, "\\wmic.exe") or Process.Name == "wmic.exe") and icontains(Process.CommandLine, "process") and icontains(Process.CommandLine, "call") and icontains(Process.CommandLine, "create")


[ActivityMonitoringRule platform=Windows]
# One way Qbot steals sensitive information is by extracting browser data from Internet Explorer and Microsoft Edge by using the built-in utility esentutl.exe
# Author: frack113
RuleId = 6a69f62d-ce75-4b57-8dce-6351eb55b362
RuleName = Esentutl Steals Browser Information
EventType = Process.Start
Tag = proc-start-esentutl-steals-browser-information
RiskScore = 50
Annotation = {"mitre_attack": ["T1005"]}
Query = (iendswith(Process.Path, "\\esentutl.exe") or Process.Name == "esentutl.exe") and (icontains(Process.CommandLine, "/r") or icontains(Process.CommandLine, "-r")) and icontains(Process.CommandLine, "\\Windows\\WebCache")


[ActivityMonitoringRule platform=Windows]
# Detects use of executionpolicy option to set insecure policies
# Author: frack113
RuleId = 87e3c4e8-a6a8-4ad9-bb4f-46e7ff99a180
RuleName = Change PowerShell Policies to an Insecure Level
EventType = Process.Start
Tag = proc-start-change-powershell-policies-to-an-insecure-level
RiskScore = 50
Annotation = {"mitre_attack": ["T1059.001"]}
Query = (icontains(Process.CommandLine, " -executionpolicy ") or icontains(Process.CommandLine, " -ep ") or icontains(Process.CommandLine, " -exec ")) and (icontains(Process.CommandLine, "Unrestricted") or icontains(Process.CommandLine, "bypass") or icontains(Process.CommandLine, "RemoteSigned")) and not (icontains(Process.CommandLine, "C:\\Program Files") or icontains(Process.CommandLine, "C:\\ProgramData") or icontains(Process.CommandLine, "\\AppData\\Roaming\\Code\\"))


[ActivityMonitoringRule platform=Windows]
# Detects calls to "LoadAssemblyFromPath" or "LoadAssemblyFromNS" that are part of the "CL_LoadAssembly.ps1" script. This can be abused to load different assemblies and bypass App locker controls.
# Author: frack113, Nasreddine Bencherchali (Nextron Systems)
RuleId = c57872c7-614f-4d7f-a40d-b78c8df2d30d
RuleName = Assembly Loading Via CL_LoadAssembly.ps1
EventType = Process.Start
Tag = proc-start-assembly-loading-via-cl_loadassembly.ps1
RiskScore = 50
Annotation = {"mitre_attack": ["T1216"]}
Query = icontains(Process.CommandLine, "LoadAssemblyFromPath ") or icontains(Process.CommandLine, "LoadAssemblyFromNS ")


[ActivityMonitoringRule platform=Windows]
# Detects command line containing reference to the "::$index_allocation" stream, which can be used as a technique to prevent access to folders or files from tooling such as "explorer.exe" or "powershell.exe"
# Author: Nasreddine Bencherchali (Nextron Systems), Scoubi (@ScoubiMtl)
RuleId = 0900463c-b33b-49a8-be1d-552a3b553dae
RuleName = Potential Hidden Directory Creation Via NTFS INDEX_ALLOCATION Stream - CLI
EventType = Process.Start
Tag = proc-start-potential-hidden-directory-creation-via-ntfs-index_allocation-stream-cli
RiskScore = 50
Annotation = {"mitre_attack": ["T1564.004"]}
Query = icontains(Process.CommandLine, "::$index_allocation")


[ActivityMonitoringRule platform=Windows]
# Detects loading of "credui.dll" and related DLLs by an uncommon process. Attackers might leverage this DLL for potential use of "CredUIPromptForCredentials" or "CredUnPackAuthenticationBufferW".
# Author: Roberto Rodriguez (Cyb3rWard0g), OTR (Open Threat Research)
RuleId = 9ae01559-cf7e-4f8e-8e14-4c290a1b4784
RuleName = CredUI.DLL Loaded By Uncommon Process
EventType = Image.Load
Tag = credui.dll-loaded-by-uncommon-process
RiskScore = 50
Annotation = {"mitre_attack": ["T1056.002"]}
Query = (iendswith(Image.Path, "\\credui.dll") or iendswith(Image.Path, "\\wincredui.dll") or Process.Name in ["credui.dll", "wincredui.dll"]) and not (istartswith(Process.Path, "C:\\Program Files (x86)\\") or istartswith(Process.Path, "C:\\Program Files\\") or istartswith(Process.Path, "C:\\Windows\\System32\\") or istartswith(Process.Path, "C:\\Windows\\SysWOW64\\") or Process.Path in ["C:\\Windows\\explorer.exe", "C:\\Windows\\ImmersiveControlPanel\\SystemSettings.exe", "C:\\Windows\\regedit.exe"]) and not (iendswith(Process.Path, "\\opera_autoupdate.exe") or iendswith(Process.Path, "\\procexp64.exe") or iendswith(Process.Path, "\\procexp.exe") or istartswith(Process.Path, "C:\\Users\\") and icontains(Process.Path, "\\AppData\\Local\\Microsoft\\Teams\\") and iendswith(Process.Path, "\\Teams.exe") or istartswith(Process.Path, "C:\\Users\\") and icontains(Process.Path, "\\AppData\\Local\\Microsoft\\OneDrive\\"))
GenericProperty1 = Image.Path


[ActivityMonitoringRule platform=Windows]
# Adversaries may abuse msiexec.exe to proxy execution of malicious payloads.
# Msiexec.exe is the command-line utility for the Windows Installer and is thus commonly associated with executing installation packages (.msi)
# Author: frack113
RuleId = 6f4191bb-912b-48a8-9ce7-682769541e6d
RuleName = Suspicious Msiexec Execute Arbitrary DLL
EventType = Process.Start
Tag = proc-start-suspicious-msiexec-execute-arbitrary-dll
RiskScore = 50
Annotation = {"mitre_attack": ["T1218.007"]}
Query = iendswith(Process.Path, "\\msiexec.exe") and (icontains(Process.CommandLine, " /y") or icontains(Process.CommandLine, " -y")) and not (icontains(Process.CommandLine, "\\MsiExec.exe\" /Y \"C:\\Program Files\\Bonjour\\mdnsNSP.dll") or icontains(Process.CommandLine, "\\MsiExec.exe\" /Y \"C:\\Program Files (x86)\\Bonjour\\mdnsNSP.dll") or icontains(Process.CommandLine, "\\MsiExec.exe\" /Y \"C:\\Program Files (x86)\\Apple Software Update\\ScriptingObjectModel.dll") or icontains(Process.CommandLine, "\\MsiExec.exe\" /Y \"C:\\Program Files (x86)\\Apple Software Update\\SoftwareUpdateAdmin.dll") or icontains(Process.CommandLine, "\\MsiExec.exe\" /Y \"C:\\Windows\\CCM\\") or icontains(Process.CommandLine, "\\MsiExec.exe\" /Y C:\\Windows\\CCM\\") or icontains(Process.CommandLine, "\\MsiExec.exe\" -Y \"C:\\Program Files\\Bonjour\\mdnsNSP.dll") or icontains(Process.CommandLine, "\\MsiExec.exe\" -Y \"C:\\Program Files (x86)\\Bonjour\\mdnsNSP.dll") or icontains(Process.CommandLine, "\\MsiExec.exe\" -Y \"C:\\Program Files (x86)\\Apple Software Update\\ScriptingObjectModel.dll") or icontains(Process.CommandLine, "\\MsiExec.exe\" -Y \"C:\\Program Files (x86)\\Apple Software Update\\SoftwareUpdateAdmin.dll") or icontains(Process.CommandLine, "\\MsiExec.exe\" -Y \"C:\\Windows\\CCM\\") or icontains(Process.CommandLine, "\\MsiExec.exe\" -Y C:\\Windows\\CCM\\"))


[ActivityMonitoringRule platform=Windows]
# Detects execution of "curl.exe" with the "insecure" flag over proxy or DOH.
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleId = 2c1486f5-02e8-4f86-9099-b97f2da4ed77
RuleName = Insecure Proxy/DOH Transfer Via Curl.EXE
EventType = Process.Start
Tag = proc-start-insecure-proxy/doh-transfer-via-curl.exe
RiskScore = 50
Query = (iendswith(Process.Path, "\\curl.exe") or Process.Name == "curl.exe") and (icontains(Process.CommandLine, "--doh-insecure") or icontains(Process.CommandLine, "--proxy-insecure"))


[ActivityMonitoringRule platform=Windows]
# Detect the use of "<" to read and potentially execute a file via cmd.exe
# Author: frack113, Nasreddine Bencherchali (Nextron Systems)
RuleId = 241e802a-b65e-484f-88cd-c2dc10f9206d
RuleName = Read Contents From Stdin Via Cmd.EXE
EventType = Process.Start
Tag = proc-start-read-contents-from-stdin-via-cmd.exe
RiskScore = 50
Annotation = {"mitre_attack": ["T1059.003"]}
Query = (Process.Name == "Cmd.Exe" or iendswith(Process.Path, "\\cmd.exe")) and icontains(Process.CommandLine, "<")


[ActivityMonitoringRule platform=Windows]
# Adversaries may acquire credentials from web browsers by reading files specific to the target browser.
# Web browsers commonly save credentials such as website usernames and passwords so that they do not need to be entered manually in the future.
# Web browsers typically store the credentials in an encrypted format within a credential store.
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleId = 47147b5b-9e17-4d76-b8d2-7bac24c5ce1b
RuleName = Potential Browser Data Stealing
EventType = Process.Start
Tag = proc-start-potential-browser-data-stealing
RiskScore = 50
Annotation = {"mitre_attack": ["T1555.003"]}
Query = (icontains(Process.CommandLine, "copy-item") or icontains(Process.CommandLine, "copy ") or icontains(Process.CommandLine, "cpi ") or icontains(Process.CommandLine, " cp ") or icontains(Process.CommandLine, "move ") or icontains(Process.CommandLine, "move-item") or icontains(Process.CommandLine, " mi ") or icontains(Process.CommandLine, " mv ") or iendswith(Process.Path, "\\xcopy.exe") or iendswith(Process.Path, "\\robocopy.exe") or Process.Name in ["XCOPY.EXE", "robocopy.exe"]) and (icontains(Process.CommandLine, "\\Amigo\\User Data") or icontains(Process.CommandLine, "\\BraveSoftware\\Brave-Browser\\User Data") or icontains(Process.CommandLine, "\\CentBrowser\\User Data") or icontains(Process.CommandLine, "\\Chromium\\User Data") or icontains(Process.CommandLine, "\\CocCoc\\Browser\\User Data") or icontains(Process.CommandLine, "\\Comodo\\Dragon\\User Data") or icontains(Process.CommandLine, "\\Elements Browser\\User Data") or icontains(Process.CommandLine, "\\Epic Privacy Browser\\User Data") or icontains(Process.CommandLine, "\\Google\\Chrome Beta\\User Data") or icontains(Process.CommandLine, "\\Google\\Chrome SxS\\User Data") or icontains(Process.CommandLine, "\\Google\\Chrome\\User Data\\") or icontains(Process.CommandLine, "\\Kometa\\User Data") or icontains(Process.CommandLine, "\\Maxthon5\\Users") or icontains(Process.CommandLine, "\\Microsoft\\Edge\\User Data") or icontains(Process.CommandLine, "\\Mozilla\\Firefox\\Profiles") or icontains(Process.CommandLine, "\\Nichrome\\User Data") or icontains(Process.CommandLine, "\\Opera Software\\Opera GX Stable\\") or icontains(Process.CommandLine, "\\Opera Software\\Opera Neon\\User Data") or icontains(Process.CommandLine, "\\Opera Software\\Opera Stable\\") or icontains(Process.CommandLine, "\\Orbitum\\User Data") or icontains(Process.CommandLine, "\\QIP Surf\\User Data") or icontains(Process.CommandLine, "\\Sputnik\\User Data") or icontains(Process.CommandLine, "\\Torch\\User Data") or icontains(Process.CommandLine, "\\uCozMedia\\Uran\\User Data") or icontains(Process.CommandLine, "\\Vivaldi\\User Data"))


[ActivityMonitoringRule platform=Windows]
# Detect use of the Windows 8.3 short name. Which could be used as a method to avoid command-line detection
# Author: frack113, Nasreddine Bencherchali (Nextron Systems)
RuleId = dd6b39d9-d9be-4a3b-8fe0-fe3c6a5c1795
RuleName = Use NTFS Short Name in Command Line
EventType = Process.Start
Tag = proc-start-use-ntfs-short-name-in-command-line
RiskScore = 50
Annotation = {"mitre_attack": ["T1564.004"]}
Query = (icontains(Process.CommandLine, "~1.exe") or icontains(Process.CommandLine, "~1.bat") or icontains(Process.CommandLine, "~1.msi") or icontains(Process.CommandLine, "~1.vbe") or icontains(Process.CommandLine, "~1.vbs") or icontains(Process.CommandLine, "~1.dll") or icontains(Process.CommandLine, "~1.ps1") or icontains(Process.CommandLine, "~1.js") or icontains(Process.CommandLine, "~1.hta") or icontains(Process.CommandLine, "~2.exe") or icontains(Process.CommandLine, "~2.bat") or icontains(Process.CommandLine, "~2.msi") or icontains(Process.CommandLine, "~2.vbe") or icontains(Process.CommandLine, "~2.vbs") or icontains(Process.CommandLine, "~2.dll") or icontains(Process.CommandLine, "~2.ps1") or icontains(Process.CommandLine, "~2.js") or icontains(Process.CommandLine, "~2.hta")) and not (iendswith(Parent.Path, "\\WebEx\\WebexHost.exe") or iendswith(Parent.Path, "\\thor\\thor64.exe") or icontains(Process.CommandLine, "C:\\xampp\\vcredist\\VCREDI~1.EXE"))
GenericProperty1 = Parent.Path


[ActivityMonitoringRule platform=Windows]
# Detect VBoxDrvInst.exe run with parameters allowing processing INF file.
# This allows to create values in the registry and install drivers.
# For example one could use this technique to obtain persistence via modifying one of Run or RunOnce registry keys
# Author: Konstantin Grishchenko, oscd.community
RuleId = b7b19cb6-9b32-4fc4-a108-73f19acfe262
RuleName = Suspicious VBoxDrvInst.exe Parameters
EventType = Process.Start
Tag = proc-start-suspicious-vboxdrvinst.exe-parameters
RiskScore = 50
Annotation = {"mitre_attack": ["T1112"]}
Query = iendswith(Process.Path, "\\VBoxDrvInst.exe") and icontains(Process.CommandLine, "driver") and icontains(Process.CommandLine, "executeinf")


[ActivityMonitoringRule platform=Windows]
# Detects the execution of netsh with the "trace" flag in order to start a network capture
# Author: Kutepov Anton, oscd.community
RuleId = d3c3861d-c504-4c77-ba55-224ba82d0118
RuleName = New Network Trace Capture Started Via Netsh.EXE
EventType = Process.Start
Tag = proc-start-new-network-trace-capture-started-via-netsh.exe
RiskScore = 50
Annotation = {"mitre_attack": ["T1040"]}
Query = (iendswith(Process.Path, "\\netsh.exe") or Process.Name == "netsh.exe") and icontains(Process.CommandLine, "trace") and icontains(Process.CommandLine, "start")


[ActivityMonitoringRule platform=Windows]
# Detects usage of the "type" command to download/upload data from WebDAV server
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleId = aa0b3a82-eacc-4ec3-9150-b5a9a3e3f82f
RuleName = Potential Download/Upload Activity Using Type Command
EventType = Process.Start
Tag = proc-start-potential-download/upload-activity-using-type-command
RiskScore = 50
Annotation = {"mitre_attack": ["T1105"]}
Query = icontains(Process.CommandLine, "type ") and icontains(Process.CommandLine, " > \\\\") or icontains(Process.CommandLine, "type \\\\") and icontains(Process.CommandLine, " > ")


[ActivityMonitoringRule platform=Windows]
# Detects file renames where the target filename uses an uncommon double extension. Could indicate potential ransomware activity renaming files and adding a custom extension to the encrypted files, such as ".jpg.crypted", ".docx.locky", etc.
# Author: frack113
RuleId = e3f673b3-65d1-4d80-9146-466f8b63fa99
RuleName = Suspicious Appended Extension
EventType = File.Rename
Tag = suspicious-appended-extension
RiskScore = 50
Annotation = {"mitre_attack": ["T1486"]}
Query = (iendswith(File.PreviousPath, ".doc") or iendswith(File.PreviousPath, ".docx") or iendswith(File.PreviousPath, ".jpeg") or iendswith(File.PreviousPath, ".jpg") or iendswith(File.PreviousPath, ".lnk") or iendswith(File.PreviousPath, ".pdf") or iendswith(File.PreviousPath, ".png") or iendswith(File.PreviousPath, ".pst") or iendswith(File.PreviousPath, ".rtf") or iendswith(File.PreviousPath, ".xls") or iendswith(File.PreviousPath, ".xlsx")) and (icontains(File.Path, ".doc.") or icontains(File.Path, ".docx.") or icontains(File.Path, ".jpeg.") or icontains(File.Path, ".jpg.") or icontains(File.Path, ".lnk.") or icontains(File.Path, ".pdf.") or icontains(File.Path, ".png.") or icontains(File.Path, ".pst.") or icontains(File.Path, ".rtf.") or icontains(File.Path, ".xls.") or icontains(File.Path, ".xlsx.")) and not (iendswith(File.Path, ".backup") or iendswith(File.Path, ".bak") or iendswith(File.Path, ".old") or iendswith(File.Path, ".orig") or iendswith(File.Path, ".temp") or iendswith(File.Path, ".tmp")) and not (icontains(File.Path, ":\\ProgramData\\Anaconda3\\") and iendswith(File.Path, ".c~"))
GenericProperty1 = File.Path
GenericProperty2 = File.PreviousPath


[ActivityMonitoringRule platform=Windows]
# Detects a JAVA process running with remote debugging allowing more than just localhost to connect
# Author: Florian Roth (Nextron Systems)
RuleId = 8f88e3f6-2a49-48f5-a5c4-2f7eedf78710
RuleName = Java Running with Remote Debugging
EventType = Process.Start
Tag = proc-start-java-running-with-remote-debugging
RiskScore = 50
Annotation = {"mitre_attack": ["T1203"]}
Query = icontains(Process.CommandLine, "transport=dt_socket,address=") and (icontains(Process.CommandLine, "jre1.") or icontains(Process.CommandLine, "jdk1.")) and not (icontains(Process.CommandLine, "address=127.0.0.1") or icontains(Process.CommandLine, "address=localhost"))


[ActivityMonitoringRule platform=Windows]
# Detects suspicious IIS native-code module installations via command line
# Author: Florian Roth (Nextron Systems)
RuleId = 9465ddf4-f9e4-4ebd-8d98-702df3a93239
RuleName = IIS Native-Code Module Command Line Installation
EventType = Process.Start
Tag = proc-start-iis-native-code-module-command-line-installation
RiskScore = 50
Annotation = {"mitre_attack": ["T1505.003"]}
Query = (iendswith(Process.Path, "\\appcmd.exe") or Process.Name == "appcmd.exe") and icontains(Process.CommandLine, "install") and icontains(Process.CommandLine, "module") and (icontains(Process.CommandLine, "/name:") or icontains(Process.CommandLine, "-name:")) and not Parent.Path == "C:\\Windows\\System32\\inetsrv\\iissetup.exe"
GenericProperty1 = Parent.Path


[ActivityMonitoringRule platform=Windows]
# Detects a code page switch in command line or batch scripts to a rare language
# Author: Florian Roth (Nextron Systems), Jonhnathan Ribeiro, oscd.community
RuleId = c7942406-33dd-4377-a564-0f62db0593a3
RuleName = Suspicious CodePage Switch Via CHCP
EventType = Process.Start
Tag = proc-start-suspicious-codepage-switch-via-chcp
RiskScore = 50
Annotation = {"mitre_attack": ["T1036"]}
Query = iendswith(Process.Path, "\\chcp.com") and (iendswith(Process.CommandLine, " 936") or iendswith(Process.CommandLine, " 1258"))


[ActivityMonitoringRule platform=Windows]
# Detects the execution of whoami.exe with the /group command line flag to show group membership for the current user, account type, security identifiers (SID), and attributes.
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleId = bd8b828d-0dca-48e1-8a63-8a58ecf2644f
RuleName = Group Membership Reconnaissance Via Whoami.EXE
EventType = Process.Start
Tag = proc-start-group-membership-reconnaissance-via-whoami.exe
RiskScore = 50
Annotation = {"mitre_attack": ["T1033"]}
Query = (iendswith(Process.Path, "\\whoami.exe") or Process.Name == "whoami.exe") and (icontains(Process.CommandLine, " /groups") or icontains(Process.CommandLine, " -groups"))


[ActivityMonitoringRule platform=Windows]
# Detects execution of the SharpLDAPmonitor. Which can monitor the creation, deletion and changes to LDAP objects.
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleId = 9f8fc146-1d1a-4dbf-b8fd-dfae15e08541
RuleName = HackTool - SharpLDAPmonitor Execution
EventType = Process.Start
Tag = proc-start-hacktool-sharpldapmonitor-execution
RiskScore = 50
Query = iendswith(Process.Path, "\\SharpLDAPmonitor.exe") or Process.Name == "SharpLDAPmonitor.exe" or icontains(Process.CommandLine, "/user:") and icontains(Process.CommandLine, "/pass:") and icontains(Process.CommandLine, "/dcip:")


[ActivityMonitoringRule platform=Windows]
# Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by application shims.
# The Microsoft Windows Application Compatibility Infrastructure/Framework (Application Shim) was created to allow for backward compatibility of software as the operating system codebase changes over time.
# Author: frack113, Nasreddine Bencherchali (Nextron Systems)
RuleId = ee63c85c-6d51-4d12-ad09-04e25877a947
RuleName = New Shim Database Created in the Default Directory
EventType = File.Create
Tag = new-shim-database-created-in-the-default-directory
RiskScore = 50
Annotation = {"mitre_attack": ["T1547.009"]}
Query = icontains(File.Path, ":\\Windows\\apppatch\\Custom\\") or icontains(File.Path, ":\\Windows\\apppatch\\CustomSDB\\")
GenericProperty1 = File.Path


[ActivityMonitoringRule platform=Windows]
# Detects execution of "VSDiagnostics.exe" with the "start" command in order to launch and proxy arbitrary binaries.
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleId = ac1c92b4-ac81-405a-9978-4604d78cc47e
RuleName = Potential Binary Proxy Execution Via VSDiagnostics.EXE
EventType = Process.Start
Tag = proc-start-potential-binary-proxy-execution-via-vsdiagnostics.exe
RiskScore = 50
Annotation = {"mitre_attack": ["T1218"]}
Query = (iendswith(Process.Path, "\\VSDiagnostics.exe") or Process.Name == "VSDiagnostics.exe") and icontains(Process.CommandLine, "start") and (icontains(Process.CommandLine, " /launch:") or icontains(Process.CommandLine, " -launch:"))


[ActivityMonitoringRule platform=Windows]
# Detects the creation or modification of a powershell profile which could indicate suspicious activity as the profile can be used as a mean of persistence
# Author: HieuTT35, Nasreddine Bencherchali (Nextron Systems)
RuleId = b5b78988-486d-4a80-b991-930eff3ff8bf
RuleName = PowerShell Profile Modification
EventType = File.Create
Tag = powershell-profile-modification
RiskScore = 50
Annotation = {"mitre_attack": ["T1546.013"]}
Query = iendswith(File.Path, "\\Microsoft.PowerShell_profile.ps1") or iendswith(File.Path, "\\PowerShell\\profile.ps1") or iendswith(File.Path, "\\Program Files\\PowerShell\\7-preview\\profile.ps1") or iendswith(File.Path, "\\Program Files\\PowerShell\\7\\profile.ps1") or iendswith(File.Path, "\\Windows\\System32\\WindowsPowerShell\\v1.0\\profile.ps1") or iendswith(File.Path, "\\WindowsPowerShell\\profile.ps1")
GenericProperty1 = File.Path


[ActivityMonitoringRule platform=Windows]
# Detects requests to exclude files, folders or processes from Antivirus scanning using PowerShell cmdlets
# Author: Florian Roth (Nextron Systems)
RuleId = 17769c90-230e-488b-a463-e05c08e9d48f
RuleName = Powershell Defender Exclusion
EventType = Process.Start
Tag = proc-start-powershell-defender-exclusion
RiskScore = 50
Annotation = {"mitre_attack": ["T1562.001"]}
Query = (icontains(Process.CommandLine, "Add-MpPreference ") or icontains(Process.CommandLine, "Set-MpPreference ")) and (icontains(Process.CommandLine, " -ExclusionPath ") or icontains(Process.CommandLine, " -ExclusionExtension ") or icontains(Process.CommandLine, " -ExclusionProcess ") or icontains(Process.CommandLine, " -ExclusionIpAddress "))


[ActivityMonitoringRule platform=Windows]
# Detects when a user performs data exfiltration by using DataSvcUtil.exe
# Author: Ialle Teixeira @teixeira0xfffff, Austin Songer @austinsonger
RuleId = e290b10b-1023-4452-a4a9-eb31a9013b3a
RuleName = LOLBAS Data Exfiltration by DataSvcUtil.exe
EventType = Process.Start
Tag = proc-start-lolbas-data-exfiltration-by-datasvcutil.exe
RiskScore = 50
Annotation = {"mitre_attack": ["T1567"]}
Query = (icontains(Process.CommandLine, "/in:") or icontains(Process.CommandLine, "/out:") or icontains(Process.CommandLine, "/uri:")) and (iendswith(Process.Path, "\\DataSvcUtil.exe") or Process.Name == "DataSvcUtil.exe")


[ActivityMonitoringRule platform=Windows]
# Detects child processes of the "Trace log generation tool for Media Foundation Tools" (Mftrace.exe) which can abused to execute arbitrary binaries.
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleId = 3d48c9d3-1aa6-418d-98d3-8fd3c01a564e
RuleName = Potential Mftrace.EXE Abuse
EventType = Process.Start
Tag = proc-start-potential-mftrace.exe-abuse
RiskScore = 50
Annotation = {"mitre_attack": ["T1127"]}
Query = iendswith(Parent.Path, "\\mftrace.exe")
GenericProperty1 = Parent.Path


[ActivityMonitoringRule platform=Windows]
# Detect use of X509Enrollment
# Author: frack113
RuleId = 114de787-4eb2-48cc-abdb-c0b449f93ea4
RuleName = Suspicious X509Enrollment - Process Creation
EventType = Process.Start
Tag = proc-start-suspicious-x509enrollment-process-creation
RiskScore = 50
Annotation = {"mitre_attack": ["T1553.004"]}
Query = icontains(Process.CommandLine, "X509Enrollment.CBinaryConverter") or icontains(Process.CommandLine, "884e2002-217d-11da-b2a4-000e7bbb2b09")


[ActivityMonitoringRule platform=Windows]
# An adversary may use legitimate desktop support and remote access software, such as Team Viewer, Go2Assist, LogMein, AmmyyAdmin, etc, to establish an interactive command and control channel to target systems within networks.
# These services are commonly used as legitimate technical support software, and may be allowed by application control within a target environment.
# Remote access tools like VNC, Ammyy, and Teamviewer are used frequently when compared with other legitimate software commonly used by adversaries. (Citation: Symantec Living off the Land)
# Author: frack113, Connor Martin
RuleId = 4d07b1f4-cb00-4470-b9f8-b0191d48ff52
RuleName = DNS Query To Remote Access Software Domain From Non-Browser App
EventType = Dns.Query
Tag = dns-query-to-remote-access-software-domain-from-non-browser-app
RiskScore = 50
Annotation = {"mitre_attack": ["T1219"]}
Query = (iendswith(Dns.QueryRequest, "agent.jumpcloud.com") or iendswith(Dns.QueryRequest, "agentreporting.atera.com") or iendswith(Dns.QueryRequest, "ammyy.com") or iendswith(Dns.QueryRequest, "api.parsec.app") or iendswith(Dns.QueryRequest, "api.playanext.com") or iendswith(Dns.QueryRequest, "api.splashtop.com") or iendswith(Dns.QueryRequest, "app.atera.com") or iendswith(Dns.QueryRequest, "assist.zoho.com") or iendswith(Dns.QueryRequest, "authentication.logmeininc.com") or iendswith(Dns.QueryRequest, "beyondtrustcloud.com") or iendswith(Dns.QueryRequest, "cdn.kaseya.net") or iendswith(Dns.QueryRequest, "client.teamviewer.com") or iendswith(Dns.QueryRequest, "comserver.corporate.beanywhere.com") or iendswith(Dns.QueryRequest, "control.connectwise.com") or iendswith(Dns.QueryRequest, "downloads.zohocdn.com") or iendswith(Dns.QueryRequest, "dwservice.net") or iendswith(Dns.QueryRequest, "express.gotoassist.com") or iendswith(Dns.QueryRequest, "getgo.com") or iendswith(Dns.QueryRequest, "integratedchat.teamviewer.com") or iendswith(Dns.QueryRequest, "join.zoho.com") or iendswith(Dns.QueryRequest, "kickstart.jumpcloud.com") or iendswith(Dns.QueryRequest, "license.bomgar.com") or iendswith(Dns.QueryRequest, "logmein-gateway.com") or iendswith(Dns.QueryRequest, "logmein.com") or iendswith(Dns.QueryRequest, "logmeincdn.http.internapcdn.net") or iendswith(Dns.QueryRequest, "n-able.com") or iendswith(Dns.QueryRequest, "net.anydesk.com") or iendswith(Dns.QueryRequest, "netsupportsoftware.com") or iendswith(Dns.QueryRequest, "parsecusercontent.com") or iendswith(Dns.QueryRequest, "pubsub.atera.com") or iendswith(Dns.QueryRequest, "relay.kaseya.net") or iendswith(Dns.QueryRequest, "relay.screenconnect.com") or iendswith(Dns.QueryRequest, "relay.splashtop.com") or iendswith(Dns.QueryRequest, "remotedesktop-pa.googleapis.com") or iendswith(Dns.QueryRequest, "remoteutilities.com") or iendswith(Dns.QueryRequest, "secure.logmeinrescue.com") or iendswith(Dns.QueryRequest, "services.vnc.com") or iendswith(Dns.QueryRequest, "static.remotepc.com") or iendswith(Dns.QueryRequest, "swi-rc.com") or iendswith(Dns.QueryRequest, "swi-tc.com") or iendswith(Dns.QueryRequest, "telemetry.servers.qetqo.com") or iendswith(Dns.QueryRequest, "tmate.io") or iendswith(Dns.QueryRequest, "zohoassist.com") or iendswith(Dns.QueryRequest, ".rustdesk.com") and istartswith(Dns.QueryRequest, "rs-")) and not (Process.Path in ["C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe", "C:\\Program Files (x86)\\Google\\Chrome\\Application\\chrome.exe"] or Process.Path in ["C:\\Program Files\\Mozilla Firefox\\firefox.exe", "C:\\Program Files (x86)\\Mozilla Firefox\\firefox.exe"] or Process.Path in ["C:\\Program Files (x86)\\Internet Explorer\\iexplore.exe", "C:\\Program Files\\Internet Explorer\\iexplore.exe"] or istartswith(Process.Path, "C:\\Program Files (x86)\\Microsoft\\EdgeWebView\\Application\\") or iendswith(Process.Path, "\\WindowsApps\\MicrosoftEdge.exe") or Process.Path in ["C:\\Program Files (x86)\\Microsoft\\Edge\\Application\\msedge.exe", "C:\\Program Files\\Microsoft\\Edge\\Application\\msedge.exe"] or (istartswith(Process.Path, "C:\\Program Files (x86)\\Microsoft\\EdgeCore\\") or istartswith(Process.Path, "C:\\Program Files\\Microsoft\\EdgeCore\\")) and (iendswith(Process.Path, "\\msedge.exe") or iendswith(Process.Path, "\\msedgewebview2.exe")) or iendswith(Process.Path, "\\safari.exe") or iendswith(Process.Path, "\\MsMpEng.exe") or iendswith(Process.Path, "\\MsSense.exe") or iendswith(Process.Path, "\\brave.exe") and istartswith(Process.Path, "C:\\Program Files\\BraveSoftware\\") or icontains(Process.Path, "\\AppData\\Local\\Maxthon\\") and iendswith(Process.Path, "\\maxthon.exe") or icontains(Process.Path, "\\AppData\\Local\\Programs\\Opera\\") and iendswith(Process.Path, "\\opera.exe") or (istartswith(Process.Path, "C:\\Program Files\\SeaMonkey\\") or istartswith(Process.Path, "C:\\Program Files (x86)\\SeaMonkey\\")) and iendswith(Process.Path, "\\seamonkey.exe") or icontains(Process.Path, "\\AppData\\Local\\Vivaldi\\") and iendswith(Process.Path, "\\vivaldi.exe") or (istartswith(Process.Path, "C:\\Program Files\\Naver\\Naver Whale\\") or istartswith(Process.Path, "C:\\Program Files (x86)\\Naver\\Naver Whale\\")) and iendswith(Process.Path, "\\whale.exe") or icontains(Process.Path, "\\Tor Browser\\") or (istartswith(Process.Path, "C:\\Program Files\\Waterfox\\") or istartswith(Process.Path, "C:\\Program Files (x86)\\Waterfox\\")) and iendswith(Process.Path, "\\Waterfox.exe") or icontains(Process.Path, "\\AppData\\Local\\Programs\\midori-ng\\") and iendswith(Process.Path, "\\Midori Next Generation.exe") or (istartswith(Process.Path, "C:\\Program Files\\SlimBrowser\\") or istartswith(Process.Path, "C:\\Program Files (x86)\\SlimBrowser\\")) and iendswith(Process.Path, "\\slimbrowser.exe") or icontains(Process.Path, "\\AppData\\Local\\Flock\\") and iendswith(Process.Path, "\\Flock.exe") or icontains(Process.Path, "\\AppData\\Local\\Phoebe\\") and iendswith(Process.Path, "\\Phoebe.exe") or (istartswith(Process.Path, "C:\\Program Files\\Falkon\\") or istartswith(Process.Path, "C:\\Program Files (x86)\\Falkon\\")) and iendswith(Process.Path, "\\falkon.exe") or (istartswith(Process.Path, "C:\\Program Files (x86)\\Avant Browser\\") or istartswith(Process.Path, "C:\\Program Files\\Avant Browser\\")) and iendswith(Process.Path, "\\avant.exe"))
GenericProperty1 = Dns.QueryRequest


[ActivityMonitoringRule platform=Windows]
# Detects usage of attrib.exe to hide files from users.
# Author: Sami Ruohonen
RuleId = 4281cb20-2994-4580-aa63-c8b86d019934
RuleName = Hiding Files with Attrib.exe
EventType = Process.Start
Tag = proc-start-hiding-files-with-attrib.exe
RiskScore = 50
Annotation = {"mitre_attack": ["T1564.001"]}
Query = (iendswith(Process.Path, "\\attrib.exe") or Process.Name == "ATTRIB.EXE") and icontains(Process.CommandLine, " +h ") and not (icontains(Process.CommandLine, "\\desktop.ini ") or iendswith(Parent.Path, "\\cmd.exe") and Process.CommandLine == "+R +H +S +A \\\*.cui" and Parent.CommandLine == "C:\\WINDOWS\\system32\\\*.bat")
GenericProperty1 = Parent.Path
GenericProperty2 = Parent.CommandLine


[ActivityMonitoringRule platform=Windows]
# Once established within a system or network, an adversary may use automated techniques for collecting internal data.
# Author: frack113
RuleId = aa2efee7-34dd-446e-8a37-40790a66efd7
RuleName = Recon Information for Export with Command Prompt
EventType = Process.Start
Tag = proc-start-recon-information-for-export-with-command-prompt
RiskScore = 50
Annotation = {"mitre_attack": ["T1119"]}
Query = (iendswith(Process.Path, "\\tree.com") or iendswith(Process.Path, "\\WMIC.exe") or iendswith(Process.Path, "\\doskey.exe") or iendswith(Process.Path, "\\sc.exe") or Process.Name in ["wmic.exe", "DOSKEY.EXE", "sc.exe"]) and (icontains(Parent.CommandLine, " > %TEMP%\\") or icontains(Parent.CommandLine, " > %TMP%\\"))
GenericProperty1 = Parent.CommandLine


[ActivityMonitoringRule platform=Windows]
# Detects suspicious execution of rundll32, with specific calls to some DLLs with known LOLBIN functionalities
# Author: juju4, Jonhnathan Ribeiro, oscd.community, Nasreddine Bencherchali (Nextron Systems)
RuleId = e593cf51-88db-4ee1-b920-37e89012a3c9
RuleName = Potentially Suspicious Rundll32 Activity
EventType = Process.Start
Tag = proc-start-potentially-suspicious-rundll32-activity
RiskScore = 50
Annotation = {"mitre_attack": ["T1218.011"]}
Query = (icontains(Process.CommandLine, "javascript:") and icontains(Process.CommandLine, ".RegisterXLL") or icontains(Process.CommandLine, "url.dll") and icontains(Process.CommandLine, "OpenURL") or icontains(Process.CommandLine, "url.dll") and icontains(Process.CommandLine, "OpenURLA") or icontains(Process.CommandLine, "url.dll") and icontains(Process.CommandLine, "FileProtocolHandler") or icontains(Process.CommandLine, "zipfldr.dll") and icontains(Process.CommandLine, "RouteTheCall") or icontains(Process.CommandLine, "shell32.dll") and icontains(Process.CommandLine, "Control_RunDLL") or icontains(Process.CommandLine, "shell32.dll") and icontains(Process.CommandLine, "ShellExec_RunDLL") or icontains(Process.CommandLine, "mshtml.dll") and icontains(Process.CommandLine, "PrintHTML") or icontains(Process.CommandLine, "advpack.dll") and icontains(Process.CommandLine, "LaunchINFSection") or icontains(Process.CommandLine, "advpack.dll") and icontains(Process.CommandLine, "RegisterOCX") or icontains(Process.CommandLine, "ieadvpack.dll") and icontains(Process.CommandLine, "LaunchINFSection") or icontains(Process.CommandLine, "ieadvpack.dll") and icontains(Process.CommandLine, "RegisterOCX") or icontains(Process.CommandLine, "ieframe.dll") and icontains(Process.CommandLine, "OpenURL") or icontains(Process.CommandLine, "shdocvw.dll") and icontains(Process.CommandLine, "OpenURL") or icontains(Process.CommandLine, "syssetup.dll") and icontains(Process.CommandLine, "SetupInfObjectInstallAction") or icontains(Process.CommandLine, "setupapi.dll") and icontains(Process.CommandLine, "InstallHinfSection") or icontains(Process.CommandLine, "pcwutl.dll") and icontains(Process.CommandLine, "LaunchApplication") or icontains(Process.CommandLine, "dfshim.dll") and icontains(Process.CommandLine, "ShOpenVerbApplication") or icontains(Process.CommandLine, "dfshim.dll") and icontains(Process.CommandLine, "ShOpenVerbShortcut") or icontains(Process.CommandLine, "scrobj.dll") and icontains(Process.CommandLine, "GenerateTypeLib") and icontains(Process.CommandLine, "http") or icontains(Process.CommandLine, "shimgvw.dll") and icontains(Process.CommandLine, "ImageView_Fullscreen") and icontains(Process.CommandLine, "http") or icontains(Process.CommandLine, "comsvcs.dll") and icontains(Process.CommandLine, "MiniDump")) and not (icontains(Process.CommandLine, "shell32.dll,Control_RunDLL desk.cpl,screensaver,@screensaver") or Parent.Path == "C:\\Windows\\System32\\control.exe" and icontains(Parent.CommandLine, ".cpl") and icontains(Process.CommandLine, "Shell32.dll") and icontains(Process.CommandLine, "Control_RunDLL") and icontains(Process.CommandLine, ".cpl") or Parent.Path == "C:\\Windows\\System32\\control.exe" and istartswith(Process.CommandLine, "\"C:\\Windows\\system32\\rundll32.exe\" Shell32.dll,Control_RunDLL \"C:\\Windows\\System32\\") and iendswith(Process.CommandLine, ".cpl\","))
GenericProperty1 = Parent.Path
GenericProperty2 = Parent.CommandLine


[ActivityMonitoringRule platform=Windows]
# Detects the creation of files with an "LNK" as a second extension. This is sometimes used by malware as a method to abuse the fact that Windows hides the "LNK" extension by default.
# Author: Nasreddine Bencherchali (Nextron Systems), frack113
RuleId = 3215aa19-f060-4332-86d5-5602511f3ca8
RuleName = Suspicious LNK Double Extension File Created
EventType = File.Create
Tag = suspicious-lnk-double-extension-file-created
RiskScore = 50
Annotation = {"mitre_attack": ["T1036.007"]}
Query = iendswith(File.Path, ".lnk") and (icontains(File.Path, ".doc.") or icontains(File.Path, ".docx.") or icontains(File.Path, ".jpg.") or icontains(File.Path, ".pdf.") or icontains(File.Path, ".ppt.") or icontains(File.Path, ".pptx.") or icontains(File.Path, ".xls.") or icontains(File.Path, ".xlsx.")) and not icontains(File.Path, "\\AppData\\Roaming\\Microsoft\\Windows\\Recent\\") and not ((iendswith(Process.Path, "\\excel.exe") or iendswith(Process.Path, "\\powerpnt.exe") or iendswith(Process.Path, "\\winword.exe")) and icontains(File.Path, "\\AppData\\Roaming\\Microsoft\\Office\\Recent\\") or iendswith(Process.Path, "\\excel.exe") and icontains(File.Path, "\\AppData\\Roaming\\Microsoft\\Excel") or iendswith(Process.Path, "\\powerpnt.exe") and icontains(File.Path, "\\AppData\\Roaming\\Microsoft\\PowerPoint") or iendswith(Process.Path, "\\winword.exe") and icontains(File.Path, "\\AppData\\Roaming\\Microsoft\\Word"))
GenericProperty1 = File.Path


[ActivityMonitoringRule platform=Windows]
# Detects use of an encoded/obfuscated version of an IP address (hex, octal...) in an URL combined with a download command
# Author: Florian Roth (Nextron Systems), X__Junior (Nextron Systems)
RuleId = cb5a2333-56cf-4562-8fcb-22ba1bca728d
RuleName = Obfuscated IP Download Activity
EventType = Process.Start
Tag = proc-start-obfuscated-ip-download-activity
RiskScore = 50
Query = (icontains(Process.CommandLine, "Invoke-WebRequest") or icontains(Process.CommandLine, "iwr ") or icontains(Process.CommandLine, "wget ") or icontains(Process.CommandLine, "curl ") or icontains(Process.CommandLine, "DownloadFile") or icontains(Process.CommandLine, "DownloadString")) and (icontains(Process.CommandLine, " 0x") or icontains(Process.CommandLine, "//0x") or icontains(Process.CommandLine, ".0x") or icontains(Process.CommandLine, ".00x") or icontains(Process.CommandLine, "http://%") and icontains(Process.CommandLine, "%2e") or regex_match(Process.CommandLine, r"https?://[0-9]{1,3}\\.[0-9]{1,3}\\.0[0-9]{3,4}") or regex_match(Process.CommandLine, r"https?://[0-9]{1,3}\\.0[0-9]{3,7}") or regex_match(Process.CommandLine, r"https?://0[0-9]{3,11}") or regex_match(Process.CommandLine, r"https?://(0[0-9]{1,11}\\.){3}0[0-9]{1,11}") or regex_match(Process.CommandLine, r"https?://0[0-9]{1,11}") or regex_match(Process.CommandLine, r" [0-7]{7,13}")) and not regex_match(Process.CommandLine, r"https?://((25[0-5]|(2[0-4]|1\\d|[1-9])?\\d)(\\.|\\b)){4}")


[ActivityMonitoringRule platform=Windows]
# Detects potentially suspicious child process of applications launched from inside the WindowsApps directory. This could be a sign of a rogue ".appx" package installation/execution
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleId = f91ed517-a6ba-471d-9910-b3b4a398c0f3
RuleName = Potentially Suspicious Windows App Activity
EventType = Process.Start
Tag = proc-start-potentially-suspicious-windows-app-activity
RiskScore = 50
Query = icontains(Parent.Path, "C:\\Program Files\\WindowsApps\\") and (iendswith(Process.Path, "\\cmd.exe") or iendswith(Process.Path, "\\cscript.exe") or iendswith(Process.Path, "\\mshta.exe") or iendswith(Process.Path, "\\powershell.exe") or iendswith(Process.Path, "\\pwsh.exe") or iendswith(Process.Path, "\\regsvr32.exe") or iendswith(Process.Path, "\\rundll32.exe") or iendswith(Process.Path, "\\wscript.exe") or icontains(Process.CommandLine, "cmd /c") or icontains(Process.CommandLine, "Invoke-") or icontains(Process.CommandLine, "Base64")) and not (icontains(Parent.Path, ":\\Program Files\\WindowsApps\\Microsoft.WindowsTerminal") and iendswith(Parent.Path, "\\WindowsTerminal.exe") and (iendswith(Process.Path, "\\powershell.exe") or iendswith(Process.Path, "\\cmd.exe") or iendswith(Process.Path, "\\pwsh.exe")))
GenericProperty1 = Parent.Path


[ActivityMonitoringRule platform=Windows]
# Detects inline execution of PowerShell code from a file
# Author: frack113
RuleId = ee218c12-627a-4d27-9e30-d6fb2fe22ed2
RuleName = Powershell Inline Execution From A File
EventType = Process.Start
Tag = proc-start-powershell-inline-execution-from-a-file
RiskScore = 50
Annotation = {"mitre_attack": ["T1059.001"]}
Query = (icontains(Process.CommandLine, "iex ") or icontains(Process.CommandLine, "Invoke-Expression ") or icontains(Process.CommandLine, "Invoke-Command ") or icontains(Process.CommandLine, "icm ")) and (icontains(Process.CommandLine, "cat ") or icontains(Process.CommandLine, "get-content ") or icontains(Process.CommandLine, "type ")) and icontains(Process.CommandLine, " -raw")


[ActivityMonitoringRule platform=Windows]
# Detects creation of files with the ".one"/".onepkg" extension in suspicious or uncommon locations. This could be a sign of attackers abusing OneNote attachments
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleId = 7fd164ba-126a-4d9c-9392-0d4f7c243df0
RuleName = OneNote Attachment File Dropped In Suspicious Location
EventType = File.Create
Tag = onenote-attachment-file-dropped-in-suspicious-location
RiskScore = 50
Query = (icontains(File.Path, "\\AppData\\Local\\Temp\\") or icontains(File.Path, "\\Users\\Public\\") or icontains(File.Path, "\\Windows\\Temp\\") or icontains(File.Path, ":\\Temp\\")) and (iendswith(File.Path, ".one") or iendswith(File.Path, ".onepkg")) and not (icontains(Process.Path, ":\\Program Files\\Microsoft Office\\") and iendswith(Process.Path, "\\ONENOTE.EXE"))
GenericProperty1 = File.Path


[ActivityMonitoringRule platform=Windows]
# Detects usage of Dsacls to grant over permissive permissions
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleId = 01c42d3c-242d-4655-85b2-34f1739632f7
RuleName = Potentially Over Permissive Permissions Granted Using Dsacls.EXE
EventType = Process.Start
Tag = proc-start-potentially-over-permissive-permissions-granted-using-dsacls.exe
RiskScore = 50
Annotation = {"mitre_attack": ["T1218"]}
Query = (iendswith(Process.Path, "\\dsacls.exe") or Process.Name == "DSACLS.EXE") and icontains(Process.CommandLine, " /G ") and (icontains(Process.CommandLine, "GR") or icontains(Process.CommandLine, "GE") or icontains(Process.CommandLine, "GW") or icontains(Process.CommandLine, "GA") or icontains(Process.CommandLine, "WP") or icontains(Process.CommandLine, "WD"))


[ActivityMonitoringRule platform=Windows]
# Detects PowerShell downgrade attack by comparing the host versions with the actually used engine version 2.0
# Author: Harish Segar (rule)
RuleId = b3512211-c67e-4707-bedc-66efc7848863
RuleName = Potential PowerShell Downgrade Attack
EventType = Process.Start
Tag = proc-start-potential-powershell-downgrade-attack
RiskScore = 50
Annotation = {"mitre_attack": ["T1059.001"]}
Query = iendswith(Process.Path, "\\powershell.exe") and (icontains(Process.CommandLine, " -version 2 ") or icontains(Process.CommandLine, " -versio 2 ") or icontains(Process.CommandLine, " -versi 2 ") or icontains(Process.CommandLine, " -vers 2 ") or icontains(Process.CommandLine, " -ver 2 ") or icontains(Process.CommandLine, " -ve 2 ") or icontains(Process.CommandLine, " -v 2 "))


[ActivityMonitoringRule platform=Windows]
# Detects execution of PktMon, a tool that captures network packets.
# Author: frack113
RuleId = f956c7c1-0f60-4bc5-b7d7-b39ab3c08908
RuleName = PktMon.EXE Execution
EventType = Process.Start
Tag = proc-start-pktmon.exe-execution
RiskScore = 50
Annotation = {"mitre_attack": ["T1040"]}
Query = iendswith(Process.Path, "\\pktmon.exe") or Process.Name == "PktMon.exe"


[ActivityMonitoringRule platform=Windows]
# Compress target file into a cab file stored in the Alternate Data Stream (ADS) of the target file.
# Author: frack113
RuleId = 6b369ced-4b1d-48f1-b427-fdc0de0790bd
RuleName = Suspicious Diantz Alternate Data Stream Execution
EventType = Process.Start
Tag = proc-start-suspicious-diantz-alternate-data-stream-execution
RiskScore = 50
Annotation = {"mitre_attack": ["T1564.004"]}
Query = icontains(Process.CommandLine, "diantz.exe") and icontains(Process.CommandLine, ".cab") and regex_match(Process.CommandLine, r":[^\\\\]")


[ActivityMonitoringRule platform=Windows]
# Detect use of Ilasm.exe to compile c# code into dll or exe.
# Author: frack113
RuleId = 850d55f9-6eeb-4492-ad69-a72338f65ba4
RuleName = Ilasm Lolbin Use Compile C-Sharp
EventType = Process.Start
Tag = proc-start-ilasm-lolbin-use-compile-c-sharp
RiskScore = 50
Annotation = {"mitre_attack": ["T1127"]}
Query = iendswith(Process.Path, "\\ilasm.exe") or Process.Name == "ilasm.exe"


[ActivityMonitoringRule platform=Windows]
# Detects direct modification of autostart extensibility point (ASEP) in registry using reg.exe.
# Author: Victor Sergeev, Daniil Yugoslavskiy, oscd.community
RuleId = 24357373-078f-44ed-9ac4-6d334a668a11
RuleName = Direct Autorun Keys Modification
EventType = Process.Start
Tag = proc-start-direct-autorun-keys-modification
RiskScore = 50
Annotation = {"mitre_attack": ["T1547.001"]}
Query = iendswith(Process.Path, "\\reg.exe") and icontains(Process.CommandLine, "add") and (icontains(Process.CommandLine, "\\software\\Microsoft\\Windows\\CurrentVersion\\Run") or icontains(Process.CommandLine, "\\software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Userinit") or icontains(Process.CommandLine, "\\software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Shell") or icontains(Process.CommandLine, "\\software\\Microsoft\\Windows NT\\CurrentVersion\\Windows") or icontains(Process.CommandLine, "\\software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders") or icontains(Process.CommandLine, "\\system\\CurrentControlSet\\Control\\SafeBoot\\AlternateShell"))


[ActivityMonitoringRule platform=Windows]
# List credentials currently stored in Windows Credential Manager via the native Windows utility vaultcmd.exe
# Author: frack113
RuleId = 58f50261-c53b-4c88-bd12-1d71f12eda4c
RuleName = Windows Credential Manager Access via VaultCmd
EventType = Process.Start
Tag = proc-start-windows-credential-manager-access-via-vaultcmd
RiskScore = 50
Annotation = {"mitre_attack": ["T1555.004"]}
Query = (iendswith(Process.Path, "\\VaultCmd.exe") or Process.Name == "VAULTCMD.EXE") and icontains(Process.CommandLine, "/listcreds:")


[ActivityMonitoringRule platform=Windows]
# Use of the commandline to shutdown or reboot windows
# Author: frack113
RuleId = 34ebb878-1b15-4895-b352-ca2eeb99b274
RuleName = Suspicious Execution of Shutdown
EventType = Process.Start
Tag = proc-start-suspicious-execution-of-shutdown
RiskScore = 50
Annotation = {"mitre_attack": ["T1529"]}
Query = iendswith(Process.Path, "\\shutdown.exe") and (icontains(Process.CommandLine, "/r ") or icontains(Process.CommandLine, "/s "))


[ActivityMonitoringRule platform=Windows]
# Detects the execution of the MSXSL utility. This can be used to execute Extensible Stylesheet Language (XSL) files. These files are commonly used to describe the processing and rendering of data within XML files.
# Adversaries can abuse this functionality to execute arbitrary files while potentially bypassing application whitelisting defenses.
# Author: Timur Zinniatullin, oscd.community
RuleId = 9e50a8b3-dd05-4eb8-9153-bdb6b79d50b0
RuleName = Msxsl.EXE Execution
EventType = Process.Start
Tag = proc-start-msxsl.exe-execution
RiskScore = 50
Annotation = {"mitre_attack": ["T1220"]}
Query = iendswith(Process.Path, "\\msxsl.exe")


[ActivityMonitoringRule platform=Windows]
# Detects when an attacker register a new IFilter for an extension. Microsoft Windows Search uses filters to extract the content of items for inclusion in a full-text index. You can extend Windows Search to index new or proprietary file types by writing filters to extract the content, and property handlers to extract the properties of files
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleId = b23818c7-e575-4d13-8012-332075ec0a2b
RuleName = Register New IFiltre For Persistence
EventType = Reg.Any
Tag = register-new-ifiltre-for-persistence
RiskScore = 50
Query = ((istartswith(Reg.Key.Target, "HKLM\\SOFTWARE\\Classes\\.") or istartswith(Reg.Key.Target, "HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\.")) and icontains(Reg.Key.Target, "\\PersistentHandler") or (istartswith(Reg.Key.Target, "HKLM\\SOFTWARE\\Classes\\CLSID") or istartswith(Reg.Key.Target, "HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\CLSID")) and icontains(Reg.Key.Target, "\\PersistentAddinsRegistered\\{89BCB740-6119-101A-BCB7-00DD010655AF}")) and not (icontains(Reg.Key.Target, "\\CLSID\\{4F46F75F-199F-4C63-8B7D-86D48FE7970C}\\") or icontains(Reg.Key.Target, "\\CLSID\\{4887767F-7ADC-4983-B576-88FB643D6F79}\\") or icontains(Reg.Key.Target, "\\CLSID\\{D3B41FA1-01E3-49AF-AA25-1D0D824275AE}\\") or icontains(Reg.Key.Target, "\\CLSID\\{72773E1A-B711-4d8d-81FA-B9A43B0650DD}\\") or icontains(Reg.Key.Target, "\\CLSID\\{098f2470-bae0-11cd-b579-08002b30bfeb}\\") or icontains(Reg.Key.Target, "\\CLSID\\{1AA9BF05-9A97-48c1-BA28-D9DCE795E93C}\\") or icontains(Reg.Key.Target, "\\CLSID\\{2e2294a9-50d7-4fe7-a09f-e6492e185884}\\") or icontains(Reg.Key.Target, "\\CLSID\\{34CEAC8D-CBC0-4f77-B7B1-8A60CB6DA0F7}\\") or icontains(Reg.Key.Target, "\\CLSID\\{3B224B11-9363-407e-850F-C9E1FFACD8FB}\\") or icontains(Reg.Key.Target, "\\CLSID\\{3DDEB7A4-8ABF-4D82-B9EE-E1F4552E95BE}\\") or icontains(Reg.Key.Target, "\\CLSID\\{5645C8C1-E277-11CF-8FDA-00AA00A14F93}\\") or icontains(Reg.Key.Target, "\\CLSID\\{5645C8C4-E277-11CF-8FDA-00AA00A14F93}\\") or icontains(Reg.Key.Target, "\\CLSID\\{58A9EBF6-5755-4554-A67E-A2467AD1447B}\\") or icontains(Reg.Key.Target, "\\CLSID\\{5e941d80-bf96-11cd-b579-08002b30bfeb}\\") or icontains(Reg.Key.Target, "\\CLSID\\{698A4FFC-63A3-4E70-8F00-376AD29363FB}\\") or icontains(Reg.Key.Target, "\\CLSID\\{7E9D8D44-6926-426F-AA2B-217A819A5CCE}\\") or icontains(Reg.Key.Target, "\\CLSID\\{8CD34779-9F10-4f9b-ADFB-B3FAEABDAB5A}\\") or icontains(Reg.Key.Target, "\\CLSID\\{9694E38A-E081-46ac-99A0-8743C909ACB6}\\") or icontains(Reg.Key.Target, "\\CLSID\\{98de59a0-d175-11cd-a7bd-00006b827d94}\\") or icontains(Reg.Key.Target, "\\CLSID\\{AA10385A-F5AA-4EFF-B3DF-71B701E25E18}\\") or icontains(Reg.Key.Target, "\\CLSID\\{B4132098-7A03-423D-9463-163CB07C151F}\\") or icontains(Reg.Key.Target, "\\CLSID\\{d044309b-5da6-4633-b085-4ed02522e5a5}\\") or icontains(Reg.Key.Target, "\\CLSID\\{D169C14A-5148-4322-92C8-754FC9D018D8}\\") or icontains(Reg.Key.Target, "\\CLSID\\{DD75716E-B42E-4978-BB60-1497B92E30C4}\\") or icontains(Reg.Key.Target, "\\CLSID\\{E2F83EED-62DE-4A9F-9CD0-A1D40DCD13B6}\\") or icontains(Reg.Key.Target, "\\CLSID\\{E772CEB3-E203-4828-ADF1-765713D981B8}\\") or icontains(Reg.Key.Target, "\\CLSID\\{eec97550-47a9-11cf-b952-00aa0051fe20}") or icontains(Reg.Key.Target, "\\CLSID\\{FB10BD80-A331-4e9e-9EB7-00279903AD99}\\") or istartswith(Process.Path, "C:\\Windows\\System32\\") or istartswith(Process.Path, "C:\\Program Files (x86)\\") or istartswith(Process.Path, "C:\\Program Files\\"))
Hive = HKLM,HKU
GenericProperty1 = Reg.Key.Target


[ActivityMonitoringRule platform=Windows]
# Detects Access to Domain Group Policies stored in SYSVOL
# Author: Markus Neis, Jonhnathan Ribeiro, oscd.community
RuleId = 05f3c945-dcc8-4393-9f3d-af65077a8f86
RuleName = Suspicious SYSVOL Domain Group Policy Access
EventType = Process.Start
Tag = proc-start-suspicious-sysvol-domain-group-policy-access
RiskScore = 50
Annotation = {"mitre_attack": ["T1552.006"]}
Query = icontains(Process.CommandLine, "\\SYSVOL\\") and icontains(Process.CommandLine, "\\policies\\")


[ActivityMonitoringRule platform=Windows]
# Detects execution of Microsoft bash launcher without any flags to execute the content of a bash script directly. This can be used to potentially bypass defenses and execute Linux or Windows-based binaries directly via bash
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleId = 2d22a514-e024-4428-9dba-41505bd63a5b
RuleName = Indirect Command Execution From Script File Via Bash.EXE
EventType = Process.Start
Tag = proc-start-indirect-command-execution-from-script-file-via-bash.exe
RiskScore = 50
Annotation = {"mitre_attack": ["T1202"]}
Query = (iendswith(Process.Path, ":\\Windows\\System32\\bash.exe") or iendswith(Process.Path, ":\\Windows\\SysWOW64\\bash.exe") or Process.Name == "Bash.exe") and not (icontains(Process.CommandLine, "bash.exe -") or icontains(Process.CommandLine, "bash -") or isnull(Process.CommandLine) or Process.CommandLine == "" or Process.CommandLine in ["bash.exe", "bash"])


[ActivityMonitoringRule platform=Windows]
# Looks for changes to registry to disable any write-protect property for storage devices. This could be a precursor to a ransomware attack and has been an observed technique used by cypherpunk group.
# Author: Sreeman
RuleId = 75f7a0e2-7154-4c4d-9eae-5cdb4e0a5c13
RuleName = Write Protect For Storage Disabled
EventType = Process.Start
Tag = proc-start-write-protect-for-storage-disabled
RiskScore = 50
Annotation = {"mitre_attack": ["T1562"]}
Query = icontains(Process.CommandLine, "reg add") and icontains(Process.CommandLine, "\\system\\currentcontrolset\\control") and icontains(Process.CommandLine, "write protection") and icontains(Process.CommandLine, "0") and (icontains(Process.CommandLine, "storage") or icontains(Process.CommandLine, "storagedevicepolicies"))


[ActivityMonitoringRule platform=Windows]
# Detects execution of Chromium based browser in headless mode
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleId = ef9dcfed-690c-4c5d-a9d1-482cd422225c
RuleName = Browser Execution In Headless Mode
EventType = Process.Start
Tag = proc-start-browser-execution-in-headless-mode
RiskScore = 50
Annotation = {"mitre_attack": ["T1105"]}
Query = (iendswith(Process.Path, "\\brave.exe") or iendswith(Process.Path, "\\chrome.exe") or iendswith(Process.Path, "\\msedge.exe") or iendswith(Process.Path, "\\opera.exe") or iendswith(Process.Path, "\\vivaldi.exe")) and icontains(Process.CommandLine, "--headless")


[ActivityMonitoringRule platform=Windows]
# Detects office suit applications communicating to target systems on uncommon ports
# Author: X__Junior (Nextron Systems)
RuleId = 3b5ba899-9842-4bc2-acc2-12308498bf42
RuleName = Suspicious Office Outbound Connections
EventType = Net.Any
Tag = suspicious-office-outbound-connections
RiskScore = 50
Query = (iendswith(Process.Path, "\\excel.exe") or iendswith(Process.Path, "\\outlook.exe") or iendswith(Process.Path, "\\powerpnt.exe") or iendswith(Process.Path, "\\winword.exe") or iendswith(Process.Path, "\\wordpad.exe") or iendswith(Process.Path, "\\wordview.exe")) and not (Net.Target.Port in [139, 443, 445, 80])
GenericProperty1 = Net.Target.Port


[ActivityMonitoringRule platform=Windows]
# An adversary may compress or encrypt data that is collected prior to exfiltration using 3rd party utilities
# Author: frack113
RuleId = e2e80da2-8c66-4e00-ae3c-2eebd29f6b6d
RuleName = Compress Data and Lock With Password for Exfiltration With WINZIP
EventType = Process.Start
Tag = proc-start-compress-data-and-lock-with-password-for-exfiltration-with-winzip
RiskScore = 50
Annotation = {"mitre_attack": ["T1560.001"]}
Query = (icontains(Process.CommandLine, "winzip.exe") or icontains(Process.CommandLine, "winzip64.exe")) and icontains(Process.CommandLine, "-s\"") and (icontains(Process.CommandLine, " -min ") or icontains(Process.CommandLine, " -a "))


[ActivityMonitoringRule platform=Windows]
# Detects the use of Advanced IP Scanner. Seems to be a popular tool for ransomware groups.
# Author: @ROxPinTeddy
RuleId = fed85bf9-e075-4280-9159-fbe8a023d6fa
RuleName = Advanced IP Scanner - File Event
EventType = File.Create
Tag = advanced-ip-scanner-file-event
RiskScore = 50
Annotation = {"mitre_attack": ["T1046"]}
Query = icontains(File.Path, "\\AppData\\Local\\Temp\\Advanced IP Scanner 2")
GenericProperty1 = File.Path


[ActivityMonitoringRule platform=Windows]
# An adversary may use legitimate desktop support and remote access software, such as Team Viewer, Go2Assist, LogMein, AmmyyAdmin, etc, to establish an interactive command and control channel to target systems within networks.
# These services are commonly used as legitimate technical support software, and may be allowed by application control within a target environment.
# Remote access tools like VNC, Ammyy, and Teamviewer are used frequently when compared with other legitimate software commonly used by adversaries. (Citation: Symantec Living off the Land)
# Author: frack113
RuleId = 5d756aee-ad3e-4306-ad95-cb1abec48de2
RuleName = GoToAssist Temporary Installation Artefact
EventType = File.Create
Tag = gotoassist-temporary-installation-artefact
RiskScore = 50
Annotation = {"mitre_attack": ["T1219"]}
Query = icontains(File.Path, "\\AppData\\Local\\Temp\\LogMeInInc\\GoToAssist Remote Support Expert\\")
GenericProperty1 = File.Path


[ActivityMonitoringRule platform=Windows]
# Detects an uncommon child process of "odbcconf.exe" binary which normally shouldn't have any child processes.
# Author: Harjot Singh @cyb3rjy0t
RuleId = 8e3c7994-131e-4ba5-b6ea-804d49113a26
RuleName = Uncommon Child Process Spawned By Odbcconf.EXE
EventType = Process.Start
Tag = proc-start-uncommon-child-process-spawned-by-odbcconf.exe
RiskScore = 50
Annotation = {"mitre_attack": ["T1218.008"]}
Query = iendswith(Parent.Path, "\\odbcconf.exe")
GenericProperty1 = Parent.Path


[ActivityMonitoringRule platform=Windows]
# Detects suspicious scheduled task creations from a parent stored in a temporary folder
# Author: Florian Roth (Nextron Systems)
RuleId = 9494479d-d994-40bf-a8b1-eea890237021
RuleName = Suspicious Add Scheduled Task Parent
EventType = Process.Start
Tag = proc-start-suspicious-add-scheduled-task-parent
RiskScore = 50
Annotation = {"mitre_attack": ["T1053.005"]}
Query = iendswith(Process.Path, "\\schtasks.exe") and icontains(Process.CommandLine, "/Create ") and (icontains(Parent.Path, "\\AppData\\Local\\") or icontains(Parent.Path, "\\AppData\\Roaming\\") or icontains(Parent.Path, "\\Temporary Internet") or icontains(Parent.Path, "\\Users\\Public\\")) and not (icontains(Process.CommandLine, "update_task.xml") or icontains(Process.CommandLine, "unattended.ini"))
GenericProperty1 = Parent.Path


[ActivityMonitoringRule platform=Windows]
# There is an option for a MS VS Just-In-Time Debugger "vsjitdebugger.exe" to launch specified executable and attach a debugger.
# This option may be used adversaries to execute malicious code by signed verified binary.
# The debugger is installed alongside with Microsoft Visual Studio package.
# Author: Agro (@agro_sev), Ensar Şamil (@sblmsrsn), oscd.community
RuleId = 15c7904e-6ad1-4a45-9b46-5fb25df37fd2
RuleName = Malicious PE Execution by Microsoft Visual Studio Debugger
EventType = Process.Start
Tag = proc-start-malicious-pe-execution-by-microsoft-visual-studio-debugger
RiskScore = 50
Annotation = {"mitre_attack": ["T1218"]}
Query = iendswith(Parent.Path, "\\vsjitdebugger.exe") and not (Process.Path like "*\\vsimmersiveactivatehelper*.exe" or iendswith(Process.Path, "\\devenv.exe"))
GenericProperty1 = Parent.Path


[ActivityMonitoringRule platform=Windows]
# Detects suspicious children spawned via the Windows Terminal application which could be a sign of persistence via WindowsTerminal (see references section)
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleId = 8de89e52-f6e1-4b5b-afd1-41ecfa300d48
RuleName = Suspicious WindowsTerminal Child Processes
EventType = Process.Start
Tag = proc-start-suspicious-windowsterminal-child-processes
RiskScore = 50
Query = (iendswith(Parent.Path, "\\WindowsTerminal.exe") or iendswith(Parent.Path, "\\wt.exe")) and (iendswith(Process.Path, "\\rundll32.exe") or iendswith(Process.Path, "\\regsvr32.exe") or iendswith(Process.Path, "\\certutil.exe") or iendswith(Process.Path, "\\cscript.exe") or iendswith(Process.Path, "\\wscript.exe") or iendswith(Process.Path, "\\csc.exe") or icontains(Process.Path, "C:\\Users\\Public\\") or icontains(Process.Path, "\\Downloads\\") or icontains(Process.Path, "\\Desktop\\") or icontains(Process.Path, "\\AppData\\Local\\Temp\\") or icontains(Process.Path, "\\Windows\\TEMP\\") or icontains(Process.CommandLine, " iex ") or icontains(Process.CommandLine, " icm") or icontains(Process.CommandLine, "Invoke-") or icontains(Process.CommandLine, "Import-Module ") or icontains(Process.CommandLine, "ipmo ") or icontains(Process.CommandLine, "DownloadString(") or icontains(Process.CommandLine, " /c ") or icontains(Process.CommandLine, " /k ") or icontains(Process.CommandLine, " /r ")) and not (icontains(Process.CommandLine, "Import-Module") and icontains(Process.CommandLine, "Microsoft.VisualStudio.DevShell.dll") and icontains(Process.CommandLine, "Enter-VsDevShell") or icontains(Process.CommandLine, "\\AppData\\Local\\Packages\\Microsoft.WindowsTerminal_") and icontains(Process.CommandLine, "\\LocalState\\settings.json") or icontains(Process.CommandLine, "C:\\Program Files\\Microsoft Visual Studio\\") and icontains(Process.CommandLine, "\\Common7\\Tools\\VsDevCmd.bat"))
GenericProperty1 = Parent.Path


[ActivityMonitoringRule platform=Windows]
# Detects potential DLL sideloading of "wwlib.dll"
# Author: X__Junior (Nextron Systems)
RuleId = e2e01011-5910-4267-9c3b-4149ed5479cf
RuleName = Potential WWlib.DLL Sideloading
EventType = Image.Load
Tag = potential-wwlib.dll-sideloading
RiskScore = 50
Annotation = {"mitre_attack": ["T1574.001", "T1574.002"]}
Query = iendswith(Image.Path, "\\wwlib.dll") and not ((istartswith(Process.Path, "C:\\Program Files (x86)\\Microsoft Office\\") or istartswith(Process.Path, "C:\\Program Files\\Microsoft Office\\")) and iendswith(Process.Path, "\\winword.exe") and (istartswith(Image.Path, "C:\\Program Files (x86)\\Microsoft Office\\") or istartswith(Image.Path, "C:\\Program Files\\Microsoft Office\\")))
GenericProperty1 = Image.Path


[ActivityMonitoringRule platform=Windows]
# Detect usage of the "unregmp2.exe" binary as a proxy to launch a custom version of "wmpnscfg.exe"
# Author: frack113
RuleId = 727454c0-d851-48b0-8b89-385611ab0704
RuleName = Lolbin Unregmp2.exe Use As Proxy
EventType = Process.Start
Tag = proc-start-lolbin-unregmp2.exe-use-as-proxy
RiskScore = 50
Annotation = {"mitre_attack": ["T1218"]}
Query = (iendswith(Process.Path, "\\unregmp2.exe") or Process.Name == "unregmp2.exe") and icontains(Process.CommandLine, " /HideWMP")


[ActivityMonitoringRule platform=Windows]
# Detects execution of msdt.exe using the "cab" flag which could indicates suspicious diagcab files with embedded answer files leveraging CVE-2022-30190
# Author: Nasreddine Bencherchali (Nextron Systems), GossiTheDog, frack113
RuleId = dc4576d4-7467-424f-9eee-fd2b02855fe0
RuleName = Suspicious Cabinet File Execution Via Msdt.EXE
EventType = Process.Start
Tag = proc-start-suspicious-cabinet-file-execution-via-msdt.exe
RiskScore = 50
Annotation = {"mitre_attack": ["T1202"]}
Query = (iendswith(Process.Path, "\\msdt.exe") or Process.Name == "msdt.exe") and (icontains(Process.CommandLine, " /cab ") or icontains(Process.CommandLine, " -cab "))


[ActivityMonitoringRule platform=Windows]
# Adversaries may attempt to enumerate software for a variety of reasons, such as figuring out what security measures are present or if the compromised system has a version of software that is vulnerable.
# Author: Nikita Nazarov, oscd.community
RuleId = e13f668e-7f95-443d-98d2-1816a7648a7b
RuleName = Detected Windows Software Discovery
EventType = Process.Start
Tag = proc-start-detected-windows-software-discovery
RiskScore = 50
Annotation = {"mitre_attack": ["T1518"]}
Query = iendswith(Process.Path, "\\reg.exe") and icontains(Process.CommandLine, "query") and icontains(Process.CommandLine, "\\software\\") and icontains(Process.CommandLine, "/v") and icontains(Process.CommandLine, "svcversion")


[ActivityMonitoringRule platform=Windows]
# Detects execution of netsh with the "advfirewall" and the "set" option in order to set new values for properties of a existing rule
# Author: X__Junior (Nextron Systems)
RuleId = a70dcb37-3bee-453a-99df-d0c683151be6
RuleName = Firewall Rule Update Via Netsh.EXE
EventType = Process.Start
Tag = proc-start-firewall-rule-update-via-netsh.exe
RiskScore = 50
Query = (iendswith(Process.Path, "\\netsh.exe") or Process.Name == "netsh.exe") and icontains(Process.CommandLine, " firewall ") and icontains(Process.CommandLine, " set ")


[ActivityMonitoringRule platform=Windows]
# Detects the expansion or decompression of cabinet files from potentially suspicious or uncommon locations, e.g. seen in Iranian MeteorExpress related attacks
# Author: Bhabesh Raj, X__Junior (Nextron Systems)
RuleId = 9f107a84-532c-41af-b005-8d12a607639f
RuleName = Potentially Suspicious Cabinet File Expansion
EventType = Process.Start
Tag = proc-start-potentially-suspicious-cabinet-file-expansion
RiskScore = 50
Annotation = {"mitre_attack": ["T1218"]}
Query = iendswith(Process.Path, "\\expand.exe") and (icontains(Process.CommandLine, "/F:") or icontains(Process.CommandLine, "-F:")) and (icontains(Process.CommandLine, ":\\Perflogs\\") or icontains(Process.CommandLine, ":\\Users\\Public\\") or icontains(Process.CommandLine, "\\Temporary Internet") or icontains(Process.CommandLine, ":\\ProgramData") or icontains(Process.CommandLine, "\\AppData\\Local\\Temp") or icontains(Process.CommandLine, "\\AppData\\Roaming\\Temp") or icontains(Process.CommandLine, ":\\Windows\\Temp") or icontains(Process.CommandLine, ":\\Users\\") and icontains(Process.CommandLine, "\\Favorites\\") or icontains(Process.CommandLine, ":\\Users\\") and icontains(Process.CommandLine, "\\Favourites\\") or icontains(Process.CommandLine, ":\\Users\\") and icontains(Process.CommandLine, "\\Contacts\\")) and not (Parent.Path == "C:\\Program Files (x86)\\Dell\\UpdateService\\ServiceShell.exe" and icontains(Process.CommandLine, "C:\\ProgramData\\Dell\\UpdateService\\Temp\\"))
GenericProperty1 = Parent.Path


[ActivityMonitoringRule platform=Windows]
# Deployment Image Servicing and Management tool. DISM is used to enumerate, install, uninstall, configure, and update features and packages in Windows images
# Author: frack113
RuleId = 43e32da2-fdd0-4156-90de-50dfd62636f9
RuleName = Dism Remove Online Package
EventType = Process.Start
Tag = proc-start-dism-remove-online-package
RiskScore = 50
Annotation = {"mitre_attack": ["T1562.001"]}
Query = iendswith(Process.Path, "\\DismHost.exe") and icontains(Parent.CommandLine, "/Online") and icontains(Parent.CommandLine, "/Disable-Feature") or iendswith(Process.Path, "\\Dism.exe") and icontains(Process.CommandLine, "/Online") and icontains(Process.CommandLine, "/Disable-Feature")
GenericProperty1 = Parent.CommandLine


[ActivityMonitoringRule platform=Windows]
# Execution of well known tools for data exfiltration and tunneling
# Author: Daniil Yugoslavskiy, oscd.community
RuleId = c75309a3-59f8-4a8d-9c2c-4c927ad50555
RuleName = Exfiltration and Tunneling Tools Execution
EventType = Process.Start
Tag = proc-start-exfiltration-and-tunneling-tools-execution
RiskScore = 50
Annotation = {"mitre_attack": ["T1041", "T1572", "T1071.001"]}
Query = iendswith(Process.Path, "\\plink.exe") or iendswith(Process.Path, "\\socat.exe") or iendswith(Process.Path, "\\stunnel.exe") or iendswith(Process.Path, "\\httptunnel.exe")


[ActivityMonitoringRule platform=Windows]
# Detects potential use of an SSH utility to establish RDP over a reverse SSH Tunnel. This can be used by attackers to enable routing of network packets that would otherwise not reach their intended destination.
# Author: Tim Rauch
RuleId = 8a3038e8-9c9d-46f8-b184-66234a160f6f
RuleName = Potential Remote Desktop Tunneling
EventType = Process.Start
Tag = proc-start-potential-remote-desktop-tunneling
RiskScore = 50
Annotation = {"mitre_attack": ["T1021"]}
Query = icontains(Process.CommandLine, ":3389") and (icontains(Process.CommandLine, " -L ") or icontains(Process.CommandLine, " -P ") or icontains(Process.CommandLine, " -R ") or icontains(Process.CommandLine, " -pw ") or icontains(Process.CommandLine, " -ssh "))


[ActivityMonitoringRule platform=Windows]
# Detect usage of the "driverquery" utility. Which can be used to perform reconnaissance on installed drivers
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleId = a20def93-0709-4eae-9bd2-31206e21e6b2
RuleName = DriverQuery.EXE Execution
EventType = Process.Start
Tag = proc-start-driverquery.exe-execution
RiskScore = 50
Query = (iendswith(Process.Path, "driverquery.exe") or Process.Name == "drvqry.exe") and not (iendswith(Parent.Path, "\\cscript.exe") or iendswith(Parent.Path, "\\mshta.exe") or iendswith(Parent.Path, "\\regsvr32.exe") or iendswith(Parent.Path, "\\rundll32.exe") or iendswith(Parent.Path, "\\wscript.exe") or icontains(Parent.Path, "\\AppData\\Local\\") or icontains(Parent.Path, "\\Users\\Public\\") or icontains(Parent.Path, "\\Windows\\Temp\\"))
GenericProperty1 = Parent.Path


[ActivityMonitoringRule platform=Windows]
# Detect use of the Windows 8.3 short name. Which could be used as a method to avoid Image based detection
# Author: frack113, Nasreddine Bencherchali (Nextron Systems)
RuleId = 3ef5605c-9eb9-47b0-9a71-b727e6aa5c3b
RuleName = Use NTFS Short Name in Image
EventType = Process.Start
Tag = proc-start-use-ntfs-short-name-in-image
RiskScore = 50
Annotation = {"mitre_attack": ["T1564.004"]}
Query = (icontains(Process.Path, "~1.bat") or icontains(Process.Path, "~1.dll") or icontains(Process.Path, "~1.exe") or icontains(Process.Path, "~1.hta") or icontains(Process.Path, "~1.js") or icontains(Process.Path, "~1.msi") or icontains(Process.Path, "~1.ps1") or icontains(Process.Path, "~1.tmp") or icontains(Process.Path, "~1.vbe") or icontains(Process.Path, "~1.vbs") or icontains(Process.Path, "~2.bat") or icontains(Process.Path, "~2.dll") or icontains(Process.Path, "~2.exe") or icontains(Process.Path, "~2.hta") or icontains(Process.Path, "~2.js") or icontains(Process.Path, "~2.msi") or icontains(Process.Path, "~2.ps1") or icontains(Process.Path, "~2.tmp") or icontains(Process.Path, "~2.vbe") or icontains(Process.Path, "~2.vbs")) and not Parent.Path == "C:\\Windows\\explorer.exe" and not (iendswith(Parent.Path, "\\WebEx\\WebexHost.exe") or iendswith(Parent.Path, "\\thor\\thor64.exe") or Process.Path == "C:\\PROGRA~1\\WinZip\\WZPREL~1.EXE" or iendswith(Process.Path, "\\VCREDI~1.EXE"))
GenericProperty1 = Parent.Path


[ActivityMonitoringRule platform=Windows]
# Detects potential DLL sideloading using JUSTSYSTEMS Japanese word processor
# Author: frack113
RuleId = 68654bf0-4412-43d5-bfe8-5eaa393cd939
RuleName = Potential DLL Sideloading Via JsSchHlp
EventType = Image.Load
Tag = potential-dll-sideloading-via-jsschhlp
RiskScore = 50
Annotation = {"mitre_attack": ["T1574.001", "T1574.002"]}
Query = iendswith(Image.Path, "\\JSESPR.dll") and not istartswith(Image.Path, "C:\\Program Files\\Common Files\\Justsystem\\JsSchHlp\\")
GenericProperty1 = Image.Path


[ActivityMonitoringRule platform=Windows]
# Detects potential DLL sideloading of "chrome_frame_helper.dll"
# Author: Nasreddine Bencherchali (Nextron Systems), Wietze Beukema (project and research)
RuleId = 72ca7c75-bf85-45cd-aca7-255d360e423c
RuleName = Potential Chrome Frame Helper DLL Sideloading
EventType = Image.Load
Tag = potential-chrome-frame-helper-dll-sideloading
RiskScore = 50
Annotation = {"mitre_attack": ["T1574.001", "T1574.002"]}
Query = iendswith(Image.Path, "\\chrome_frame_helper.dll") and not (istartswith(Image.Path, "C:\\Program Files\\Google\\Chrome\\Application\\") or istartswith(Image.Path, "C:\\Program Files (x86)\\Google\\Chrome\\Application\\")) and not icontains(Image.Path, "\\AppData\\local\\Google\\Chrome\\Application\\")
GenericProperty1 = Image.Path


[ActivityMonitoringRule platform=Windows]
# Detects potentially suspicious CommandLine of electron apps (teams, discord, slack, etc.). This could be a sign of abuse to proxy execution through a signed binary.
# Author: frack113, Nasreddine Bencherchali (Nextron Systems)
RuleId = 378a05d8-963c-46c9-bcce-13c7657eac99
RuleName = Potentially Suspicious Electron Application CommandLine
EventType = Process.Start
Tag = proc-start-potentially-suspicious-electron-application-commandline
RiskScore = 50
Query = (iendswith(Process.Path, "\\chrome.exe") or iendswith(Process.Path, "\\code.exe") or iendswith(Process.Path, "\\discord.exe") or iendswith(Process.Path, "\\GitHubDesktop.exe") or iendswith(Process.Path, "\\keybase.exe") or iendswith(Process.Path, "\\msedge_proxy.exe") or iendswith(Process.Path, "\\msedge.exe") or iendswith(Process.Path, "\\msedgewebview2.exe") or iendswith(Process.Path, "\\msteams.exe") or iendswith(Process.Path, "\\slack.exe") or iendswith(Process.Path, "\\Teams.exe") or Process.Name in ["chrome.exe", "code.exe", "discord.exe", "GitHubDesktop.exe", "keybase.exe", "msedge_proxy.exe", "msedge.exe", "msedgewebview2.exe", "msteams.exe", "slack.exe", "Teams.exe"]) and (icontains(Process.CommandLine, "--browser-subprocess-path") or icontains(Process.CommandLine, "--gpu-launcher") or icontains(Process.CommandLine, "--renderer-cmd-prefix") or icontains(Process.CommandLine, "--utility-cmd-prefix"))


[ActivityMonitoringRule platform=Windows]
# Adversaries may abuse msiexec.exe to proxy the execution of malicious payloads
# Author: frack113
RuleId = 4a2a2c3e-209f-4d01-b513-4155a540b469
RuleName = Suspicious MsiExec Embedding Parent
EventType = Process.Start
Tag = proc-start-suspicious-msiexec-embedding-parent
RiskScore = 50
Annotation = {"mitre_attack": ["T1218.007"]}
Query = (iendswith(Process.Path, "\\powershell.exe") or iendswith(Process.Path, "\\pwsh.exe") or iendswith(Process.Path, "\\cmd.exe")) and icontains(Parent.CommandLine, "MsiExec.exe") and icontains(Parent.CommandLine, "-Embedding ") and not (iendswith(Process.Path, ":\\Windows\\System32\\cmd.exe") and icontains(Process.CommandLine, "C:\\Program Files\\SplunkUniversalForwarder\\bin\\") or icontains(Process.CommandLine, "\\DismFoDInstall.cmd") or icontains(Parent.CommandLine, "\\MsiExec.exe -Embedding ") and icontains(Parent.CommandLine, "Global\\MSI0000"))
GenericProperty1 = Parent.CommandLine


[ActivityMonitoringRule platform=Windows]
# Detects attempts to create a DLL file to a known desktop application dependencies folder such as Slack, Teams or OneDrive and by an unusual process. This may indicate an attempt to load a malicious module via DLL search order hijacking.
# Author: Tim Rauch (rule), Elastic (idea)
RuleId = dbbd9f66-2ed3-4ca2-98a4-6ea985dd1a1c
RuleName = Potential Initial Access via DLL Search Order Hijacking
EventType = File.Create
Tag = potential-initial-access-via-dll-search-order-hijacking
RiskScore = 50
Annotation = {"mitre_attack": ["T1566", "T1566.001", "T1574", "T1574.001"]}
Query = (iendswith(Process.Path, "\\winword.exe") or iendswith(Process.Path, "\\excel.exe") or iendswith(Process.Path, "\\powerpnt.exe") or iendswith(Process.Path, "\\MSACCESS.EXE") or iendswith(Process.Path, "\\MSPUB.EXE") or iendswith(Process.Path, "\\fltldr.exe") or iendswith(Process.Path, "\\cmd.exe") or iendswith(Process.Path, "\\certutil.exe") or iendswith(Process.Path, "\\mshta.exe") or iendswith(Process.Path, "\\cscript.exe") or iendswith(Process.Path, "\\wscript.exe") or iendswith(Process.Path, "\\curl.exe") or iendswith(Process.Path, "\\powershell.exe") or iendswith(Process.Path, "\\pwsh.exe")) and iendswith(File.Path, ".dll") and icontains(File.Path, "\\Users\\") and icontains(File.Path, "\\AppData\\") and (icontains(File.Path, "\\Microsoft\\OneDrive\\") or icontains(File.Path, "\\Microsoft OneDrive\\") or icontains(File.Path, "\\Microsoft\\Teams\\") or icontains(File.Path, "\\Local\\slack\\app-") or icontains(File.Path, "\\Local\\Programs\\Microsoft VS Code\\")) and not (iendswith(Process.Path, "\\cmd.exe") and icontains(File.Path, "\\Users\\") and icontains(File.Path, "\\AppData\\") and icontains(File.Path, "\\Microsoft\\OneDrive\\") and icontains(File.Path, "\\api-ms-win-core-"))
GenericProperty1 = File.Path


[ActivityMonitoringRule platform=Windows]
# Detects code execution via Pester.bat (Pester - Powershell Modulte for testing)
# Author: Julia Fomina, oscd.community
RuleId = 59e938ff-0d6d-4dc3-b13f-36cc28734d4e
RuleName = Execute Code with Pester.bat
EventType = Process.Start
Tag = proc-start-execute-code-with-pester.bat
RiskScore = 50
Annotation = {"mitre_attack": ["T1059.001", "T1216"]}
Query = (iendswith(Process.Path, "\\powershell.exe") or iendswith(Process.Path, "\\pwsh.exe")) and icontains(Process.CommandLine, "Pester") and icontains(Process.CommandLine, "Get-Help") or iendswith(Process.Path, "\\cmd.exe") and icontains(Process.CommandLine, "pester") and icontains(Process.CommandLine, ";") and (icontains(Process.CommandLine, "help") or icontains(Process.CommandLine, "?"))


[ActivityMonitoringRule platform=Windows]
# Detects suspicious parent process for cmd.exe
# Author: Tim Rauch
RuleId = 4b991083-3d0e-44ce-8fc4-b254025d8d4b
RuleName = Unusual Parent Process For Cmd.EXE
EventType = Process.Start
Tag = proc-start-unusual-parent-process-for-cmd.exe
RiskScore = 50
Annotation = {"mitre_attack": ["T1059"]}
Query = iendswith(Process.Path, "\\cmd.exe") and (iendswith(Parent.Path, "\\csrss.exe") or iendswith(Parent.Path, "\\ctfmon.exe") or iendswith(Parent.Path, "\\dllhost.exe") or iendswith(Parent.Path, "\\epad.exe") or iendswith(Parent.Path, "\\FlashPlayerUpdateService.exe") or iendswith(Parent.Path, "\\GoogleUpdate.exe") or iendswith(Parent.Path, "\\jucheck.exe") or iendswith(Parent.Path, "\\jusched.exe") or iendswith(Parent.Path, "\\LogonUI.exe") or iendswith(Parent.Path, "\\lsass.exe") or iendswith(Parent.Path, "\\regsvr32.exe") or iendswith(Parent.Path, "\\SearchIndexer.exe") or iendswith(Parent.Path, "\\SearchProtocolHost.exe") or iendswith(Parent.Path, "\\SIHClient.exe") or iendswith(Parent.Path, "\\sihost.exe") or iendswith(Parent.Path, "\\slui.exe") or iendswith(Parent.Path, "\\spoolsv.exe") or iendswith(Parent.Path, "\\sppsvc.exe") or iendswith(Parent.Path, "\\taskhostw.exe") or iendswith(Parent.Path, "\\unsecapp.exe") or iendswith(Parent.Path, "\\WerFault.exe") or iendswith(Parent.Path, "\\wergmgr.exe") or iendswith(Parent.Path, "\\wlanext.exe") or iendswith(Parent.Path, "\\WUDFHost.exe"))
GenericProperty1 = Parent.Path


[ActivityMonitoringRule platform=Windows]
# Detects audio capture via PowerShell Cmdlet.
# Author: E.M. Anhaus (originally from Atomic Blue Detections, Endgame), oscd.community, Nasreddine Bencherchali (Nextron Systems)
RuleId = 932fb0d8-692b-4b0f-a26e-5643a50fe7d6
RuleName = Audio Capture via PowerShell
EventType = Process.Start
Tag = proc-start-audio-capture-via-powershell
RiskScore = 50
Annotation = {"mitre_attack": ["T1123"]}
Query = icontains(Process.CommandLine, "WindowsAudioDevice-Powershell-Cmdlet") or icontains(Process.CommandLine, "Toggle-AudioDevice") or icontains(Process.CommandLine, "Get-AudioDevice ") or icontains(Process.CommandLine, "Set-AudioDevice ") or icontains(Process.CommandLine, "Write-AudioDevice ")


[ActivityMonitoringRule platform=Windows]
# Detects usage of the 'Get-Clipboard' cmdlet via CLI
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleId = b9aeac14-2ffd-4ad3-b967-1354a4e628c3
RuleName = PowerShell Get-Clipboard Cmdlet Via CLI
EventType = Process.Start
Tag = proc-start-powershell-get-clipboard-cmdlet-via-cli
RiskScore = 50
Annotation = {"mitre_attack": ["T1115"]}
Query = icontains(Process.CommandLine, "Get-Clipboard")


[ActivityMonitoringRule platform=Windows]
# Detects file access requests to the the Windows Data Protection API Master keys by an uncommon application.
# This can be a sign of credential stealing. Example case would be usage of mimikatz "dpapi::masterkey" function
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleId = 46612ae6-86be-4802-bc07-39b59feb1309
RuleName = Access To Windows DPAPI Master Keys By Uncommon Application
EventType = File.Read
Tag = access-to-windows-dpapi-master-keys-by-uncommon-application
RiskScore = 50
Annotation = {"mitre_attack": ["T1555.004"]}
Query = (icontains(File.Path, "\\Microsoft\\Protect\\S-1-5-18\\") or icontains(File.Path, "\\Microsoft\\Protect\\S-1-5-21-")) and not (istartswith(Process.Path, "C:\\Program Files\\") or istartswith(Process.Path, "C:\\Program Files (x86)\\") or istartswith(Process.Path, "C:\\Windows\\system32\\") or istartswith(Process.Path, "C:\\Windows\\SysWOW64\\"))
GenericProperty1 = File.Path


[ActivityMonitoringRule platform=Windows]
# Detects the execution of the LOLBIN gpscript, which executes logon or startup scripts configured in Group Policy
# Author: frack113
RuleId = 1e59c230-6670-45bf-83b0-98903780607e
RuleName = Gpscript Execution
EventType = Process.Start
Tag = proc-start-gpscript-execution
RiskScore = 50
Annotation = {"mitre_attack": ["T1218"]}
Query = (iendswith(Process.Path, "\\gpscript.exe") or Process.Name == "GPSCRIPT.EXE") and (icontains(Process.CommandLine, " /logon") or icontains(Process.CommandLine, " /startup")) and not Parent.CommandLine == "C:\\windows\\system32\\svchost.exe -k netsvcs -p -s gpsvc"
GenericProperty1 = Parent.CommandLine


[ActivityMonitoringRule platform=Windows]
# Adversaries may execute their own malicious payloads by hijacking the Registry entries used by services.
# Adversaries may use flaws in the permissions for registry to redirect from the originally specified executable to one that they control, in order to launch their own code at Service start.
# Windows stores local service configuration information in the Registry under HKLM\SYSTEM\CurrentControlSet\Services
# Author: frack113
RuleId = 9b0b7ac3-6223-47aa-a3fd-e8f211e637db
RuleName = Changing Existing Service ImagePath Value Via Reg.EXE
EventType = Process.Start
Tag = proc-start-changing-existing-service-imagepath-value-via-reg.exe
RiskScore = 50
Annotation = {"mitre_attack": ["T1574.011"]}
Query = iendswith(Process.Path, "\\reg.exe") and icontains(Process.CommandLine, "add ") and icontains(Process.CommandLine, "SYSTEM\\CurrentControlSet\\Services\\") and icontains(Process.CommandLine, " ImagePath ") and (icontains(Process.CommandLine, " /d ") or icontains(Process.CommandLine, " -d "))


[ActivityMonitoringRule platform=Windows]
# Detects an a non-browser process interacting with the Telegram API which could indicate use of a covert C2
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleId = c3dbbc9f-ef1d-470a-a90a-d343448d5875
RuleName = Suspicious Non-Browser Network Communication With Telegram API
EventType = Net.Any
Tag = suspicious-non-browser-network-communication-with-telegram-api
RiskScore = 50
Annotation = {"mitre_attack": ["T1102"]}
Query = icontains(Net.Target.Name, "api.telegram.org") and not (iendswith(Process.Path, "\\brave.exe") or Process.Path in ["C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe", "C:\\Program Files (x86)\\Google\\Chrome\\Application\\chrome.exe"] or Process.Path in ["C:\\Program Files\\Mozilla Firefox\\firefox.exe", "C:\\Program Files (x86)\\Mozilla Firefox\\firefox.exe"] or Process.Path in ["C:\\Program Files (x86)\\Internet Explorer\\iexplore.exe", "C:\\Program Files\\Internet Explorer\\iexplore.exe"] or iendswith(Process.Path, "\\maxthon.exe") or istartswith(Process.Path, "C:\\Program Files (x86)\\Microsoft\\EdgeWebView\\Application\\") or iendswith(Process.Path, "\\WindowsApps\\MicrosoftEdge.exe") or Process.Path in ["C:\\Program Files (x86)\\Microsoft\\Edge\\Application\\msedge.exe", "C:\\Program Files\\Microsoft\\Edge\\Application\\msedge.exe"] or (istartswith(Process.Path, "C:\\Program Files (x86)\\Microsoft\\EdgeCore\\") or istartswith(Process.Path, "C:\\Program Files\\Microsoft\\EdgeCore\\")) and (iendswith(Process.Path, "\\msedge.exe") or iendswith(Process.Path, "\\msedgewebview2.exe")) or iendswith(Process.Path, "\\opera.exe") or iendswith(Process.Path, "\\safari.exe") or iendswith(Process.Path, "\\seamonkey.exe") or iendswith(Process.Path, "\\vivaldi.exe") or iendswith(Process.Path, "\\whale.exe"))
GenericProperty1 = Net.Target.Name


[ActivityMonitoringRule platform=Windows]
# Detects execution of "odbcconf" with "REGSVR" in order to register a new DLL (equivalent to running regsvr32). Attackers abuse this to install and run malicious DLLs.
# Author: Kirill Kiryanov, Beyu Denis, Daniil Yugoslavskiy, oscd.community, Nasreddine Bencherchali (Nextron Systems)
RuleId = 9f0a8bf3-a65b-440a-8c1e-5cb1547c8e70
RuleName = New DLL Registered Via Odbcconf.EXE
EventType = Process.Start
Tag = proc-start-new-dll-registered-via-odbcconf.exe
RiskScore = 50
Annotation = {"mitre_attack": ["T1218.008"]}
Query = (iendswith(Process.Path, "\\odbcconf.exe") or Process.Name == "odbcconf.exe") and icontains(Process.CommandLine, "REGSVR ") and icontains(Process.CommandLine, ".dll")


[ActivityMonitoringRule platform=Windows]
# Detects the execution of WMIC in order to get a list of firewall and antivirus products
# Author: Michael Haag, Florian Roth (Nextron Systems), juju4, oscd.community
RuleId = e568650b-5dcd-4658-8f34-ded0b1e13992
RuleName = Potential Product Class Reconnaissance Via Wmic.EXE
EventType = Process.Start
Tag = proc-start-potential-product-class-reconnaissance-via-wmic.exe
RiskScore = 50
Annotation = {"mitre_attack": ["T1047"]}
Query = (iendswith(Process.Path, "\\wmic.exe") or Process.Name == "wmic.exe") and (icontains(Process.CommandLine, "AntiVirusProduct") or icontains(Process.CommandLine, "FirewallProduct"))


[ActivityMonitoringRule platform=Windows]
# Detects the use of the Windows Update Client binary (wuauclt.exe) to proxy execute code and making network connections.
# One could easily make the DLL spawn a new process and inject to it to proxy the network connection and bypass this rule.
# Author: Roberto Rodriguez (Cyb3rWard0g), OTR (Open Threat Research)
RuleId = c649a6c7-cd8c-4a78-9c04-000fc76df954
RuleName = Potentially Suspicious Wuauclt Network Connection
EventType = Net.Any
Tag = potentially-suspicious-wuauclt-network-connection
RiskScore = 50
Annotation = {"mitre_attack": ["T1218"]}
Query = icontains(Process.Path, "wuauclt") and icontains(Process.CommandLine, " /RunHandlerComServer") and not (istartswith(Net.Target.Ip, "10.") or istartswith(Net.Target.Ip, "127.") or istartswith(Net.Target.Ip, "169.254.") or istartswith(Net.Target.Ip, "172.16") or istartswith(Net.Target.Ip, "172.17") or istartswith(Net.Target.Ip, "172.18") or istartswith(Net.Target.Ip, "172.19") or istartswith(Net.Target.Ip, "172.20") or istartswith(Net.Target.Ip, "172.21") or istartswith(Net.Target.Ip, "172.22") or istartswith(Net.Target.Ip, "172.23") or istartswith(Net.Target.Ip, "172.24") or istartswith(Net.Target.Ip, "172.25") or istartswith(Net.Target.Ip, "172.26") or istartswith(Net.Target.Ip, "172.27") or istartswith(Net.Target.Ip, "172.28") or istartswith(Net.Target.Ip, "172.29") or istartswith(Net.Target.Ip, "172.30") or istartswith(Net.Target.Ip, "172.31") or istartswith(Net.Target.Ip, "192.168") or istartswith(Net.Target.Ip, "::1") or istartswith(Net.Target.Ip, "0:0:0:0:0:0:0:1") or istartswith(Net.Target.Ip, "fe80:") or istartswith(Net.Target.Ip, "fc") or istartswith(Net.Target.Ip, "fd") or istartswith(Net.Target.Ip, "20.184.") or istartswith(Net.Target.Ip, "20.185.") or istartswith(Net.Target.Ip, "20.186.") or istartswith(Net.Target.Ip, "20.187.") or istartswith(Net.Target.Ip, "20.188.") or istartswith(Net.Target.Ip, "20.189.") or istartswith(Net.Target.Ip, "20.190.") or istartswith(Net.Target.Ip, "20.191.") or istartswith(Net.Target.Ip, "20.220.") or istartswith(Net.Target.Ip, "20.221.") or istartswith(Net.Target.Ip, "23.79.") or istartswith(Net.Target.Ip, "51.10.") or istartswith(Net.Target.Ip, "51.103.") or istartswith(Net.Target.Ip, "51.104.") or istartswith(Net.Target.Ip, "51.105.") or istartswith(Net.Target.Ip, "52.239.") or icontains(Process.CommandLine, ":\\Windows\\UUS\\Packages\\Preview\\amd64\\updatedeploy.dll /ClassId") or icontains(Process.CommandLine, ":\\Windows\\UUS\\amd64\\UpdateDeploy.dll /ClassId") or icontains(Process.CommandLine, ":\\Windows\\WinSxS\\") or icontains(Process.CommandLine, "\\UpdateDeploy.dll /ClassId ") or isnull(Process.CommandLine) or Process.CommandLine == "")
GenericProperty1 = Net.Target.Ip


[ActivityMonitoringRule platform=Windows]
# Detects usage of the "wusa.exe" (Windows Update Standalone Installer) utility to extract cab using the "/extract" argument which is not longer supported. This could indicate an attacker using an old technique
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleId = 59b39960-5f9d-4a49-9cef-1e4d2c1d0cb9
RuleName = Wusa Extracting Cab Files
EventType = Process.Start
Tag = proc-start-wusa-extracting-cab-files
RiskScore = 50
Query = iendswith(Process.Path, "\\wusa.exe") and icontains(Process.CommandLine, "/extract:")


[ActivityMonitoringRule platform=Windows]
# Detects the rare use of the command line tool shutdown to logoff a user
# Author: frack113
RuleId = ec290c06-9b6b-4338-8b6b-095c0f284f10
RuleName = Suspicious Execution of Shutdown to Log Out
EventType = Process.Start
Tag = proc-start-suspicious-execution-of-shutdown-to-log-out
RiskScore = 50
Annotation = {"mitre_attack": ["T1529"]}
Query = iendswith(Process.Path, "\\shutdown.exe") and icontains(Process.CommandLine, "/l")


[ActivityMonitoringRule platform=Windows]
# Detects threat actors proxy executing code and bypassing application controls by leveraging wmic and the `/FORMAT` argument switch to download and execute an XSL file (i.e js, vbs, etc).
# Author: Roberto Rodriguez (Cyb3rWard0g), OTR (Open Threat Research)
RuleId = 06ce37c2-61ab-4f05-9ff5-b1a96d18ae32
RuleName = WMIC Loading Scripting Libraries
EventType = Image.Load
Tag = wmic-loading-scripting-libraries
RiskScore = 50
Annotation = {"mitre_attack": ["T1220"]}
Query = iendswith(Process.Path, "\\wmic.exe") and (iendswith(Image.Path, "\\jscript.dll") or iendswith(Image.Path, "\\vbscript.dll"))
GenericProperty1 = Image.Path


[ActivityMonitoringRule platform=Windows]
# Detects the creation of a file with the ".dmp"/".hdmp" extension by a shell or scripting application such as "cmd", "powershell", etc. Often created by software during a crash. Memory dumps can sometimes contain sensitive information such as credentials. It's best to determine the source of the crash.
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleId = aba15bdd-657f-422a-bab3-ac2d2a0d6f1c
RuleName = Potentially Suspicious DMP/HDMP File Creation
EventType = File.Create
Tag = potentially-suspicious-dmp/hdmp-file-creation
RiskScore = 50
Query = (iendswith(Process.Path, "\\cmd.exe") or iendswith(Process.Path, "\\cscript.exe") or iendswith(Process.Path, "\\mshta.exe") or iendswith(Process.Path, "\\powershell.exe") or iendswith(Process.Path, "\\pwsh.exe") or iendswith(Process.Path, "\\wscript.exe")) and (iendswith(File.Path, ".dmp") or iendswith(File.Path, ".dump") or iendswith(File.Path, ".hdmp"))
GenericProperty1 = File.Path


[ActivityMonitoringRule platform=Windows]
# Detects the execution of sigverif binary as a parent process which could indicate it being used as a LOLBIN to proxy execution
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleId = 7d4aaec2-08ed-4430-8b96-28420e030e04
RuleName = Suspicious Sigverif Execution
EventType = Process.Start
Tag = proc-start-suspicious-sigverif-execution
RiskScore = 50
Annotation = {"mitre_attack": ["T1216"]}
Query = iendswith(Parent.Path, "\\sigverif.exe")
GenericProperty1 = Parent.Path


[ActivityMonitoringRule platform=Windows]
# Detects regsvr32 execution to download/install/register new DLLs that are hosted on Web or FTP servers.
# Author: Florian Roth (Nextron Systems)
RuleId = 867356ee-9352-41c9-a8f2-1be690d78216
RuleName = Potentially Suspicious Regsvr32 HTTP/FTP Pattern
EventType = Process.Start
Tag = proc-start-potentially-suspicious-regsvr32-http/ftp-pattern
RiskScore = 50
Annotation = {"mitre_attack": ["T1218.010"]}
Query = (iendswith(Process.Path, "\\regsvr32.exe") or Process.Name == "REGSVR32.EXE") and (icontains(Process.CommandLine, " /i") or icontains(Process.CommandLine, " -i")) and (icontains(Process.CommandLine, "ftp") or icontains(Process.CommandLine, "http"))


[ActivityMonitoringRule platform=Windows]
# Detects creation of files with the ".pub" extension in suspicious or uncommon locations. This could be a sign of attackers abusing Publisher documents
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleId = 3d2a2d59-929c-4b78-8c1a-145dfe9e07b1
RuleName = Publisher Attachment File Dropped In Suspicious Location
EventType = File.Create
Tag = publisher-attachment-file-dropped-in-suspicious-location
RiskScore = 50
Query = (icontains(File.Path, "\\AppData\\Local\\Temp\\") or icontains(File.Path, "\\Users\\Public\\") or icontains(File.Path, "\\Windows\\Temp\\") or icontains(File.Path, "C:\\Temp\\")) and iendswith(File.Path, ".pub")
GenericProperty1 = File.Path


[ActivityMonitoringRule platform=Windows]
# Alerts on trust record modification within the registry, indicating usage of macros
# Author: Antonlovesdnb, Trent Liffick (@tliffick)
RuleId = 295a59c1-7b79-4b47-a930-df12c15fc9c2
RuleName = Windows Registry Trust Record Modification
EventType = Reg.Any
Tag = windows-registry-trust-record-modification
RiskScore = 50
Annotation = {"mitre_attack": ["T1566.001"]}
Query = icontains(Reg.Key.Target, "\\Security\\Trusted Documents\\TrustRecords")
Hive = HKLM,HKU
GenericProperty1 = Reg.Key.Target


[ActivityMonitoringRule platform=Windows]
# Detects DNS queries for IP lookup services such as "api.ipify.org" originating from a non browser process.
# Author: Brandon George (blog post), Thomas Patzke
RuleId = ec82e2a5-81ea-4211-a1f8-37a0286df2c2
RuleName = Suspicious DNS Query for IP Lookup Service APIs
EventType = Dns.Query
Tag = suspicious-dns-query-for-ip-lookup-service-apis
RiskScore = 50
Annotation = {"mitre_attack": ["T1590"]}
Query = (icontains(Dns.QueryRequest, "api.2ip.ua") or icontains(Dns.QueryRequest, "api.ipify.org") or icontains(Dns.QueryRequest, "bot.whatismyipaddress.com") or icontains(Dns.QueryRequest, "canireachthe.net") or icontains(Dns.QueryRequest, "checkip.amazonaws.com") or icontains(Dns.QueryRequest, "checkip.dyndns.org") or icontains(Dns.QueryRequest, "curlmyip.com") or icontains(Dns.QueryRequest, "edns.ip-api.com") or icontains(Dns.QueryRequest, "eth0.me") or icontains(Dns.QueryRequest, "freegeoip.app") or icontains(Dns.QueryRequest, "geoipy.com") or icontains(Dns.QueryRequest, "getip.pro") or icontains(Dns.QueryRequest, "icanhazip.com") or icontains(Dns.QueryRequest, "ident.me") or icontains(Dns.QueryRequest, "ifconfig.io") or icontains(Dns.QueryRequest, "ifconfig.me") or icontains(Dns.QueryRequest, "ip-api.com") or icontains(Dns.QueryRequest, "ip.anysrc.net") or icontains(Dns.QueryRequest, "ip.tyk.nu") or icontains(Dns.QueryRequest, "ipaddressworld.com") or icontains(Dns.QueryRequest, "ipecho.net") or icontains(Dns.QueryRequest, "ipinfo.io") or icontains(Dns.QueryRequest, "ipof.in") or icontains(Dns.QueryRequest, "ipv4.icanhazip.com") or icontains(Dns.QueryRequest, "ipv4bot.whatismyipaddress.com") or icontains(Dns.QueryRequest, "ipwho.is") or icontains(Dns.QueryRequest, "l2.io") or icontains(Dns.QueryRequest, "myexternalip.com") or icontains(Dns.QueryRequest, "wgetip.com") or icontains(Dns.QueryRequest, "whatismyip.akamai.com") or icontains(Dns.QueryRequest, "wtfismyip.com")) and not (iendswith(Process.Path, "\\brave.exe") or Process.Path in ["C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe", "C:\\Program Files (x86)\\Google\\Chrome\\Application\\chrome.exe"] or Process.Path in ["C:\\Program Files\\Mozilla Firefox\\firefox.exe", "C:\\Program Files (x86)\\Mozilla Firefox\\firefox.exe"] or Process.Path in ["C:\\Program Files (x86)\\Internet Explorer\\iexplore.exe", "C:\\Program Files\\Internet Explorer\\iexplore.exe"] or iendswith(Process.Path, "\\maxthon.exe") or istartswith(Process.Path, "C:\\Program Files (x86)\\Microsoft\\EdgeWebView\\Application\\") or iendswith(Process.Path, "\\WindowsApps\\MicrosoftEdge.exe") or Process.Path in ["C:\\Program Files (x86)\\Microsoft\\Edge\\Application\\msedge.exe", "C:\\Program Files\\Microsoft\\Edge\\Application\\msedge.exe"] or (istartswith(Process.Path, "C:\\Program Files (x86)\\Microsoft\\EdgeCore\\") or istartswith(Process.Path, "C:\\Program Files\\Microsoft\\EdgeCore\\")) and (iendswith(Process.Path, "\\msedge.exe") or iendswith(Process.Path, "\\msedgewebview2.exe")) or iendswith(Process.Path, "\\opera.exe") or iendswith(Process.Path, "\\safari.exe") or iendswith(Process.Path, "\\seamonkey.exe") or iendswith(Process.Path, "\\vivaldi.exe") or iendswith(Process.Path, "\\whale.exe"))
GenericProperty1 = Dns.QueryRequest


[ActivityMonitoringRule platform=Windows]
# Adversaries may search for private key certificate files on compromised systems for insecurely stored credential
# Author: frack113, Nasreddine Bencherchali (Nextron Systems)
RuleId = 213d6a77-3d55-4ce8-ba74-fcfef741974e
RuleName = Private Keys Reconnaissance Via CommandLine Tools
EventType = Process.Start
Tag = proc-start-private-keys-reconnaissance-via-commandline-tools
RiskScore = 50
Annotation = {"mitre_attack": ["T1552.004"]}
Query = (icontains(Process.CommandLine, ".key") or icontains(Process.CommandLine, ".pgp") or icontains(Process.CommandLine, ".gpg") or icontains(Process.CommandLine, ".ppk") or icontains(Process.CommandLine, ".p12") or icontains(Process.CommandLine, ".pem") or icontains(Process.CommandLine, ".pfx") or icontains(Process.CommandLine, ".cer") or icontains(Process.CommandLine, ".p7b") or icontains(Process.CommandLine, ".asc")) and ((iendswith(Process.Path, "\\cmd.exe") or Process.Name == "Cmd.Exe") and icontains(Process.CommandLine, "dir ") or (iendswith(Process.Path, "\\powershell.exe") or iendswith(Process.Path, "\\pwsh.exe") or Process.Name in ["PowerShell.EXE", "pwsh.dll"]) and icontains(Process.CommandLine, "Get-ChildItem ") or iendswith(Process.Path, "\\findstr.exe") or Process.Name == "FINDSTR.EXE")


[ActivityMonitoringRule platform=Windows]
# Detect usage of the "ssh.exe" binary as a proxy to launch other programs
# Author: frack113, Nasreddine Bencherchali
RuleId = 7d6d30b8-5b91-4b90-a891-46cccaf29598
RuleName = Lolbin Ssh.exe Use As Proxy
EventType = Process.Start
Tag = proc-start-lolbin-ssh.exe-use-as-proxy
RiskScore = 50
Annotation = {"mitre_attack": ["T1202"]}
Query = Parent.Path == "C:\\Windows\\System32\\OpenSSH\\sshd.exe" or iendswith(Process.Path, "\\ssh.exe") and (icontains(Process.CommandLine, "ProxyCommand=") or icontains(Process.CommandLine, "PermitLocalCommand") and icontains(Process.CommandLine, "LocalCommand"))
GenericProperty1 = Parent.Path


[ActivityMonitoringRule platform=Windows]
# Aversaries may use to interact with a remote network share using Server Message Block (SMB).
# This technique is used by post-exploitation frameworks.
# Author: frack113
RuleId = 4aafb0fa-bff5-4b9d-b99e-8093e659c65f
RuleName = Writing Local Admin Share
EventType = File.Create
Tag = writing-local-admin-share
RiskScore = 50
Annotation = {"mitre_attack": ["T1546.002"]}
Query = icontains(File.Path, "\\\\127.0.0") and icontains(File.Path, "\\ADMIN$\\")
GenericProperty1 = File.Path


[ActivityMonitoringRule platform=Windows]
# Detects execution of ruby using the "-e" flag. This is could be used as a way to launch a reverse shell or execute live ruby code.
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleId = 20a5ffa1-3848-4584-b6f8-c7c7fd9f69c8
RuleName = Ruby Inline Command Execution
EventType = Process.Start
Tag = proc-start-ruby-inline-command-execution
RiskScore = 50
Annotation = {"mitre_attack": ["T1059"]}
Query = (iendswith(Process.Path, "\\ruby.exe") or Process.Name == "ruby.exe") and icontains(Process.CommandLine, " -e")


[ActivityMonitoringRule platform=Windows]
# Detects password change for the logged-on user's via "ksetup.exe"
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleId = c9783e20-4793-4164-ba96-d9ee483992c4
RuleName = Logged-On User Password Change Via Ksetup.EXE
EventType = Process.Start
Tag = proc-start-logged-on-user-password-change-via-ksetup.exe
RiskScore = 50
Query = (iendswith(Process.Path, "\\ksetup.exe") or Process.Name == "ksetup.exe") and icontains(Process.CommandLine, " /ChangePassword ")


[ActivityMonitoringRule platform=Windows]
# Detects the execution of Sysinternals ADExplorer with the "-snapshot" flag in order to save a local copy of the active directory database.
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleId = 9212f354-7775-4e28-9c9f-8f0a4544e664
RuleName = Active Directory Database Snapshot Via ADExplorer
EventType = Process.Start
Tag = proc-start-active-directory-database-snapshot-via-adexplorer
RiskScore = 50
Annotation = {"mitre_attack": ["T1552.001", "T1003.003"]}
Query = (iendswith(Process.Path, "\\ADExplorer.exe") or Process.Name == "AdExp") and icontains(Process.CommandLine, "snapshot")


[ActivityMonitoringRule platform=Windows]
# Detects execution of of Dxcap.exe
# Author: Beyu Denis, oscd.community, Nasreddine Bencherchali (Nextron Systems)
RuleId = 60f16a96-db70-42eb-8f76-16763e333590
RuleName = Application Whitelisting Bypass via Dxcap.exe
EventType = Process.Start
Tag = proc-start-application-whitelisting-bypass-via-dxcap.exe
RiskScore = 50
Annotation = {"mitre_attack": ["T1218"]}
Query = (iendswith(Process.Path, "\\DXCap.exe") or Process.Name == "DXCap.exe") and icontains(Process.CommandLine, " -c ")


[ActivityMonitoringRule platform=Windows]
# Detects the creation of the PROCEXP152.sys file in the application-data local temporary folder.
# This driver is used by Sysinternals Process Explorer but also by KDU (https://github.com/hfiref0x/KDU) or Ghost-In-The-Logs (https://github.com/bats3c/Ghost-In-The-Logs), which uses KDU.
# Author: xknow (@xknow_infosec), xorxes (@xor_xes)
RuleId = 3da70954-0f2c-4103-adff-b7440368f50e
RuleName = Suspicious PROCEXP152.sys File Created In TMP
EventType = File.Create
Tag = suspicious-procexp152.sys-file-created-in-tmp
RiskScore = 50
Annotation = {"mitre_attack": ["T1562.001"]}
Query = icontains(File.Path, "\\AppData\\Local\\Temp\\") and iendswith(File.Path, "PROCEXP152.sys") and not (icontains(Process.Path, "\\procexp64.exe") or icontains(Process.Path, "\\procexp.exe") or icontains(Process.Path, "\\procmon64.exe") or icontains(Process.Path, "\\procmon.exe"))
GenericProperty1 = File.Path


[ActivityMonitoringRule platform=Windows]
# Attackers can use print.exe for remote file copy
# Author: Furkan CALISKAN, @caliskanfurkan_, @oscd_initiative
RuleId = bafac3d6-7de9-4dd9-8874-4a1194b493ed
RuleName = Abusing Print Executable
EventType = Process.Start
Tag = proc-start-abusing-print-executable
RiskScore = 50
Annotation = {"mitre_attack": ["T1218"]}
Query = iendswith(Process.Path, "\\print.exe") and istartswith(Process.CommandLine, "print") and icontains(Process.CommandLine, "/D") and icontains(Process.CommandLine, ".exe") and not icontains(Process.CommandLine, "print.exe")


[ActivityMonitoringRule platform=Windows]
# Use living off the land tools to zip a file and stage it in the Windows temporary folder for later exfiltration
# Author: frack113
RuleId = 85a8e5ba-bd03-4bfb-bbfa-a4409a8f8b98
RuleName = Zip A Folder With PowerShell For Staging In Temp
EventType = Process.Start
Tag = proc-start-zip-a-folder-with-powershell-for-staging-in-temp
RiskScore = 50
Annotation = {"mitre_attack": ["T1074.001"]}
Query = icontains(Process.CommandLine, "Compress-Archive ") and icontains(Process.CommandLine, " -Path ") and icontains(Process.CommandLine, " -DestinationPath ") and icontains(Process.CommandLine, "$env:TEMP\\")


[ActivityMonitoringRule platform=Windows]
# ZipExec is a Proof-of-Concept (POC) tool to wrap binary-based tools into a password-protected zip file.
# Author: frack113
RuleId = 90dcf730-1b71-4ae7-9ffc-6fcf62bd0132
RuleName = Suspicious ZipExec Execution
EventType = Process.Start
Tag = proc-start-suspicious-zipexec-execution
RiskScore = 50
Annotation = {"mitre_attack": ["T1218", "T1202"]}
Query = icontains(Process.CommandLine, "/generic:Microsoft_Windows_Shell_ZipFolder:filename=") and icontains(Process.CommandLine, ".zip") and icontains(Process.CommandLine, "/pass:") and icontains(Process.CommandLine, "/user:") or icontains(Process.CommandLine, "/delete") and icontains(Process.CommandLine, "Microsoft_Windows_Shell_ZipFolder:filename=") and icontains(Process.CommandLine, ".zip")


[ActivityMonitoringRule platform=Windows]
# Detects CLR DLL being loaded by an Office Product
# Author: Antonlovesdnb
RuleId = d13c43f0-f66b-4279-8b2c-5912077c1780
RuleName = CLR DLL Loaded Via Office Applications
EventType = Image.Load
Tag = clr-dll-loaded-via-office-applications
RiskScore = 50
Annotation = {"mitre_attack": ["T1204.002"]}
Query = (iendswith(Process.Path, "\\excel.exe") or iendswith(Process.Path, "\\mspub.exe") or iendswith(Process.Path, "\\outlook.exe") or iendswith(Process.Path, "\\onenote.exe") or iendswith(Process.Path, "\\onenoteim.exe") or iendswith(Process.Path, "\\powerpnt.exe") or iendswith(Process.Path, "\\winword.exe")) and icontains(Image.Path, "\\clr.dll")
GenericProperty1 = Image.Path


[ActivityMonitoringRule platform=Windows]
# Detects execution of "git" in order to clone a remote repository that contain suspicious keywords which might be suspicious
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleId = aef9d1f1-7396-4e92-a927-4567c7a495c1
RuleName = Suspicious Git Clone
EventType = Process.Start
Tag = proc-start-suspicious-git-clone
RiskScore = 50
Annotation = {"mitre_attack": ["T1593.003"]}
Query = (iendswith(Process.Path, "\\git.exe") or iendswith(Process.Path, "\\git-remote-https.exe") or Process.Name == "git.exe") and (icontains(Process.CommandLine, " clone ") or icontains(Process.CommandLine, "git-remote-https ")) and (icontains(Process.CommandLine, "exploit") or icontains(Process.CommandLine, "Vulns") or icontains(Process.CommandLine, "vulnerability") or icontains(Process.CommandLine, "RemoteCodeExecution") or icontains(Process.CommandLine, "Invoke-") or icontains(Process.CommandLine, "CVE-") or icontains(Process.CommandLine, "poc-") or icontains(Process.CommandLine, "ProofOfConcept") or icontains(Process.CommandLine, "proxyshell") or icontains(Process.CommandLine, "log4shell") or icontains(Process.CommandLine, "eternalblue") or icontains(Process.CommandLine, "eternal-blue") or icontains(Process.CommandLine, "MS17-"))


[ActivityMonitoringRule platform=Windows]
# Detects renamed execution of "Microsoft.NodejsTools.PressAnyKey.exe", which can be abused as a LOLBIN to execute arbitrary binaries
# Author: Nasreddine Bencherchali (Nextron Systems), Florian Roth (Nextron Systems)
RuleId = 65c3ca2c-525f-4ced-968e-246a713d164f
RuleName = Visual Studio NodejsTools PressAnyKey Renamed Execution
EventType = Process.Start
Tag = proc-start-visual-studio-nodejstools-pressanykey-renamed-execution
RiskScore = 50
Annotation = {"mitre_attack": ["T1218"]}
Query = Process.Name == "Microsoft.NodejsTools.PressAnyKey.exe" and not iendswith(Process.Path, "\\Microsoft.NodejsTools.PressAnyKey.exe")


[ActivityMonitoringRule platform=Windows]
# Detects external IP address lookups by non-browser processes via services such as "api.ipify.org". This could be indicative of potential post compromise internet test activity.
# Author: Janantha Marasinghe, Nasreddine Bencherchali (Nextron Systems)
RuleId = edf3485d-dac4-4d50-90e4-b0e5813f7e60
RuleName = Suspicious Network Connection to IP Lookup Service APIs
EventType = Net.Any
Tag = suspicious-network-connection-to-ip-lookup-service-apis
RiskScore = 50
Annotation = {"mitre_attack": ["T1016"]}
Query = (icontains(Net.Target.Name, "api.2ip.ua") or icontains(Net.Target.Name, "api.ipify.org") or icontains(Net.Target.Name, "bot.whatismyipaddress.com") or icontains(Net.Target.Name, "canireachthe.net") or icontains(Net.Target.Name, "checkip.amazonaws.com") or icontains(Net.Target.Name, "checkip.dyndns.org") or icontains(Net.Target.Name, "curlmyip.com") or icontains(Net.Target.Name, "edns.ip-api.com") or icontains(Net.Target.Name, "eth0.me") or icontains(Net.Target.Name, "freegeoip.app") or icontains(Net.Target.Name, "geoipy.com") or icontains(Net.Target.Name, "getip.pro") or icontains(Net.Target.Name, "icanhazip.com") or icontains(Net.Target.Name, "ident.me") or icontains(Net.Target.Name, "ifconfig.io") or icontains(Net.Target.Name, "ifconfig.me") or icontains(Net.Target.Name, "ip-api.com") or icontains(Net.Target.Name, "ip.anysrc.net") or icontains(Net.Target.Name, "ip.tyk.nu") or icontains(Net.Target.Name, "ipaddressworld.com") or icontains(Net.Target.Name, "ipecho.net") or icontains(Net.Target.Name, "ipinfo.io") or icontains(Net.Target.Name, "ipof.in") or icontains(Net.Target.Name, "ipv4.icanhazip.com") or icontains(Net.Target.Name, "ipv4bot.whatismyipaddress.com") or icontains(Net.Target.Name, "ipwho.is") or icontains(Net.Target.Name, "l2.io") or icontains(Net.Target.Name, "myexternalip.com") or icontains(Net.Target.Name, "wgetip.com") or icontains(Net.Target.Name, "whatismyip.akamai.com") or icontains(Net.Target.Name, "wtfismyip.com")) and not (iendswith(Process.Path, "\\brave.exe") or Process.Path in ["C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe", "C:\\Program Files (x86)\\Google\\Chrome\\Application\\chrome.exe"] or Process.Path in ["C:\\Program Files\\Mozilla Firefox\\firefox.exe", "C:\\Program Files (x86)\\Mozilla Firefox\\firefox.exe"] or Process.Path in ["C:\\Program Files (x86)\\Internet Explorer\\iexplore.exe", "C:\\Program Files\\Internet Explorer\\iexplore.exe"] or iendswith(Process.Path, "\\maxthon.exe") or istartswith(Process.Path, "C:\\Program Files (x86)\\Microsoft\\EdgeWebView\\Application\\") or iendswith(Process.Path, "\\WindowsApps\\MicrosoftEdge.exe") or Process.Path in ["C:\\Program Files (x86)\\Microsoft\\Edge\\Application\\msedge.exe", "C:\\Program Files\\Microsoft\\Edge\\Application\\msedge.exe"] or (istartswith(Process.Path, "C:\\Program Files (x86)\\Microsoft\\EdgeCore\\") or istartswith(Process.Path, "C:\\Program Files\\Microsoft\\EdgeCore\\")) and (iendswith(Process.Path, "\\msedge.exe") or iendswith(Process.Path, "\\msedgewebview2.exe")) or iendswith(Process.Path, "\\opera.exe") or iendswith(Process.Path, "\\safari.exe") or iendswith(Process.Path, "\\seamonkey.exe") or iendswith(Process.Path, "\\vivaldi.exe") or iendswith(Process.Path, "\\whale.exe"))
GenericProperty1 = Net.Target.Name


[ActivityMonitoringRule platform=Windows]
# Detects calls to the "terminate" function via wmic in order to kill an application
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleId = 49d9671b-0a0a-4c09-8280-d215bfd30662
RuleName = Application Terminated Via Wmic.EXE
EventType = Process.Start
Tag = proc-start-application-terminated-via-wmic.exe
RiskScore = 50
Annotation = {"mitre_attack": ["T1047"]}
Query = (iendswith(Process.Path, "\\WMIC.exe") or Process.Name == "wmic.exe") and icontains(Process.CommandLine, "call") and icontains(Process.CommandLine, "terminate")


[ActivityMonitoringRule platform=Windows]
# Detects DLL sideloading of "dbghelp.dll"
# Author: Nasreddine Bencherchali (Nextron Systems), Wietze Beukema (project and research)
RuleId = 6414b5cd-b19d-447e-bb5e-9f03940b5784
RuleName = Potential DLL Sideloading Of DBGHELP.DLL
EventType = Image.Load
Tag = potential-dll-sideloading-of-dbghelp.dll
RiskScore = 50
Annotation = {"mitre_attack": ["T1574.001", "T1574.002"]}
Query = iendswith(Image.Path, "\\dbghelp.dll") and not (istartswith(Image.Path, "C:\\Program Files (x86)\\") or istartswith(Image.Path, "C:\\Program Files\\") or istartswith(Image.Path, "C:\\Windows\\SoftwareDistribution\\") or istartswith(Image.Path, "C:\\Windows\\System32\\") or istartswith(Image.Path, "C:\\Windows\\SystemTemp\\") or istartswith(Image.Path, "C:\\Windows\\SysWOW64\\") or istartswith(Image.Path, "C:\\Windows\\WinSxS\\")) and not (iendswith(Image.Path, "\\Anaconda3\\Lib\\site-packages\\vtrace\\platforms\\windll\\amd64\\dbghelp.dll") or iendswith(Image.Path, "\\Anaconda3\\Lib\\site-packages\\vtrace\\platforms\\windll\\i386\\dbghelp.dll") or iendswith(Image.Path, "\\Epic Games\\Launcher\\Engine\\Binaries\\ThirdParty\\DbgHelp\\dbghelp.dll") or iendswith(Image.Path, "\\Epic Games\\MagicLegends\\x86\\dbghelp.dll"))
GenericProperty1 = Image.Path


[ActivityMonitoringRule platform=Windows]
# Detects execution of php using the "-r" flag. This is could be used as a way to launch a reverse shell or execute live php code.
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleId = d81871ef-5738-47ab-9797-7a9c90cd4bfb
RuleName = Php Inline Command Execution
EventType = Process.Start
Tag = proc-start-php-inline-command-execution
RiskScore = 50
Annotation = {"mitre_attack": ["T1059"]}
Query = (iendswith(Process.Path, "\\php.exe") or Process.Name == "php.exe") and icontains(Process.CommandLine, " -r")


[ActivityMonitoringRule platform=Windows]
# Threat actors performed dumping of SAM, SECURITY and SYSTEM registry hives using DelegateExecute key
# Author: frack113
RuleId = dd3ee8cc-f751-41c9-ba53-5a32ed47e563
RuleName = Suspicious Reg Add Open Command
EventType = Process.Start
Tag = proc-start-suspicious-reg-add-open-command
RiskScore = 50
Annotation = {"mitre_attack": ["T1003"]}
Query = icontains(Process.CommandLine, "reg") and icontains(Process.CommandLine, "add") and icontains(Process.CommandLine, "hkcu\\software\\classes\\ms-settings\\shell\\open\\command") and icontains(Process.CommandLine, "/ve ") and icontains(Process.CommandLine, "/d") or icontains(Process.CommandLine, "reg") and icontains(Process.CommandLine, "add") and icontains(Process.CommandLine, "hkcu\\software\\classes\\ms-settings\\shell\\open\\command") and icontains(Process.CommandLine, "/v") and icontains(Process.CommandLine, "DelegateExecute") or icontains(Process.CommandLine, "reg") and icontains(Process.CommandLine, "delete") and icontains(Process.CommandLine, "hkcu\\software\\classes\\ms-settings")


[ActivityMonitoringRule platform=Windows]
# Detects execution of "findstr" with specific flags and a remote share path. This specific set of CLI flags would allow "findstr" to download the content of the file located on the remote share as described in the LOLBAS entry.
# Author: Furkan CALISKAN, @caliskanfurkan_, @oscd_initiative, Nasreddine Bencherchali (Nextron Systems)
RuleId = 587254ee-a24b-4335-b3cd-065c0f1f4baa
RuleName = Remote File Download Via Findstr.EXE
EventType = Process.Start
Tag = proc-start-remote-file-download-via-findstr.exe
RiskScore = 50
Annotation = {"mitre_attack": ["T1218", "T1564.004", "T1552.001", "T1105"]}
Query = (icontains(Process.CommandLine, "findstr") or iendswith(Process.Path, "findstr.exe") or Process.Name == "FINDSTR.EXE") and (icontains(Process.CommandLine, " /v ") or icontains(Process.CommandLine, " -v ")) and (icontains(Process.CommandLine, " /l ") or icontains(Process.CommandLine, " -l ")) and icontains(Process.CommandLine, "\\\\")


[ActivityMonitoringRule platform=Windows]
# Detects the execution of WMIC in order to get a list of firewall and antivirus products
# Author: Nasreddine Bencherchali
RuleId = 15434e33-5027-4914-88d5-3d4145ec25a9
RuleName = Potential Product Reconnaissance Via Wmic.EXE
EventType = Process.Start
Tag = proc-start-potential-product-reconnaissance-via-wmic.exe
RiskScore = 50
Annotation = {"mitre_attack": ["T1047"]}
Query = (iendswith(Process.Path, "\\wmic.exe") or Process.Name == "wmic.exe") and icontains(Process.CommandLine, "Product")


[ActivityMonitoringRule platform=Windows]
# Detects execution of perl using the "-e"/"-E" flags. This is could be used as a way to launch a reverse shell or execute live perl code.
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleId = f426547a-e0f7-441a-b63e-854ac5bdf54d
RuleName = Perl Inline Command Execution
EventType = Process.Start
Tag = proc-start-perl-inline-command-execution
RiskScore = 50
Annotation = {"mitre_attack": ["T1059"]}
Query = (iendswith(Process.Path, "\\perl.exe") or Process.Name == "perl.exe") and icontains(Process.CommandLine, " -e")


[ActivityMonitoringRule platform=Windows]
# Detects the execution of WMIC with the "format" flag to potentially load XSL files.
# Adversaries abuse this functionality to execute arbitrary files while potentially bypassing application whitelisting defenses.
# Extensible Stylesheet Language (XSL) files are commonly used to describe the processing and rendering of data within XML files.
# Author: Timur Zinniatullin, oscd.community, Swachchhanda Shrawan Poudel
RuleId = 05c36dd6-79d6-4a9a-97da-3db20298ab2d
RuleName = XSL Script Execution Via WMIC.EXE
EventType = Process.Start
Tag = proc-start-xsl-script-execution-via-wmic.exe
RiskScore = 50
Annotation = {"mitre_attack": ["T1220"]}
Query = iendswith(Process.Path, "\\wmic.exe") and (icontains(Process.CommandLine, "/format") or icontains(Process.CommandLine, "-format")) and not (icontains(Process.CommandLine, "Format:List") or icontains(Process.CommandLine, "Format:htable") or icontains(Process.CommandLine, "Format:hform") or icontains(Process.CommandLine, "Format:table") or icontains(Process.CommandLine, "Format:mof") or icontains(Process.CommandLine, "Format:value") or icontains(Process.CommandLine, "Format:rawxml") or icontains(Process.CommandLine, "Format:xml") or icontains(Process.CommandLine, "Format:csv"))


[ActivityMonitoringRule platform=Windows]
# Detects potential DLL sideloading of "CCleanerReactivator.dll"
# Author: X__Junior
RuleId = 3735d5ac-d770-4da0-99ff-156b180bc600
RuleName = Potential CCleanerReactivator.DLL Sideloading
EventType = Image.Load
Tag = potential-ccleanerreactivator.dll-sideloading
RiskScore = 50
Annotation = {"mitre_attack": ["T1574.001", "T1574.002"]}
Query = iendswith(Image.Path, "\\CCleanerReactivator.dll") and not ((istartswith(Process.Path, "C:\\Program Files\\CCleaner\\") or istartswith(Process.Path, "C:\\Program Files (x86)\\CCleaner\\")) and iendswith(Process.Path, "\\CCleanerReactivator.exe"))
GenericProperty1 = Image.Path


[ActivityMonitoringRule platform=Windows]
# Detect malicious GPO modifications can be used to implement many other malicious behaviors.
# Author: frack113
RuleId = ada4b0c4-758b-46ac-9033-9004613a150d
RuleName = Modify Group Policy Settings
EventType = Process.Start
Tag = proc-start-modify-group-policy-settings
RiskScore = 50
Annotation = {"mitre_attack": ["T1484.001"]}
Query = (iendswith(Process.Path, "\\reg.exe") or Process.Name == "reg.exe") and icontains(Process.CommandLine, "\\SOFTWARE\\Policies\\Microsoft\\Windows\\System") and (icontains(Process.CommandLine, "GroupPolicyRefreshTimeDC") or icontains(Process.CommandLine, "GroupPolicyRefreshTimeOffsetDC") or icontains(Process.CommandLine, "GroupPolicyRefreshTime") or icontains(Process.CommandLine, "GroupPolicyRefreshTimeOffset") or icontains(Process.CommandLine, "EnableSmartScreen") or icontains(Process.CommandLine, "ShellSmartScreenLevel"))


[ActivityMonitoringRule platform=Windows]
# Detects execution of wmic utility with the "computersystem" flag in order to obtain information about the machine such as the domain, username, model, etc.
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleId = 9d7ca793-f6bd-471c-8d0f-11e68b2f0d2f
RuleName = Computer System Reconnaissance Via Wmic.EXE
EventType = Process.Start
Tag = proc-start-computer-system-reconnaissance-via-wmic.exe
RiskScore = 50
Annotation = {"mitre_attack": ["T1047"]}
Query = (iendswith(Process.Path, "\\wmic.exe") or Process.Name == "wmic.exe") and icontains(Process.CommandLine, "computersystem")


[ActivityMonitoringRule platform=Windows]
# Detects known WMI recon method to look for unquoted service paths using wmic. Often used by pentester and attacker enumeration scripts
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleId = 68bcd73b-37ef-49cb-95fc-edc809730be6
RuleName = Potential Unquoted Service Path Reconnaissance Via Wmic.EXE
EventType = Process.Start
Tag = proc-start-potential-unquoted-service-path-reconnaissance-via-wmic.exe
RiskScore = 50
Annotation = {"mitre_attack": ["T1047"]}
Query = (Process.Name == "wmic.exe" or iendswith(Process.Path, "\\WMIC.exe")) and icontains(Process.CommandLine, " service get ") and icontains(Process.CommandLine, "name,displayname,pathname,startmode")


[ActivityMonitoringRule platform=Windows]
# Executes SCT script using scrobj.dll from a command in entered into a specially prepared INF file.
# Author: frack113
RuleId = ce7cf472-6fcc-490a-9481-3786840b5d9b
RuleName = InfDefaultInstall.exe .inf Execution
EventType = Process.Start
Tag = proc-start-infdefaultinstall.exe-.inf-execution
RiskScore = 50
Annotation = {"mitre_attack": ["T1218"]}
Query = icontains(Process.CommandLine, "InfDefaultInstall.exe ") and icontains(Process.CommandLine, ".inf")


[ActivityMonitoringRule platform=Windows]
# Detects the use of Replace.exe which can be used to replace file with another file
# Author: frack113
RuleId = 9292293b-8496-4715-9db6-37028dcda4b3
RuleName = Replace.exe Usage
EventType = Process.Start
Tag = proc-start-replace.exe-usage
RiskScore = 50
Annotation = {"mitre_attack": ["T1105"]}
Query = iendswith(Process.Path, "\\replace.exe") and (icontains(Process.CommandLine, "/a") or icontains(Process.CommandLine, "-a"))


[ActivityMonitoringRule platform=Windows]
# Detects a suspicious command line execution that includes an URL and AppData string in the command line parameters as used by several droppers (js/vbs > powershell)
# Author: Florian Roth (Nextron Systems), Jonhnathan Ribeiro, oscd.community
RuleId = 1ac8666b-046f-4201-8aba-1951aaec03a3
RuleName = Command Line Execution with Suspicious URL and AppData Strings
EventType = Process.Start
Tag = proc-start-command-line-execution-with-suspicious-url-and-appdata-strings
RiskScore = 50
Annotation = {"mitre_attack": ["T1059.003", "T1059.001", "T1105"]}
Query = iendswith(Process.Path, "\\cmd.exe") and icontains(Process.CommandLine, "http") and icontains(Process.CommandLine, "://") and icontains(Process.CommandLine, "%AppData%")


[ActivityMonitoringRule platform=Windows]
# Detects the installation of VsCode tunnel (code-tunnel) as a service.
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleId = 30bf1789-379d-4fdc-900f-55cd0a90a801
RuleName = Visual Studio Code Tunnel Service Installation
EventType = Process.Start
Tag = proc-start-visual-studio-code-tunnel-service-installation
RiskScore = 50
Annotation = {"mitre_attack": ["T1071.001"]}
Query = icontains(Process.CommandLine, "tunnel ") and icontains(Process.CommandLine, "service") and icontains(Process.CommandLine, "internal-run") and icontains(Process.CommandLine, "tunnel-service.log")


[ActivityMonitoringRule platform=Windows]
# Detects suspicious command line reg.exe tool adding key to RUN key in Registry
# Author: Florian Roth (Nextron Systems)
RuleId = de587dce-915e-4218-aac4-835ca6af6f70
RuleName = Potential Persistence Attempt Via Run Keys Using Reg.EXE
EventType = Process.Start
Tag = proc-start-potential-persistence-attempt-via-run-keys-using-reg.exe
RiskScore = 50
Annotation = {"mitre_attack": ["T1547.001"]}
Query = icontains(Process.CommandLine, "reg") and icontains(Process.CommandLine, " ADD ") and icontains(Process.CommandLine, "Software\\Microsoft\\Windows\\CurrentVersion\\Run")


[ActivityMonitoringRule platform=Windows]
# Detects execution of "Diskshadow.exe" in script mode to execute an script with a potentially uncommon extension.
# Initial baselining of the allowed extension list is required.
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleId = 1dde5376-a648-492e-9e54-4241dd9b0c7f
RuleName = Diskshadow Script Mode - Uncommon Script Extension Execution
EventType = Process.Start
Tag = proc-start-diskshadow-script-mode-uncommon-script-extension-execution
RiskScore = 50
Annotation = {"mitre_attack": ["T1218"]}
Query = (Process.Name == "diskshadow.exe" or iendswith(Process.Path, "\\diskshadow.exe")) and (icontains(Process.CommandLine, "/s ") or icontains(Process.CommandLine, "-s ")) and not icontains(Process.CommandLine, ".txt")


[ActivityMonitoringRule platform=Windows]
# Uses the .NET InstallUtil.exe application in order to execute image without log
# Author: frack113
RuleId = d042284c-a296-4988-9be5-f424fadcc28c
RuleName = Suspicious Execution of InstallUtil Without Log
EventType = Process.Start
Tag = proc-start-suspicious-execution-of-installutil-without-log
RiskScore = 50
Query = iendswith(Process.Path, "\\InstallUtil.exe") and icontains(Process.Path, "Microsoft.NET\\Framework") and icontains(Process.CommandLine, "/logfile= ") and icontains(Process.CommandLine, "/LogToConsole=false")


[ActivityMonitoringRule platform=Windows]
# Detects the creation of a new PowerShell module in the first folder of the module directory structure "\WindowsPowerShell\Modules\malware\malware.psm1". This is somewhat an uncommon practice as legitimate modules often includes a version folder.
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleId = e8a52bbd-bced-459f-bd93-64db45ce7657
RuleName = Potential Suspicious PowerShell Module File Created
EventType = File.Create
Tag = potential-suspicious-powershell-module-file-created
RiskScore = 50
Query = File.Path like "*\\WindowsPowerShell\\Modules\\*\\.ps" or File.Path like "*\\WindowsPowerShell\\Modules\\*\\.dll"
GenericProperty1 = File.Path


[ActivityMonitoringRule platform=Windows]
# Detects child processes of Microsoft.NodejsTools.PressAnyKey.exe that can be used to execute any other binary
# Author: Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)
RuleId = a20391f8-76fb-437b-abc0-dba2df1952c6
RuleName = Visual Studio NodejsTools PressAnyKey Arbitrary Binary Execution
EventType = Process.Start
Tag = proc-start-visual-studio-nodejstools-pressanykey-arbitrary-binary-execution
RiskScore = 50
Annotation = {"mitre_attack": ["T1218"]}
Query = iendswith(Parent.Path, "\\Microsoft.NodejsTools.PressAnyKey.exe")
GenericProperty1 = Parent.Path


[ActivityMonitoringRule platform=Windows]
# Detects usage of the "Add-AppxPackage" or it's alias "Add-AppPackage" to install unsigned AppX packages
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleId = 37651c2a-42cd-4a69-ae0d-22a4349aa04a
RuleName = Unsigned AppX Installation Attempt Using Add-AppxPackage
EventType = Process.Start
Tag = proc-start-unsigned-appx-installation-attempt-using-add-appxpackage
RiskScore = 50
Query = (iendswith(Process.Path, "\\powershell.exe") or iendswith(Process.Path, "\\pwsh.exe") or Process.Name in ["PowerShell.EXE", "pwsh.dll"]) and (icontains(Process.CommandLine, "Add-AppPackage ") or icontains(Process.CommandLine, "Add-AppxPackage ")) and icontains(Process.CommandLine, " -AllowUnsigned")


[ActivityMonitoringRule platform=Windows]
# Detects loading of "Amsi.dll" by a living of the land process. This could be an indication of a "PowerShell without PowerShell" attack
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleId = 6ec86d9e-912e-4726-91a2-209359b999b9
RuleName = Amsi.DLL Loaded Via LOLBIN Process
EventType = Image.Load
Tag = amsi.dll-loaded-via-lolbin-process
RiskScore = 50
Query = iendswith(Image.Path, "\\amsi.dll") and (iendswith(Process.Path, "\\ExtExport.exe") or iendswith(Process.Path, "\\odbcconf.exe") or iendswith(Process.Path, "\\regsvr32.exe") or iendswith(Process.Path, "\\rundll32.exe"))
GenericProperty1 = Image.Path


[ActivityMonitoringRule platform=Windows]
# Detects potential evasion or obfuscation attempts using bogus path traversal via the commandline
# Author: Christian Burkard (Nextron Systems)
RuleId = 1327381e-6ab0-4f38-b583-4c1b8346a56b
RuleName = Potential Command Line Path Traversal Evasion Attempt
EventType = Process.Start
Tag = proc-start-potential-command-line-path-traversal-evasion-attempt
RiskScore = 50
Annotation = {"mitre_attack": ["T1036"]}
Query = (icontains(Process.Path, "\\Windows\\") and (icontains(Process.CommandLine, "\\..\\Windows\\") or icontains(Process.CommandLine, "\\..\\System32\\") or icontains(Process.CommandLine, "\\..\\..\\")) or icontains(Process.CommandLine, ".exe\\..\\")) and not (icontains(Process.CommandLine, "\\Google\\Drive\\googledrivesync.exe\\..\\") or icontains(Process.CommandLine, "\\Citrix\\Virtual Smart Card\\Citrix.Authentication.VirtualSmartcard.Launcher.exe\\..\\"))


[ActivityMonitoringRule platform=Windows]
# Detects the creation of file by the "node.exe" process in the ".vscode-server" directory. Could be a sign of remote file creation via VsCode tunnel feature
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleId = 56e05d41-ce99-4ecd-912d-93f019ee0b71
RuleName = Visual Studio Code Tunnel Remote File Creation
EventType = File.Create
Tag = visual-studio-code-tunnel-remote-file-creation
RiskScore = 50
Query = icontains(Process.Path, "\\servers\\Stable-") and iendswith(Process.Path, "\\server\\node.exe") and icontains(File.Path, "\\.vscode-server\\data\\User\\History\\")
GenericProperty1 = File.Path


[ActivityMonitoringRule platform=Windows]
# Detects a suspicious command line execution that invokes PowerShell with reference to an AppData folder
# Author: Florian Roth (Nextron Systems), Jonhnathan Ribeiro, oscd.community
RuleId = ac175779-025a-4f12-98b0-acdaeb77ea85
RuleName = PowerShell Script Run in AppData
EventType = Process.Start
Tag = proc-start-powershell-script-run-in-appdata
RiskScore = 50
Annotation = {"mitre_attack": ["T1059.001"]}
Query = (icontains(Process.CommandLine, "powershell.exe") or icontains(Process.CommandLine, "\\powershell") or icontains(Process.CommandLine, "\\pwsh") or icontains(Process.CommandLine, "pwsh.exe")) and icontains(Process.CommandLine, "/c ") and icontains(Process.CommandLine, "\\AppData\\") and (icontains(Process.CommandLine, "Local\\") or icontains(Process.CommandLine, "Roaming\\"))


[ActivityMonitoringRule platform=Windows]
# VisualUiaVerifyNative.exe is a Windows SDK that can be used for AWL bypass and is listed in Microsoft's recommended block rules.
# Author: Christopher Peacock @SecurePeacock, SCYTHE @scythe_io
RuleId = b30a8bc5-e21b-4ca2-9420-0a94019ac56a
RuleName = Use of VisualUiaVerifyNative.exe
EventType = Process.Start
Tag = proc-start-use-of-visualuiaverifynative.exe
RiskScore = 50
Annotation = {"mitre_attack": ["T1218"]}
Query = iendswith(Process.Path, "\\VisualUiaVerifyNative.exe") or Process.Name == "VisualUiaVerifyNative.exe"


[ActivityMonitoringRule platform=Windows]
# Detects suspicious processes based on name and location that access the windows credential manager and vault.
# Which can be a sign of credential stealing. Example case would be usage of mimikatz "dpapi::cred" function
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleId = 407aecb1-e762-4acf-8c7b-d087bcff3bb6
RuleName = Credential Manager Access By Uncommon Application
EventType = File.Read
Tag = credential-manager-access-by-uncommon-application
RiskScore = 50
Annotation = {"mitre_attack": ["T1003"]}
Query = (icontains(File.Path, "\\AppData\\Local\\Microsoft\\Credentials\\") or icontains(File.Path, "\\AppData\\Roaming\\Microsoft\\Credentials\\") or icontains(File.Path, "\\AppData\\Local\\Microsoft\\Vault\\") or icontains(File.Path, "\\ProgramData\\Microsoft\\Vault\\")) and not (istartswith(Process.Path, "C:\\Program Files\\") or istartswith(Process.Path, "C:\\Program Files (x86)\\") or istartswith(Process.Path, "C:\\Windows\\system32\\") or istartswith(Process.Path, "C:\\Windows\\SysWOW64\\"))
GenericProperty1 = File.Path


[ActivityMonitoringRule platform=Windows]
# Detects execution of the "cloudflared" tool to connect back to a tunnel. This was seen used by threat actors to maintain persistence and remote access to compromised networks.
# Author: Janantha Marasinghe, Nasreddine Bencherchali (Nextron Systems)
RuleId = 9a019ffc-3580-4c9d-8d87-079f7e8d3fd4
RuleName = Cloudflared Tunnel Execution
EventType = Process.Start
Tag = proc-start-cloudflared-tunnel-execution
RiskScore = 50
Annotation = {"mitre_attack": ["T1102", "T1090", "T1572"]}
Query = icontains(Process.CommandLine, " tunnel ") and icontains(Process.CommandLine, " run ") and (icontains(Process.CommandLine, " --config ") or icontains(Process.CommandLine, " --credentials-contents ") or icontains(Process.CommandLine, " --credentials-file ") or icontains(Process.CommandLine, " --token "))


[ActivityMonitoringRule platform=Windows]
# Detects the execution of netsh commands that configure a new port forwarding (PortProxy) rule
# Author: Florian Roth (Nextron Systems), omkar72, oscd.community, Swachchhanda Shrawan Poudel
RuleId = 322ed9ec-fcab-4f67-9a34-e7c6aef43614
RuleName = New Port Forwarding Rule Added Via Netsh.EXE
EventType = Process.Start
Tag = proc-start-new-port-forwarding-rule-added-via-netsh.exe
RiskScore = 50
Annotation = {"mitre_attack": ["T1090"]}
Query = (iendswith(Process.Path, "\\netsh.exe") or Process.Name == "netsh.exe") and (icontains(Process.CommandLine, "interface") and icontains(Process.CommandLine, "portproxy") and icontains(Process.CommandLine, "add") and icontains(Process.CommandLine, "v4tov4") or icontains(Process.CommandLine, "i ") and icontains(Process.CommandLine, "p ") and icontains(Process.CommandLine, "a ") and icontains(Process.CommandLine, "v ") or icontains(Process.CommandLine, "connectp") and icontains(Process.CommandLine, "listena") and icontains(Process.CommandLine, "c="))


[ActivityMonitoringRule platform=Windows]
# Detects DNS query to Devtunnels and Visual Studio Code tunnel domains. Attackers can be abuse these features to establish a reverse shell.
# Author: citron_ninja
RuleId = b3e6418f-7c7a-4fad-993a-93b65027a9f1
RuleName = DNS Query To Devtunnels And VsCode Tunnels
EventType = Dns.Query
Tag = dns-query-to-devtunnels-and-vscode-tunnels
RiskScore = 50
Annotation = {"mitre_attack": ["T1071.001"]}
Query = iendswith(Dns.QueryRequest, ".tunnels.api.visualstudio.com") or iendswith(Dns.QueryRequest, ".devtunnels.ms")
GenericProperty1 = Dns.QueryRequest


[ActivityMonitoringRule platform=Windows]
# Commandline to launch powershell with a base64 payload
# Author: frack113
RuleId = fb843269-508c-4b76-8b8d-88679db22ce7
RuleName = Suspicious Execution of Powershell with Base64
EventType = Process.Start
Tag = proc-start-suspicious-execution-of-powershell-with-base64
RiskScore = 50
Annotation = {"mitre_attack": ["T1059.001"]}
Query = (iendswith(Process.Path, "\\powershell.exe") or iendswith(Process.Path, "\\pwsh.exe")) and (icontains(Process.CommandLine, " -e ") or icontains(Process.CommandLine, " -en ") or icontains(Process.CommandLine, " -enc ") or icontains(Process.CommandLine, " -enco") or icontains(Process.CommandLine, " -ec ")) and not (icontains(Process.CommandLine, " -Encoding ") or icontains(Parent.Path, "C:\\Packages\\Plugins\\Microsoft.GuestConfiguration.ConfigurationforWindows\\") or icontains(Parent.Path, "\\gc_worker.exe"))
GenericProperty1 = Parent.Path


[ActivityMonitoringRule platform=Windows]
# Detects usage of an encoded/obfuscated version of an IP address (hex, octal, etc.) via command line
# Author: Nasreddine Bencherchali (Nextron Systems), X__Junior (Nextron Systems)
RuleId = 56d19cb4-6414-4769-9644-1ed35ffbb148
RuleName = Obfuscated IP Via CLI
EventType = Process.Start
Tag = proc-start-obfuscated-ip-via-cli
RiskScore = 50
Query = (iendswith(Process.Path, "\\ping.exe") or iendswith(Process.Path, "\\arp.exe")) and (icontains(Process.CommandLine, " 0x") or icontains(Process.CommandLine, "//0x") or icontains(Process.CommandLine, ".0x") or icontains(Process.CommandLine, ".00x") or icontains(Process.CommandLine, "http://%") and icontains(Process.CommandLine, "%2e") or regex_match(Process.CommandLine, r"https?://[0-9]{1,3}\\.[0-9]{1,3}\\.0[0-9]{3,4}") or regex_match(Process.CommandLine, r"https?://[0-9]{1,3}\\.0[0-9]{3,7}") or regex_match(Process.CommandLine, r"https?://0[0-9]{3,11}") or regex_match(Process.CommandLine, r"https?://(0[0-9]{1,11}\\.){3}0[0-9]{1,11}") or regex_match(Process.CommandLine, r"https?://0[0-9]{1,11}") or regex_match(Process.CommandLine, r" [0-7]{7,13}")) and not regex_match(Process.CommandLine, r"https?://((25[0-5]|(2[0-4]|1\\d|[1-9])?\\d)(\\.|\\b)){4}")


[ActivityMonitoringRule platform=Windows]
# The .SettingContent-ms file type was introduced in Windows 10 and allows a user to create "shortcuts" to various Windows 10 setting pages. These files are simply XML and contain paths to various Windows 10 settings binaries.
# Author: Sreeman
RuleId = 24de4f3b-804c-4165-b442-5a06a2302c7e
RuleName = Arbitrary Shell Command Execution Via Settingcontent-Ms
EventType = Process.Start
Tag = proc-start-arbitrary-shell-command-execution-via-settingcontent-ms
RiskScore = 50
Annotation = {"mitre_attack": ["T1204", "T1566.001"]}
Query = icontains(Process.CommandLine, ".SettingContent-ms") and not icontains(Process.CommandLine, "immersivecontrolpanel")


[ActivityMonitoringRule platform=Windows]
# Executes arbitrary PowerShell code using SyncAppvPublishingServer.vbs
# Author: frack113
RuleId = 36475a7d-0f6d-4dce-9b01-6aeb473bbaf1
RuleName = SyncAppvPublishingServer VBS Execute Arbitrary PowerShell Code
EventType = Process.Start
Tag = proc-start-syncappvpublishingserver-vbs-execute-arbitrary-powershell-code
RiskScore = 50
Annotation = {"mitre_attack": ["T1218", "T1216"]}
Query = icontains(Process.CommandLine, "\\SyncAppvPublishingServer.vbs") and icontains(Process.CommandLine, ";")


[ActivityMonitoringRule platform=Windows]
# Detects a suspicious call to the user32.dll function that locks the user workstation
# Author: frack113
RuleId = 3b5b0213-0460-4e3f-8937-3abf98ff7dcc
RuleName = Suspicious Workstation Locking via Rundll32
EventType = Process.Start
Tag = proc-start-suspicious-workstation-locking-via-rundll32
RiskScore = 50
Query = (iendswith(Process.Path, "\\rundll32.exe") or Process.Name == "RUNDLL32.EXE") and iendswith(Parent.Path, "\\cmd.exe") and icontains(Process.CommandLine, "user32.dll,") and icontains(Process.CommandLine, "LockWorkStation")
GenericProperty1 = Parent.Path


[ActivityMonitoringRule platform=Windows]
# Detects execution of the "del" builtin command to remove files using greedy/wildcard expression. This is often used by malware to delete content of folders that perhaps contains the initial malware infection or to delete evidence.
# Author: frack113 , X__Junior (Nextron Systems)
RuleId = 204b17ae-4007-471b-917b-b917b315c5db
RuleName = Greedy File Deletion Using Del
EventType = Process.Start
Tag = proc-start-greedy-file-deletion-using-del
RiskScore = 50
Annotation = {"mitre_attack": ["T1070.004"]}
Query = (iendswith(Process.Path, "\\cmd.exe") or Process.Name == "Cmd.Exe") and (icontains(Process.CommandLine, "del ") or icontains(Process.CommandLine, "erase ")) and (icontains(Process.CommandLine, "\\\*.au3") or icontains(Process.CommandLine, "\\\*.dll") or icontains(Process.CommandLine, "\\\*.exe") or icontains(Process.CommandLine, "\\\*.js"))


[ActivityMonitoringRule platform=Windows]
# Detect the use of "sc.exe" to change the startup type of a service to "disabled" or "demand"
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleId = 85c312b7-f44d-4a51-a024-d671c40b49fc
RuleName = Service StartupType Change Via Sc.EXE
EventType = Process.Start
Tag = proc-start-service-startuptype-change-via-sc.exe
RiskScore = 50
Annotation = {"mitre_attack": ["T1562.001"]}
Query = (iendswith(Process.Path, "\\sc.exe") or Process.Name == "sc.exe") and icontains(Process.CommandLine, " config ") and icontains(Process.CommandLine, "start") and (icontains(Process.CommandLine, "disabled") or icontains(Process.CommandLine, "demand"))


[ActivityMonitoringRule platform=Windows]
# Detects suspicious command line that adds an account to the local administrators/administrateurs group
# Author: Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)
RuleId = ad720b90-25ad-43ff-9b5e-5c841facc8e5
RuleName = Add User to Local Administrators Group
EventType = Process.Start
Tag = proc-start-add-user-to-local-administrators-group
RiskScore = 50
Annotation = {"mitre_attack": ["T1098"]}
Query = (icontains(Process.CommandLine, "localgroup ") and icontains(Process.CommandLine, " /add") or icontains(Process.CommandLine, "Add-LocalGroupMember ") and icontains(Process.CommandLine, " -Group ")) and (icontains(Process.CommandLine, " administrators ") or icontains(Process.CommandLine, " administrateur"))


[ActivityMonitoringRule platform=Windows]
# Detects when a user downloads a file by using CertOC.exe
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleId = 70ad0861-d1fe-491c-a45f-fa48148a300d
RuleName = File Download via CertOC.EXE
EventType = Process.Start
Tag = proc-start-file-download-via-certoc.exe
RiskScore = 50
Annotation = {"mitre_attack": ["T1105"]}
Query = (iendswith(Process.Path, "\\certoc.exe") or Process.Name == "CertOC.exe") and icontains(Process.CommandLine, "-GetCACAPS") and icontains(Process.CommandLine, "http")


[ActivityMonitoringRule platform=Windows]
# Detects any assembly DLL being loaded by an Office Product
# Author: Antonlovesdnb
RuleId = ff0f2b05-09db-4095-b96d-1b75ca24894a
RuleName = DotNET Assembly DLL Loaded Via Office Application
EventType = Image.Load
Tag = dotnet-assembly-dll-loaded-via-office-application
RiskScore = 50
Annotation = {"mitre_attack": ["T1204.002"]}
Query = (iendswith(Process.Path, "\\excel.exe") or iendswith(Process.Path, "\\mspub.exe") or iendswith(Process.Path, "\\onenote.exe") or iendswith(Process.Path, "\\onenoteim.exe") or iendswith(Process.Path, "\\outlook.exe") or iendswith(Process.Path, "\\powerpnt.exe") or iendswith(Process.Path, "\\winword.exe")) and istartswith(Image.Path, "C:\\Windows\\assembly\\")
GenericProperty1 = Image.Path


[ActivityMonitoringRule platform=Windows]
# Detects the deletion of files by the Sysinternals SDelete utility. It looks for the common name pattern used to rename files.
# Author: Roberto Rodriguez (Cyb3rWard0g), OTR (Open Threat Research)
RuleId = 6ddab845-b1b8-49c2-bbf7-1a11967f64bc
RuleName = File Deleted Via Sysinternals SDelete
EventType = File.Delete
Tag = file-deleted-via-sysinternals-sdelete
RiskScore = 50
Annotation = {"mitre_attack": ["T1070.004"]}
Query = (iendswith(File.Path, ".AAA") or iendswith(File.Path, ".ZZZ")) and not iendswith(File.Path, "\\Wireshark\\radius\\dictionary.alcatel-lucent.aaa")
GenericProperty1 = File.Path


[ActivityMonitoringRule platform=Windows]
# Detects file downloads directly from IP address URL using curl.exe
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleId = 9cc85849-3b02-4cb5-b371-3a1ff54f2218
RuleName = File Download From IP URL Via Curl.EXE
EventType = Process.Start
Tag = proc-start-file-download-from-ip-url-via-curl.exe
RiskScore = 50
Query = (iendswith(Process.Path, "\\curl.exe") or Process.Name == "curl.exe") and regex_match(Process.CommandLine, r"://[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}") and icontains(Process.CommandLine, "http") and (icontains(Process.CommandLine, " -O") or icontains(Process.CommandLine, "--remote-name") or icontains(Process.CommandLine, "--output")) and not (iendswith(Process.CommandLine, ".bat") or iendswith(Process.CommandLine, ".bat\"") or iendswith(Process.CommandLine, ".dat") or iendswith(Process.CommandLine, ".dat\"") or iendswith(Process.CommandLine, ".dll") or iendswith(Process.CommandLine, ".dll\"") or iendswith(Process.CommandLine, ".exe") or iendswith(Process.CommandLine, ".exe\"") or iendswith(Process.CommandLine, ".gif") or iendswith(Process.CommandLine, ".gif\"") or iendswith(Process.CommandLine, ".hta") or iendswith(Process.CommandLine, ".hta\"") or iendswith(Process.CommandLine, ".jpeg") or iendswith(Process.CommandLine, ".jpeg\"") or iendswith(Process.CommandLine, ".log") or iendswith(Process.CommandLine, ".log\"") or iendswith(Process.CommandLine, ".msi") or iendswith(Process.CommandLine, ".msi\"") or iendswith(Process.CommandLine, ".png") or iendswith(Process.CommandLine, ".png\"") or iendswith(Process.CommandLine, ".ps1") or iendswith(Process.CommandLine, ".ps1\"") or iendswith(Process.CommandLine, ".psm1") or iendswith(Process.CommandLine, ".psm1\"") or iendswith(Process.CommandLine, ".vbe") or iendswith(Process.CommandLine, ".vbe\"") or iendswith(Process.CommandLine, ".vbs") or iendswith(Process.CommandLine, ".vbs\"") or iendswith(Process.CommandLine, ".bat'") or iendswith(Process.CommandLine, ".dat'") or iendswith(Process.CommandLine, ".dll'") or iendswith(Process.CommandLine, ".exe'") or iendswith(Process.CommandLine, ".gif'") or iendswith(Process.CommandLine, ".hta'") or iendswith(Process.CommandLine, ".jpeg'") or iendswith(Process.CommandLine, ".log'") or iendswith(Process.CommandLine, ".msi'") or iendswith(Process.CommandLine, ".png'") or iendswith(Process.CommandLine, ".ps1'") or iendswith(Process.CommandLine, ".psm1'") or iendswith(Process.CommandLine, ".vbe'") or iendswith(Process.CommandLine, ".vbs'"))


[ActivityMonitoringRule platform=Windows]
# An adversary might use WMI to check if a certain remote service is running on a remote device.
# When the test completes, a service information will be displayed on the screen if it exists.
# A common feedback message is that "No instance(s) Available" if the service queried is not running.
# A common error message is "Node - (provided IP or default) ERROR Description =The RPC server is unavailable" if the provided remote host is unreachable
# Author: frack113, Nasreddine Bencherchali (Nextron Systems)
RuleId = 76f55eaa-d27f-4213-9d45-7b0e4b60bbae
RuleName = Service Reconnaissance Via Wmic.EXE
EventType = Process.Start
Tag = proc-start-service-reconnaissance-via-wmic.exe
RiskScore = 50
Annotation = {"mitre_attack": ["T1047"]}
Query = (iendswith(Process.Path, "\\WMIC.exe") or Process.Name == "wmic.exe") and icontains(Process.CommandLine, "service")


[ActivityMonitoringRule platform=Windows]
# Detects usage of findstr to identify and execute a lnk file as seen within the HHS redirect attack
# Author: Trent Liffick
RuleId = 33339be3-148b-4e16-af56-ad16ec6c7e7b
RuleName = Findstr Launching .lnk File
EventType = Process.Start
Tag = proc-start-findstr-launching-.lnk-file
RiskScore = 50
Annotation = {"mitre_attack": ["T1036", "T1202", "T1027.003"]}
Query = (iendswith(Process.Path, "\\find.exe") or iendswith(Process.Path, "\\findstr.exe") or Process.Name in ["FIND.EXE", "FINDSTR.EXE"]) and iendswith(Process.CommandLine, ".lnk")


[ActivityMonitoringRule platform=Windows]
# Detects execution of attacker-controlled WsmPty.xsl or WsmTxt.xsl via winrm.vbs and copied cscript.exe (can be renamed)
# Author: Julia Fomina, oscd.community
RuleId = 074e0ded-6ced-4ebd-8b4d-53f55908119d
RuleName = AWL Bypass with Winrm.vbs and Malicious WsmPty.xsl/WsmTxt.xsl
EventType = Process.Start
Tag = proc-start-awl-bypass-with-winrm.vbs-and-malicious-wsmpty.xsl/wsmtxt.xsl
RiskScore = 50
Annotation = {"mitre_attack": ["T1216"]}
Query = icontains(Process.CommandLine, "winrm") and (icontains(Process.CommandLine, "format:pretty") or icontains(Process.CommandLine, "format:\"pretty\"") or icontains(Process.CommandLine, "format:\"text\"") or icontains(Process.CommandLine, "format:text")) and not (istartswith(Process.Path, "C:\\Windows\\System32\\") or istartswith(Process.Path, "C:\\Windows\\SysWOW64\\"))


[ActivityMonitoringRule platform=Windows]
# Detects a suspicious child process of userinit
# Author: Florian Roth (Nextron Systems), Samir Bousseaden (idea)
RuleId = b655a06a-31c0-477a-95c2-3726b83d649d
RuleName = Suspicious Userinit Child Process
EventType = Process.Start
Tag = proc-start-suspicious-userinit-child-process
RiskScore = 50
Annotation = {"mitre_attack": ["T1055"]}
Query = iendswith(Parent.Path, "\\userinit.exe") and not (icontains(Process.CommandLine, "\\netlogon\\") or iendswith(Process.Path, "\\explorer.exe") or Process.Name == "explorer.exe")
GenericProperty1 = Parent.Path


[ActivityMonitoringRule platform=Windows]
# Detects usage of "MSOHTMED" to download arbitrary files
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleId = 459f2f98-397b-4a4a-9f47-6a5ec2f1c69d
RuleName = Arbitrary File Download Via MSOHTMED.EXE
EventType = Process.Start
Tag = proc-start-arbitrary-file-download-via-msohtmed.exe
RiskScore = 50
Annotation = {"mitre_attack": ["T1218"]}
Query = (iendswith(Process.Path, "\\MSOHTMED.exe") or Process.Name == "MsoHtmEd.exe") and (icontains(Process.CommandLine, "ftp://") or icontains(Process.CommandLine, "http://") or icontains(Process.CommandLine, "https://"))


[ActivityMonitoringRule platform=Windows]
# Detects usage of Sysinternals PsSuspend which can be abused to suspend critical processes
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleId = 48bbc537-b652-4b4e-bd1d-281172df448f
RuleName = Sysinternals PsSuspend Execution
EventType = Process.Start
Tag = proc-start-sysinternals-pssuspend-execution
RiskScore = 50
Annotation = {"mitre_attack": ["T1543.003"]}
Query = Process.Name == "pssuspend.exe" or iendswith(Process.Path, "\\pssuspend.exe") or iendswith(Process.Path, "\\pssuspend64.exe")


[ActivityMonitoringRule platform=Windows]
# Detects execution of "findstr" to search for common names of security tools. Attackers often pipe the results of recon commands such as "tasklist" or "whoami" to "findstr" in order to filter out the results.
# This detection focuses on the keywords that the attacker might use as a filter.
# Author: Nasreddine Bencherchali (Nextron Systems), frack113
RuleId = 4fe074b4-b833-4081-8f24-7dcfeca72b42
RuleName = Security Tools Keyword Lookup Via Findstr.EXE
EventType = Process.Start
Tag = proc-start-security-tools-keyword-lookup-via-findstr.exe
RiskScore = 50
Annotation = {"mitre_attack": ["T1518.001"]}
Query = (iendswith(Process.Path, "\\find.exe") or iendswith(Process.Path, "\\findstr.exe") or Process.Name in ["FIND.EXE", "FINDSTR.EXE"]) and (iendswith(Process.CommandLine, " avira") or iendswith(Process.CommandLine, " avira\"") or iendswith(Process.CommandLine, " cb") or iendswith(Process.CommandLine, " cb\"") or iendswith(Process.CommandLine, " cylance") or iendswith(Process.CommandLine, " cylance\"") or iendswith(Process.CommandLine, " defender") or iendswith(Process.CommandLine, " defender\"") or iendswith(Process.CommandLine, " kaspersky") or iendswith(Process.CommandLine, " kaspersky\"") or iendswith(Process.CommandLine, " kes") or iendswith(Process.CommandLine, " kes\"") or iendswith(Process.CommandLine, " mc") or iendswith(Process.CommandLine, " mc\"") or iendswith(Process.CommandLine, " sec") or iendswith(Process.CommandLine, " sec\"") or iendswith(Process.CommandLine, " sentinel") or iendswith(Process.CommandLine, " sentinel\"") or iendswith(Process.CommandLine, " symantec") or iendswith(Process.CommandLine, " symantec\"") or iendswith(Process.CommandLine, " virus") or iendswith(Process.CommandLine, " virus\""))


[ActivityMonitoringRule platform=Windows]
# Detects usage of the "cipher" built-in utility in order to overwrite deleted data from disk.
# Adversaries may destroy data and files on specific systems or in large numbers on a network to interrupt availability to systems, services, and network resources.
# Data destruction is likely to render stored data irrecoverable by forensic techniques through overwriting files or data on local and remote drives
# Author: frack113
RuleId = 4b046706-5789-4673-b111-66f25fe99534
RuleName = Deleted Data Overwritten Via Cipher.EXE
EventType = Process.Start
Tag = proc-start-deleted-data-overwritten-via-cipher.exe
RiskScore = 50
Annotation = {"mitre_attack": ["T1485"]}
Query = (Process.Name == "CIPHER.EXE" or iendswith(Process.Path, "\\cipher.exe")) and icontains(Process.CommandLine, " /w:")


[ActivityMonitoringRule platform=Windows]
# Detects changes to the registry values related to outlook security settings
# Author: frack113
RuleId = c3cefdf4-6703-4e1c-bad8-bf422fc5015a
RuleName = Outlook Security Settings Updated - Registry
EventType = Reg.Any
Tag = outlook-security-settings-updated-registry
RiskScore = 50
Annotation = {"mitre_attack": ["T1137"]}
Query = icontains(Reg.Key.Target, "\\SOFTWARE\\Microsoft\\Office\\") and icontains(Reg.Key.Target, "\\Outlook\\Security\\")
Hive = HKLM,HKU
GenericProperty1 = Reg.Key.Target


[ActivityMonitoringRule platform=Windows]
# Detects Obfuscated Powershell via COMPRESS OBFUSCATION
# Author: Timur Zinniatullin, oscd.community
RuleId = 7eedcc9d-9fdb-4d94-9c54-474e8affc0c7
RuleName = Invoke-Obfuscation COMPRESS OBFUSCATION
EventType = Process.Start
Tag = proc-start-invoke-obfuscation-compress-obfuscation
RiskScore = 50
Annotation = {"mitre_attack": ["T1027", "T1059.001"]}
Query = icontains(Process.CommandLine, "new-object") and icontains(Process.CommandLine, "text.encoding]::ascii") and (icontains(Process.CommandLine, "system.io.compression.deflatestream") or icontains(Process.CommandLine, "system.io.streamreader") or icontains(Process.CommandLine, "readtoend("))


[ActivityMonitoringRule platform=Windows]
# Detects script file execution (.js, .jse, .vba, .vbe, .vbs, .wsf) by Wscript/Cscript
# Author: Michael Haag
RuleId = 1e33157c-53b1-41ad-bbcc-780b80b58288
RuleName = WSF/JSE/JS/VBA/VBE File Execution Via Cscript/Wscript
EventType = Process.Start
Tag = proc-start-wsf/jse/js/vba/vbe-file-execution-via-cscript/wscript
RiskScore = 50
Annotation = {"mitre_attack": ["T1059.005", "T1059.007"]}
Query = (Process.Name in ["wscript.exe", "cscript.exe"] or iendswith(Process.Path, "\\wscript.exe") or iendswith(Process.Path, "\\cscript.exe")) and (icontains(Process.CommandLine, ".js") or icontains(Process.CommandLine, ".jse") or icontains(Process.CommandLine, ".vba") or icontains(Process.CommandLine, ".vbe") or icontains(Process.CommandLine, ".vbs") or icontains(Process.CommandLine, ".wsf"))


[ActivityMonitoringRule platform=Windows]
# Detects usage of bitsadmin downloading a file
# Author: Michael Haag, FPT.EagleEye
RuleId = d059842b-6b9d-4ed1-b5c3-5b89143c6ede
RuleName = File Download Via Bitsadmin
EventType = Process.Start
Tag = proc-start-file-download-via-bitsadmin
RiskScore = 50
Annotation = {"mitre_attack": ["T1197", "T1036.003"]}
Query = (iendswith(Process.Path, "\\bitsadmin.exe") or Process.Name == "bitsadmin.exe") and (icontains(Process.CommandLine, " /transfer ") or (icontains(Process.CommandLine, " /create ") or icontains(Process.CommandLine, " /addfile ")) and icontains(Process.CommandLine, "http"))


[ActivityMonitoringRule platform=Windows]
# The psr.exe captures desktop screenshots and saves them on the local machine
# Author: Beyu Denis, oscd.community
RuleId = 2158f96f-43c2-43cb-952a-ab4580f32382
RuleName = Psr.exe Capture Screenshots
EventType = Process.Start
Tag = proc-start-psr.exe-capture-screenshots
RiskScore = 50
Annotation = {"mitre_attack": ["T1113"]}
Query = iendswith(Process.Path, "\\Psr.exe") and icontains(Process.CommandLine, "/start")


[ActivityMonitoringRule platform=Windows]
# Detects potential DLL files being downloaded using the PowerShell Invoke-WebRequest cmdlet
# Author: Florian Roth (Nextron Systems), Hieu Tran
RuleId = 0f0450f3-8b47-441e-a31b-15a91dc243e2
RuleName = Potential DLL File Download Via PowerShell Invoke-WebRequest
EventType = Process.Start
Tag = proc-start-potential-dll-file-download-via-powershell-invoke-webrequest
RiskScore = 50
Annotation = {"mitre_attack": ["T1059.001", "T1105"]}
Query = (icontains(Process.CommandLine, "Invoke-WebRequest ") or icontains(Process.CommandLine, "IWR ")) and icontains(Process.CommandLine, "http") and icontains(Process.CommandLine, "OutFile") and icontains(Process.CommandLine, ".dll")


[ActivityMonitoringRule platform=Windows]
# Detects attempts to disable the Windows Firewall using PowerShell
# Author: Tim Rauch
RuleId = 12f6b752-042d-483e-bf9c-915a6d06ad75
RuleName = Windows Firewall Disabled via PowerShell
EventType = Process.Start
Tag = proc-start-windows-firewall-disabled-via-powershell
RiskScore = 50
Annotation = {"mitre_attack": ["T1562"]}
Query = (iendswith(Process.Path, "\\powershell.exe") or iendswith(Process.Path, "\\pwsh.exe") or iendswith(Process.Path, "\\powershell_ise.exe") or Process.Name in ["PowerShell.EXE", "pwsh.dll"]) and icontains(Process.CommandLine, "Set-NetFirewallProfile ") and icontains(Process.CommandLine, " -Enabled ") and icontains(Process.CommandLine, " False") and (icontains(Process.CommandLine, " -All ") or icontains(Process.CommandLine, "Public") or icontains(Process.CommandLine, "Domain") or icontains(Process.CommandLine, "Private"))


[ActivityMonitoringRule platform=Windows]
# Detects the execution of WMIC to query information on a remote system
# Author: frack113, Nasreddine Bencherchali (Nextron Systems)
RuleId = 7773b877-5abb-4a3e-b9c9-fd0369b59b00
RuleName = WMIC Remote Command Execution
EventType = Process.Start
Tag = proc-start-wmic-remote-command-execution
RiskScore = 50
Annotation = {"mitre_attack": ["T1047"]}
Query = (iendswith(Process.Path, "\\WMIC.exe") or Process.Name == "wmic.exe") and icontains(Process.CommandLine, "/node:") and not (icontains(Process.CommandLine, "/node:127.0.0.1 ") or icontains(Process.CommandLine, "/node:localhost "))


[ActivityMonitoringRule platform=Windows]
# Detects scheduled task creations or modification to be run with high privileges on a suspicious schedule type
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleId = 7a02e22e-b885-4404-b38b-1ddc7e65258a
RuleName = Suspicious Schtasks Schedule Type With High Privileges
EventType = Process.Start
Tag = proc-start-suspicious-schtasks-schedule-type-with-high-privileges
RiskScore = 50
Annotation = {"mitre_attack": ["T1053.005"]}
Query = (iendswith(Process.Path, "\\schtasks.exe") or Process.Name == "schtasks.exe") and (icontains(Process.CommandLine, " ONLOGON ") or icontains(Process.CommandLine, " ONSTART ") or icontains(Process.CommandLine, " ONCE ") or icontains(Process.CommandLine, " ONIDLE ")) and (icontains(Process.CommandLine, "NT AUT") or icontains(Process.CommandLine, " SYSTEM") or icontains(Process.CommandLine, "HIGHEST"))


[ActivityMonitoringRule platform=Windows]
# Adversaries may use Valid Accounts to log into a computer using the Remote Desktop Protocol (RDP). The adversary may then perform actions as the logged-on user.
# Author: frack113
RuleId = a197e378-d31b-41c0-9635-cfdf1c1bb423
RuleName = HackTool - WinRM Access Via Evil-WinRM
EventType = Process.Start
Tag = proc-start-hacktool-winrm-access-via-evil-winrm
RiskScore = 50
Annotation = {"mitre_attack": ["T1021.006"]}
Query = iendswith(Process.Path, "\\ruby.exe") and icontains(Process.CommandLine, "-i ") and icontains(Process.CommandLine, "-u ") and icontains(Process.CommandLine, "-p ")


[ActivityMonitoringRule platform=Windows]
# Detects usage of Msiexec.exe to install packages hosted remotely quietly
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleId = 8150732a-0c9d-4a99-82b9-9efb9b90c40c
RuleName = Suspicious Msiexec Quiet Install From Remote Location
EventType = Process.Start
Tag = proc-start-suspicious-msiexec-quiet-install-from-remote-location
RiskScore = 50
Annotation = {"mitre_attack": ["T1218.007"]}
Query = (iendswith(Process.Path, "\\msiexec.exe") or Process.Name == "msiexec.exe") and (icontains(Process.CommandLine, "/i") or icontains(Process.CommandLine, "-i") or icontains(Process.CommandLine, "/package") or icontains(Process.CommandLine, "-package") or icontains(Process.CommandLine, "/a") or icontains(Process.CommandLine, "-a") or icontains(Process.CommandLine, "/j") or icontains(Process.CommandLine, "-j")) and (icontains(Process.CommandLine, "/q") or icontains(Process.CommandLine, "-q")) and (icontains(Process.CommandLine, "http") or icontains(Process.CommandLine, "\\\\"))


[ActivityMonitoringRule platform=Windows]
# Detects processes that query known 3rd party registry keys that holds credentials via commandline
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleId = 87a476dc-0079-4583-a985-dee7a20a03de
RuleName = Enumeration for 3rd Party Creds From CLI
EventType = Process.Start
Tag = proc-start-enumeration-for-3rd-party-creds-from-cli
RiskScore = 50
Annotation = {"mitre_attack": ["T1552.002"]}
Query = icontains(Process.CommandLine, "\\Software\\SimonTatham\\PuTTY\\Sessions") or icontains(Process.CommandLine, "\\Software\\SimonTatham\\PuTTY\\SshHostKeys\\") or icontains(Process.CommandLine, "\\Software\\Mobatek\\MobaXterm\\") or icontains(Process.CommandLine, "\\Software\\WOW6432Node\\Radmin\\v3.0\\Server\\Parameters\\Radmin") or icontains(Process.CommandLine, "\\Software\\Aerofox\\FoxmailPreview") or icontains(Process.CommandLine, "\\Software\\Aerofox\\Foxmail\\V3.1") or icontains(Process.CommandLine, "\\Software\\IncrediMail\\Identities") or icontains(Process.CommandLine, "\\Software\\Qualcomm\\Eudora\\CommandLine") or icontains(Process.CommandLine, "\\Software\\RimArts\\B2\\Settings") or icontains(Process.CommandLine, "\\Software\\OpenVPN-GUI\\configs") or icontains(Process.CommandLine, "\\Software\\Martin Prikryl\\WinSCP 2\\Sessions") or icontains(Process.CommandLine, "\\Software\\FTPWare\\COREFTP\\Sites") or icontains(Process.CommandLine, "\\Software\\DownloadManager\\Passwords") or icontains(Process.CommandLine, "\\Software\\OpenSSH\\Agent\\Keys") or icontains(Process.CommandLine, "\\Software\\TightVNC\\Server") or icontains(Process.CommandLine, "\\Software\\ORL\\WinVNC3\\Password") or icontains(Process.CommandLine, "\\Software\\RealVNC\\WinVNC4")


[ActivityMonitoringRule platform=Windows]
# Detects DNS queries for subdomains related to MEGA sharing website
# Author: Aaron Greetham (@beardofbinary) - NCC Group
RuleId = 613c03ba-0779-4a53-8a1f-47f914a4ded3
RuleName = DNS Query To MEGA Hosting Website
EventType = Dns.Query
Tag = dns-query-to-mega-hosting-website
RiskScore = 50
Annotation = {"mitre_attack": ["T1567.002"]}
Query = icontains(Dns.QueryRequest, "userstorage.mega.co.nz")
GenericProperty1 = Dns.QueryRequest


[ActivityMonitoringRule platform=Windows]
# Detect use of icacls to deny access for everyone in Users folder sometimes used to hide malicious files
# Author: frack113
RuleId = 4ae81040-fc1c-4249-bfa3-938d260214d9
RuleName = Use Icacls to Hide File to Everyone
EventType = Process.Start
Tag = proc-start-use-icacls-to-hide-file-to-everyone
RiskScore = 50
Annotation = {"mitre_attack": ["T1564.001"]}
Query = (Process.Name == "iCACLS.EXE" or iendswith(Process.Path, "\\icacls.exe")) and icontains(Process.CommandLine, "C:\\Users\\") and icontains(Process.CommandLine, "/deny") and icontains(Process.CommandLine, "S-1-1-0:")


[ActivityMonitoringRule platform=Windows]
# Upload file, credentials or data exfiltration with Binary part of Windows Defender
# Author: frack113
RuleId = 1f0f6176-6482-4027-b151-00071af39d7e
RuleName = Suspicious ConfigSecurityPolicy Execution
EventType = Process.Start
Tag = proc-start-suspicious-configsecuritypolicy-execution
RiskScore = 50
Annotation = {"mitre_attack": ["T1567"]}
Query = (icontains(Process.CommandLine, "ConfigSecurityPolicy.exe") or iendswith(Process.Path, "\\ConfigSecurityPolicy.exe") or Process.Name == "ConfigSecurityPolicy.exe") and (icontains(Process.CommandLine, "https://") or icontains(Process.CommandLine, "http://") or icontains(Process.CommandLine, "ftp://"))


[ActivityMonitoringRule platform=Windows]
# Detects usage of "appcmd" to create new global URL rewrite rules. This behaviour has been observed being used by threat actors to add new rules so they can access their webshells.
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleId = 7c8af9b2-dcae-41a2-a9db-b28c288b5f08
RuleName = Suspicious IIS URL GlobalRules Rewrite Via AppCmd
EventType = Process.Start
Tag = proc-start-suspicious-iis-url-globalrules-rewrite-via-appcmd
RiskScore = 50
Query = (iendswith(Process.Path, "\\appcmd.exe") or Process.Name == "appcmd.exe") and icontains(Process.CommandLine, "set") and icontains(Process.CommandLine, "config") and icontains(Process.CommandLine, "section:system.webServer/rewrite/globalRules") and icontains(Process.CommandLine, "commit:")


[ActivityMonitoringRule platform=Windows]
# Detects the creation of hidden file/folder with the "::$index_allocation" stream. Which can be used as a technique to prevent access to folder and files from tooling such as "explorer.exe" and "powershell.exe"
# Author: Scoubi (@ScoubiMtl)
RuleId = a8f866e1-bdd4-425e-a27a-37619238d9c7
RuleName = Potential Hidden Directory Creation Via NTFS INDEX_ALLOCATION Stream
EventType = File.Create
Tag = potential-hidden-directory-creation-via-ntfs-index_allocation-stream
RiskScore = 50
Annotation = {"mitre_attack": ["T1564.004"]}
Query = icontains(File.Path, "::$index_allocation")
GenericProperty1 = File.Path


[ActivityMonitoringRule platform=Windows]
# Detects the use of the PhoneDeepLink parameter to potentially sideload a DLL file that does not exist. This non-existent DLL file is named "ShellChromeAPI.dll".
# Adversaries can drop their own renamed DLL and execute it via DeviceEnroller.exe using this parameter
# Author: @gott_cyber
RuleId = e173ad47-4388-4012-ae62-bd13f71c18a8
RuleName = Potential DLL Sideloading Via DeviceEnroller.EXE
EventType = Process.Start
Tag = proc-start-potential-dll-sideloading-via-deviceenroller.exe
RiskScore = 50
Annotation = {"mitre_attack": ["T1574.002"]}
Query = (iendswith(Process.Path, "\\deviceenroller.exe") or Process.Name == "deviceenroller.exe") and icontains(Process.CommandLine, "/PhoneDeepLink")


[ActivityMonitoringRule platform=Windows]
# Detects unusual processes accessing desktop.ini, which can be leveraged to alter how Explorer displays a folder's content (i.e. renaming files) without changing them on disk.
# Author: Maxime Thiebaut (@0xThiebaut), Tim Shelton (HAWK.IO)
RuleId = 81315b50-6b60-4d8f-9928-3466e1022515
RuleName = Suspicious desktop.ini Action
EventType = File.Create
Tag = suspicious-desktop.ini-action
RiskScore = 50
Annotation = {"mitre_attack": ["T1547.009"]}
Query = iendswith(File.Path, "\\desktop.ini") and not (istartswith(Process.Path, "C:\\Windows\\") or istartswith(Process.Path, "C:\\Program Files\\") or istartswith(Process.Path, "C:\\Program Files (x86)\\") or iendswith(Process.Path, "\\AppData\\Local\\JetBrains\\Toolbox\\bin\\7z.exe") and icontains(File.Path, "\\JetBrains\\apps\\") or istartswith(File.Path, "C:\\$WINDOWS.~BT\\NewOS\\"))
GenericProperty1 = File.Path


[ActivityMonitoringRule platform=Windows]
# Detects potential persistence using Appx DebugPath
# Author: frack113
RuleId = df4dc653-1029-47ba-8231-3c44238cc0ae
RuleName = Potential Persistence Using DebugPath
EventType = Reg.Any
Tag = potential-persistence-using-debugpath
RiskScore = 50
Annotation = {"mitre_attack": ["T1546.015"]}
Query = icontains(Reg.Key.Target, "Classes\\ActivatableClasses\\Package\\Microsoft.") and iendswith(Reg.Key.Target, "\\DebugPath") or icontains(Reg.Key.Target, "\\Software\\Microsoft\\Windows\\CurrentVersion\\PackagedAppXDebug\\Microsoft.") and iendswith(Reg.Key.Target, "\\(Default)")
Hive = HKLM,HKU
GenericProperty1 = Reg.Key.Target


[ActivityMonitoringRule platform=Windows]
# Detects installation of a new shim using sdbinst.exe.
# Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by application shims
# Author: Markus Neis
RuleId = 517490a7-115a-48c6-8862-1a481504d5a8
RuleName = Potential Shim Database Persistence via Sdbinst.EXE
EventType = Process.Start
Tag = proc-start-potential-shim-database-persistence-via-sdbinst.exe
RiskScore = 50
Annotation = {"mitre_attack": ["T1546.011"]}
Query = (iendswith(Process.Path, "\\sdbinst.exe") or Process.Name == "sdbinst.exe") and icontains(Process.CommandLine, ".sdb") and not (iendswith(Parent.Path, "\\msiexec.exe") and icontains(Process.CommandLine, "iisexpressshim.sdb"))
GenericProperty1 = Parent.Path


[ActivityMonitoringRule platform=Windows]
# Detects execution of ftp.exe script execution with the "-s" or "/s" flag and any child processes ran by ftp.exe
# Author: Victor Sergeev, oscd.community
RuleId = 06b401f4-107c-4ff9-947f-9ec1e7649f1e
RuleName = LOLBIN Execution Of The FTP.EXE Binary
EventType = Process.Start
Tag = proc-start-lolbin-execution-of-the-ftp.exe-binary
RiskScore = 50
Annotation = {"mitre_attack": ["T1059", "T1202"]}
Query = iendswith(Parent.Path, "\\ftp.exe") or (iendswith(Process.Path, "\\ftp.exe") or Process.Name == "ftp.exe") and (icontains(Process.CommandLine, "-s:") or icontains(Process.CommandLine, "/s:"))
GenericProperty1 = Parent.Path


[ActivityMonitoringRule platform=Windows]
# Detects usage of the PsLogList utility to dump event log in order to extract admin accounts and perform account discovery or delete events logs
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleId = aae1243f-d8af-40d8-ab20-33fc6d0c55bc
RuleName = Suspicious Use of PsLogList
EventType = Process.Start
Tag = proc-start-suspicious-use-of-psloglist
RiskScore = 50
Annotation = {"mitre_attack": ["T1087", "T1087.001", "T1087.002"]}
Query = (Process.Name == "psloglist.exe" or iendswith(Process.Path, "\\psloglist.exe") or iendswith(Process.Path, "\\psloglist64.exe")) and (icontains(Process.CommandLine, " security") or icontains(Process.CommandLine, " application") or icontains(Process.CommandLine, " system")) and (icontains(Process.CommandLine, " -d") or icontains(Process.CommandLine, " /d") or icontains(Process.CommandLine, " -x") or icontains(Process.CommandLine, " /x") or icontains(Process.CommandLine, " -s") or icontains(Process.CommandLine, " /s") or icontains(Process.CommandLine, " -c") or icontains(Process.CommandLine, " /c") or icontains(Process.CommandLine, " -g") or icontains(Process.CommandLine, " /g"))


[ActivityMonitoringRule platform=Windows]
# Detects the deletion of the PowerShell console History logs which may indicate an attempt to destroy forensic evidence
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleId = ff301988-c231-4bd0-834c-ac9d73b86586
RuleName = PowerShell Console History Logs Deleted
EventType = File.Delete
Tag = powershell-console-history-logs-deleted
RiskScore = 50
Annotation = {"mitre_attack": ["T1070"]}
Query = iendswith(File.Path, "\\PSReadLine\\ConsoleHost_history.txt")
GenericProperty1 = File.Path


[ActivityMonitoringRule platform=Windows]
# Detects execution of "dsquery.exe" for domain trust discovery
# Author: E.M. Anhaus, Tony Lambert, oscd.community, omkar72
RuleId = 3bad990e-4848-4a78-9530-b427d854aac0
RuleName = Domain Trust Discovery Via Dsquery
EventType = Process.Start
Tag = proc-start-domain-trust-discovery-via-dsquery
RiskScore = 50
Annotation = {"mitre_attack": ["T1482"]}
Query = (iendswith(Process.Path, "\\dsquery.exe") or Process.Name == "dsquery.exe") and icontains(Process.CommandLine, "trustedDomain")


[ActivityMonitoringRule platform=Windows]
# Detects various command line and scripting engines/processes such as "PowerShell", "Wscript", "Cmd", etc. spawning a "regsvr32" instance.
# Author: Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)
RuleId = ab37a6ec-6068-432b-a64e-2c7bf95b1d22
RuleName = Scripting/CommandLine Process Spawned Regsvr32
EventType = Process.Start
Tag = proc-start-scripting/commandline-process-spawned-regsvr32
RiskScore = 50
Annotation = {"mitre_attack": ["T1218.010"]}
Query = (iendswith(Parent.Path, "\\cmd.exe") or iendswith(Parent.Path, "\\cscript.exe") or iendswith(Parent.Path, "\\mshta.exe") or iendswith(Parent.Path, "\\powershell_ise.exe") or iendswith(Parent.Path, "\\powershell.exe") or iendswith(Parent.Path, "\\pwsh.exe") or iendswith(Parent.Path, "\\wscript.exe")) and iendswith(Process.Path, "\\regsvr32.exe") and not (Parent.Path == "C:\\Windows\\System32\\cmd.exe" and iendswith(Process.CommandLine, " /s C:\\Windows\\System32\\RpcProxy\\RpcProxy.dll"))
GenericProperty1 = Parent.Path


[ActivityMonitoringRule platform=Windows]
# Detects suspicious ways to download files or content using PowerShell
# Author: Florian Roth (Nextron Systems)
RuleId = 6e897651-f157-4d8f-aaeb-df8151488385
RuleName = PowerShell Web Download
EventType = Process.Start
Tag = proc-start-powershell-web-download
RiskScore = 50
Annotation = {"mitre_attack": ["T1059.001", "T1105"]}
Query = icontains(Process.CommandLine, ".DownloadString(") or icontains(Process.CommandLine, ".DownloadFile(") or icontains(Process.CommandLine, "Invoke-WebRequest ") or icontains(Process.CommandLine, "iwr ")


[ActivityMonitoringRule platform=Windows]
# Detects the presence of unicode characters which are homoglyphs, or identical in appearance, to ASCII letter characters.
# This is used as an obfuscation and masquerading techniques. Only "perfect" homoglyphs are included; these are characters that
# are indistinguishable from ASCII characters and thus may make excellent candidates for homoglyph attack characters.
# Author: Micah Babinski, @micahbabinski
RuleId = 4f1707b1-b50b-45b4-b5a2-3978b5a5d0d6
RuleName = Potential Homoglyph Attack Using Lookalike Characters in Filename
EventType = File.Create
Tag = potential-homoglyph-attack-using-lookalike-characters-in-filename
RiskScore = 50
Annotation = {"mitre_attack": ["T1036", "T1036.003"]}
Query = icontains(File.Path, "А") or icontains(File.Path, "В") or icontains(File.Path, "Е") or icontains(File.Path, "К") or icontains(File.Path, "М") or icontains(File.Path, "Н") or icontains(File.Path, "О") or icontains(File.Path, "Р") or icontains(File.Path, "С") or icontains(File.Path, "Т") or icontains(File.Path, "Х") or icontains(File.Path, "Ѕ") or icontains(File.Path, "І") or icontains(File.Path, "Ј") or icontains(File.Path, "Ү") or icontains(File.Path, "Ӏ") or icontains(File.Path, "Ԍ") or icontains(File.Path, "Ԛ") or icontains(File.Path, "Ԝ") or icontains(File.Path, "Α") or icontains(File.Path, "Β") or icontains(File.Path, "Ε") or icontains(File.Path, "Ζ") or icontains(File.Path, "Η") or icontains(File.Path, "Ι") or icontains(File.Path, "Κ") or icontains(File.Path, "Μ") or icontains(File.Path, "Ν") or icontains(File.Path, "Ο") or icontains(File.Path, "Ρ") or icontains(File.Path, "Τ") or icontains(File.Path, "Υ") or icontains(File.Path, "Χ") or icontains(File.Path, "а") or icontains(File.Path, "е") or icontains(File.Path, "о") or icontains(File.Path, "р") or icontains(File.Path, "с") or icontains(File.Path, "х") or icontains(File.Path, "ѕ") or icontains(File.Path, "і") or icontains(File.Path, "ӏ") or icontains(File.Path, "ј") or icontains(File.Path, "һ") or icontains(File.Path, "ԁ") or icontains(File.Path, "ԛ") or icontains(File.Path, "ԝ") or icontains(File.Path, "ο")
GenericProperty1 = File.Path


[ActivityMonitoringRule platform=Windows]
# Detects suspicious execution of 'Powercfg.exe' to change lock screen timeout
# Author: frack113
RuleId = f8d6a15e-4bc8-4c27-8e5d-2b10f0b73e5b
RuleName = Suspicious Powercfg Execution To Change Lock Screen Timeout
EventType = Process.Start
Tag = proc-start-suspicious-powercfg-execution-to-change-lock-screen-timeout
RiskScore = 50
Query = (iendswith(Process.Path, "\\powercfg.exe") or Process.Name == "PowerCfg.exe") and (icontains(Process.CommandLine, "/setacvalueindex ") and icontains(Process.CommandLine, "SCHEME_CURRENT") and icontains(Process.CommandLine, "SUB_VIDEO") and icontains(Process.CommandLine, "VIDEOCONLOCK") or icontains(Process.CommandLine, "-change ") and icontains(Process.CommandLine, "-standby-timeout-"))


[ActivityMonitoringRule platform=Windows]
# Detects the modification of PortProxy registry key which is used for port forwarding. For command execution see rule win_netsh_port_fwd.yml.
# Author: Andreas Hunkeler (@Karneades)
RuleId = a54f842a-3713-4b45-8c84-5f136fdebd3c
RuleName = PortProxy Registry Key
EventType = Reg.Any
Tag = portproxy-registry-key
RiskScore = 50
Annotation = {"mitre_attack": ["T1090"]}
Query = Reg.Key.Target == "HKLM\\SYSTEM\\CurrentControlSet\\Services\\PortProxy\\v4tov4\\tcp"
Hive = HKLM,HKU
GenericProperty1 = Reg.Key.Target


[ActivityMonitoringRule platform=Windows]
# Detects usage of "query.exe" a system binary to exfil information such as "sessions" and "processes" for later use
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleId = 53ef0cef-fa24-4f25-a34a-6c72dfa2e6e2
RuleName = Query Usage To Exfil Data
EventType = Process.Start
Tag = proc-start-query-usage-to-exfil-data
RiskScore = 50
Query = iendswith(Process.Path, ":\\Windows\\System32\\query.exe") and (icontains(Process.CommandLine, "session >") or icontains(Process.CommandLine, "process >"))


[ActivityMonitoringRule platform=Windows]
# Detects suspicious file based on their extension being created in "C:\PerfLogs\". Note that this directory mostly contains ".etl" files
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleId = bbb7e38c-0b41-4a11-b306-d2a457b7ac2b
RuleName = Suspicious File Created In PerfLogs
EventType = File.Create
Tag = suspicious-file-created-in-perflogs
RiskScore = 50
Annotation = {"mitre_attack": ["T1059"]}
Query = istartswith(File.Path, "C:\\PerfLogs\\") and (iendswith(File.Path, ".7z") or iendswith(File.Path, ".bat") or iendswith(File.Path, ".bin") or iendswith(File.Path, ".chm") or iendswith(File.Path, ".dll") or iendswith(File.Path, ".exe") or iendswith(File.Path, ".hta") or iendswith(File.Path, ".lnk") or iendswith(File.Path, ".ps1") or iendswith(File.Path, ".psm1") or iendswith(File.Path, ".py") or iendswith(File.Path, ".scr") or iendswith(File.Path, ".sys") or iendswith(File.Path, ".vbe") or iendswith(File.Path, ".vbs") or iendswith(File.Path, ".zip"))
GenericProperty1 = File.Path


[ActivityMonitoringRule platform=Windows]
# Detects potential DLL sideloading of "goopdate.dll", a DLL used by googleupdate.exe
# Author: X__Junior (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)
RuleId = b6188d2f-b3c4-4d2c-a17d-9706e0851af0
RuleName = Potential Goopdate.DLL Sideloading
EventType = Image.Load
Tag = potential-goopdate.dll-sideloading
RiskScore = 50
Annotation = {"mitre_attack": ["T1574.001", "T1574.002"]}
Query = iendswith(Image.Path, "\\goopdate.dll") and not (istartswith(Image.Path, "C:\\Program Files (x86)\\") or istartswith(Image.Path, "C:\\Program Files\\")) and not (icontains(Process.Path, "\\AppData\\Local\\Temp\\GUM") and icontains(Process.Path, ".tmp\\Dropbox") and icontains(Image.Path, "\\AppData\\Local\\Temp\\GUM") and icontains(Image.Path, ".tmp\\goopdate.dll"))
GenericProperty1 = Image.Path


[ActivityMonitoringRule platform=Windows]
# Detects execution of "rundll32.exe" with a parent process of Explorer.exe. This has been observed by variants of Raspberry Robin, as first reported by Red Canary.
# Author: CD_ROM_
RuleId = 1723e720-616d-4ddc-ab02-f7e3685a4713
RuleName = Rundll32 Spawned Via Explorer.EXE
EventType = Process.Start
Tag = proc-start-rundll32-spawned-via-explorer.exe
RiskScore = 50
Query = iendswith(Parent.Path, "\\explorer.exe") and (iendswith(Process.Path, "\\rundll32.exe") or Process.Name == "RUNDLL32.EXE") and not (icontains(Process.CommandLine, " C:\\Windows\\System32\\") or iendswith(Process.CommandLine, " -localserver 22d8c27b-47a1-48d1-ad08-7da7abd79617"))
GenericProperty1 = Parent.Path


[ActivityMonitoringRule platform=Windows]
# Adversaries can interact with the DACLs using built-in Windows commands takeown which can grant adversaries higher permissions on specific files and folders
# Author: frack113
RuleId = 554601fb-9b71-4bcc-abf4-21a611be4fde
RuleName = Suspicious Recursive Takeown
EventType = Process.Start
Tag = proc-start-suspicious-recursive-takeown
RiskScore = 50
Annotation = {"mitre_attack": ["T1222.001"]}
Query = iendswith(Process.Path, "\\takeown.exe") and icontains(Process.CommandLine, "/f ") and icontains(Process.CommandLine, "/r")


[ActivityMonitoringRule platform=Windows]
# Detects MsiExec loading a DLL and calling its DllUnregisterServer function
# Author: frack113
RuleId = 84f52741-8834-4a8c-a413-2eb2269aa6c8
RuleName = DllUnregisterServer Function Call Via Msiexec.EXE
EventType = Process.Start
Tag = proc-start-dllunregisterserver-function-call-via-msiexec.exe
RiskScore = 50
Annotation = {"mitre_attack": ["T1218.007"]}
Query = (iendswith(Process.Path, "\\msiexec.exe") or Process.Name == "\\msiexec.exe") and (icontains(Process.CommandLine, " /z ") or icontains(Process.CommandLine, " -z ")) and icontains(Process.CommandLine, ".dll")


[ActivityMonitoringRule platform=Windows]
# Detects potential malicious and unauthorized usage of bcdedit.exe
# Author: @neu5ron
RuleId = c9fbe8e9-119d-40a6-9b59-dd58a5d84429
RuleName = Potential Ransomware or Unauthorized MBR Tampering Via Bcdedit.EXE
EventType = Process.Start
Tag = proc-start-potential-ransomware-or-unauthorized-mbr-tampering-via-bcdedit.exe
RiskScore = 50
Annotation = {"mitre_attack": ["T1070", "T1542.003"]}
Query = (iendswith(Process.Path, "\\bcdedit.exe") or Process.Name == "bcdedit.exe") and (icontains(Process.CommandLine, "delete") or icontains(Process.CommandLine, "deletevalue") or icontains(Process.CommandLine, "import") or icontains(Process.CommandLine, "safeboot") or icontains(Process.CommandLine, "network"))


[ActivityMonitoringRule platform=Windows]
# Detects loading of "RjvPlatform.dll" by the "SystemResetPlatform.exe" binary which can be abused as a method of DLL side loading since the "$SysReset" directory isn't created by default.
# Author: X__Junior (Nextron Systems)
RuleId = 259dda31-b7a3-444f-b7d8-17f96e8a7d0d
RuleName = Potential RjvPlatform.DLL Sideloading From Default Location
EventType = Image.Load
Tag = potential-rjvplatform.dll-sideloading-from-default-location
RiskScore = 50
Annotation = {"mitre_attack": ["T1574.001", "T1574.002"]}
Query = Process.Path == "C:\\Windows\\System32\\SystemResetPlatform\\SystemResetPlatform.exe" and Image.Path == "C:\\$SysReset\\Framework\\Stack\\RjvPlatform.dll"
GenericProperty1 = Image.Path


[ActivityMonitoringRule platform=Windows]
# Detects the modification of an existing service in order to execute an arbitrary payload when the service is started or killed as a potential method for persistence.
# Author: Sreeman
RuleId = 38879043-7e1e-47a9-8d46-6bec88e201df
RuleName = Potential Persistence Attempt Via Existing Service Tampering
EventType = Process.Start
Tag = proc-start-potential-persistence-attempt-via-existing-service-tampering
RiskScore = 50
Annotation = {"mitre_attack": ["T1543.003", "T1574.011"]}
Query = icontains(Process.CommandLine, "sc ") and icontains(Process.CommandLine, "config ") and icontains(Process.CommandLine, "binpath=") or icontains(Process.CommandLine, "sc ") and icontains(Process.CommandLine, "failure") and icontains(Process.CommandLine, "command=") or (icontains(Process.CommandLine, "reg ") and icontains(Process.CommandLine, "add ") and icontains(Process.CommandLine, "FailureCommand") or icontains(Process.CommandLine, "reg ") and icontains(Process.CommandLine, "add ") and icontains(Process.CommandLine, "ImagePath")) and (icontains(Process.CommandLine, ".sh") or icontains(Process.CommandLine, ".exe") or icontains(Process.CommandLine, ".dll") or icontains(Process.CommandLine, ".bin$") or icontains(Process.CommandLine, ".bat") or icontains(Process.CommandLine, ".cmd") or icontains(Process.CommandLine, ".js") or icontains(Process.CommandLine, ".msh$") or icontains(Process.CommandLine, ".reg$") or icontains(Process.CommandLine, ".scr") or icontains(Process.CommandLine, ".ps") or icontains(Process.CommandLine, ".vb") or icontains(Process.CommandLine, ".jar") or icontains(Process.CommandLine, ".pl"))


[ActivityMonitoringRule platform=Windows]
# Adversaries may modify system firewalls in order to bypass controls limiting network usage
# Author: frack113
RuleId = 347906f3-e207-4d18-ae5b-a9403d6bcdef
RuleName = Netsh Allow Group Policy on Microsoft Defender Firewall
EventType = Process.Start
Tag = proc-start-netsh-allow-group-policy-on-microsoft-defender-firewall
RiskScore = 50
Annotation = {"mitre_attack": ["T1562.004"]}
Query = (iendswith(Process.Path, "\\netsh.exe") or Process.Name == "netsh.exe") and icontains(Process.CommandLine, "advfirewall") and icontains(Process.CommandLine, "firewall") and icontains(Process.CommandLine, "set") and icontains(Process.CommandLine, "rule") and icontains(Process.CommandLine, "group=") and icontains(Process.CommandLine, "new") and icontains(Process.CommandLine, "enable=Yes")


[ActivityMonitoringRule platform=Windows]
# Detects the execution of CustomShellHost binary where the child isn't located in 'C:\Windows\explorer.exe'
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleId = 84b14121-9d14-416e-800b-f3b829c5a14d
RuleName = Suspicious CustomShellHost Execution
EventType = Process.Start
Tag = proc-start-suspicious-customshellhost-execution
RiskScore = 50
Annotation = {"mitre_attack": ["T1216"]}
Query = iendswith(Parent.Path, "\\CustomShellHost.exe") and not Process.Path == "C:\\Windows\\explorer.exe"
GenericProperty1 = Parent.Path


[ActivityMonitoringRule platform=Windows]
# Detects Visual Studio Code tunnel execution. Attackers can abuse this functionality to establish a C2 channel
# Author: Nasreddine Bencherchali (Nextron Systems), citron_ninja
RuleId = 90d6bd71-dffb-4989-8d86-a827fedd6624
RuleName = Visual Studio Code Tunnel Execution
EventType = Process.Start
Tag = proc-start-visual-studio-code-tunnel-execution
RiskScore = 50
Annotation = {"mitre_attack": ["T1071.001"]}
Query = isnull(Process.Name) and iendswith(Process.CommandLine, ".exe tunnel") or icontains(Process.CommandLine, ".exe tunnel") and icontains(Process.CommandLine, "--name ") and icontains(Process.CommandLine, "--accept-server-license-terms") or iendswith(Parent.CommandLine, " tunnel") and iendswith(Process.Path, "\\cmd.exe") and icontains(Process.CommandLine, "/d /c ") and icontains(Process.CommandLine, "\\servers\\Stable-") and icontains(Process.CommandLine, "code-server.cmd")
GenericProperty1 = Parent.CommandLine


[ActivityMonitoringRule platform=Windows]
# Detects a potential command line flag anomaly related to "regsvr32" in which the "/i" flag is used without the "/n" which should be uncommon.
# Author: Florian Roth (Nextron Systems)
RuleId = b236190c-1c61-41e9-84b3-3fe03f6d76b0
RuleName = Potential Regsvr32 Commandline Flag Anomaly
EventType = Process.Start
Tag = proc-start-potential-regsvr32-commandline-flag-anomaly
RiskScore = 50
Annotation = {"mitre_attack": ["T1218.010"]}
Query = iendswith(Process.Path, "\\regsvr32.exe") and (icontains(Process.CommandLine, " /i:") or icontains(Process.CommandLine, " -i:")) and not (icontains(Process.CommandLine, " /n ") or icontains(Process.CommandLine, " -n "))


[ActivityMonitoringRule platform=Windows]
# Detects execution of the built-in script located in "C:\Windows\System32\gatherNetworkInfo.vbs". Which can be used to gather information about the target machine
# Author: blueteamer8699
RuleId = 575dce0c-8139-4e30-9295-1ee75969f7fe
RuleName = Potential Reconnaissance Activity Via GatherNetworkInfo.VBS
EventType = Process.Start
Tag = proc-start-potential-reconnaissance-activity-via-gathernetworkinfo.vbs
RiskScore = 50
Annotation = {"mitre_attack": ["T1615", "T1059.005"]}
Query = (iendswith(Process.Path, "\\cscript.exe") or iendswith(Process.Path, "\\wscript.exe") or Process.Name in ["cscript.exe", "wscript.exe"]) and icontains(Process.CommandLine, "gatherNetworkInfo.vbs")


[ActivityMonitoringRule platform=Windows]
# Detects the execution of the certutil with the "exportPFX" flag which allows the utility to export certificates.
# Author: Florian Roth (Nextron Systems), Jonhnathan Ribeiro, oscd.community, Nasreddine Bencherchali (Nextron Systems)
RuleId = 3ffd6f51-e6c1-47b7-94b4-c1e61d4117c5
RuleName = Certificate Exported Via Certutil.EXE
EventType = Process.Start
Tag = proc-start-certificate-exported-via-certutil.exe
RiskScore = 50
Annotation = {"mitre_attack": ["T1027"]}
Query = (iendswith(Process.Path, "\\certutil.exe") or Process.Name == "CertUtil.exe") and (icontains(Process.CommandLine, "-exportPFX ") or icontains(Process.CommandLine, "/exportPFX "))


[ActivityMonitoringRule platform=Windows]
# Detect the harvesting of wifi credentials using netsh.exe
# Author: Andreas Hunkeler (@Karneades), oscd.community
RuleId = 42b1a5b8-353f-4f10-b256-39de4467faff
RuleName = Harvesting Of Wifi Credentials Via Netsh.EXE
EventType = Process.Start
Tag = proc-start-harvesting-of-wifi-credentials-via-netsh.exe
RiskScore = 50
Annotation = {"mitre_attack": ["T1040"]}
Query = (iendswith(Process.Path, "\\netsh.exe") or Process.Name == "netsh.exe") and icontains(Process.CommandLine, "wlan") and icontains(Process.CommandLine, " s") and icontains(Process.CommandLine, " p") and icontains(Process.CommandLine, " k") and icontains(Process.CommandLine, "=clear")


[ActivityMonitoringRule platform=Windows]
# Detects the presence of the keywords "Wscript", "Shell" and "Run" in the command, which could indicate a suspicious activity
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleId = 2c28c248-7f50-417a-9186-a85b223010ee
RuleName = Wscript Shell Run In CommandLine
EventType = Process.Start
Tag = proc-start-wscript-shell-run-in-commandline
RiskScore = 50
Annotation = {"mitre_attack": ["T1059"]}
Query = icontains(Process.CommandLine, "Wscript.") and icontains(Process.CommandLine, ".Shell") and icontains(Process.CommandLine, ".Run")


[ActivityMonitoringRule platform=Windows]
# Detects the creation of a new office macro files on the systems via an application (browser, mail client).
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleId = 0e29e3a7-1ad8-40aa-b691-9f82ecd33d66
RuleName = Office Macro File Download
EventType = File.Create
Tag = office-macro-file-download
RiskScore = 50
Annotation = {"mitre_attack": ["T1566.001"]}
Query = (iendswith(Process.Path, "\\RuntimeBroker.exe") or iendswith(Process.Path, "\\outlook.exe") or iendswith(Process.Path, "\\thunderbird.exe") or iendswith(Process.Path, "\\brave.exe") or iendswith(Process.Path, "\\chrome.exe") or iendswith(Process.Path, "\\firefox.exe") or iendswith(Process.Path, "\\iexplore.exe") or iendswith(Process.Path, "\\maxthon.exe") or iendswith(Process.Path, "\\MicrosoftEdge.exe") or iendswith(Process.Path, "\\msedge.exe") or iendswith(Process.Path, "\\msedgewebview2.exe") or iendswith(Process.Path, "\\opera.exe") or iendswith(Process.Path, "\\safari.exe") or iendswith(Process.Path, "\\seamonkey.exe") or iendswith(Process.Path, "\\vivaldi.exe") or iendswith(Process.Path, "\\whale.exe")) and (iendswith(File.Path, ".docm") or iendswith(File.Path, ".dotm") or iendswith(File.Path, ".xlsm") or iendswith(File.Path, ".xltm") or iendswith(File.Path, ".potm") or iendswith(File.Path, ".pptm") or icontains(File.Path, ".docm:Zone") or icontains(File.Path, ".dotm:Zone") or icontains(File.Path, ".xlsm:Zone") or icontains(File.Path, ".xltm:Zone") or icontains(File.Path, ".potm:Zone") or icontains(File.Path, ".pptm:Zone"))
GenericProperty1 = File.Path


[ActivityMonitoringRule platform=Windows]
# Detects DSParse DLL being loaded by an Office Product
# Author: Antonlovesdnb
RuleId = a2a3b925-7bb0-433b-b508-db9003263cc4
RuleName = Active Directory Parsing DLL Loaded Via Office Application
EventType = Image.Load
Tag = active-directory-parsing-dll-loaded-via-office-application
RiskScore = 50
Annotation = {"mitre_attack": ["T1204.002"]}
Query = (iendswith(Process.Path, "\\excel.exe") or iendswith(Process.Path, "\\mspub.exe") or iendswith(Process.Path, "\\onenote.exe") or iendswith(Process.Path, "\\onenoteim.exe") or iendswith(Process.Path, "\\outlook.exe") or iendswith(Process.Path, "\\powerpnt.exe") or iendswith(Process.Path, "\\winword.exe")) and icontains(Image.Path, "\\dsparse.dll")
GenericProperty1 = Image.Path


[ActivityMonitoringRule platform=Windows]
# Detects cases in which a user uses the built-in Windows utility gpresult to display the Resultant Set of Policy (RSoP) information
# Author: frack113
RuleId = e56d3073-83ff-4021-90fe-c658e0709e72
RuleName = Gpresult Display Group Policy Information
EventType = Process.Start
Tag = proc-start-gpresult-display-group-policy-information
RiskScore = 50
Annotation = {"mitre_attack": ["T1615"]}
Query = iendswith(Process.Path, "\\gpresult.exe") and (icontains(Process.CommandLine, "/z") or icontains(Process.CommandLine, "/v"))


[ActivityMonitoringRule platform=Windows]
# Detects the usage of "hh.exe" to execute ".chm" files.
# Author: E.M. Anhaus (originally from Atomic Blue Detections, Dan Beavin), oscd.community
RuleId = 68c8acb4-1b60-4890-8e82-3ddf7a6dba84
RuleName = HH.EXE Execution
EventType = Process.Start
Tag = proc-start-hh.exe-execution
RiskScore = 50
Annotation = {"mitre_attack": ["T1218.001"]}
Query = (Process.Name == "HH.exe" or iendswith(Process.Path, "\\hh.exe")) and icontains(Process.CommandLine, ".chm")


[ActivityMonitoringRule platform=Windows]
# Detects suspicious PowerShell invocation command parameters
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleId = 536e2947-3729-478c-9903-745aaffe60d2
RuleName = Suspicious PowerShell Invocations - Specific - ProcessCreation
EventType = Process.Start
Tag = proc-start-suspicious-powershell-invocations-specific-processcreation
RiskScore = 50
Query = (icontains(Process.CommandLine, "-nop") and icontains(Process.CommandLine, " -w ") and icontains(Process.CommandLine, "hidden") and icontains(Process.CommandLine, " -c ") and icontains(Process.CommandLine, "[Convert]::FromBase64String") or icontains(Process.CommandLine, " -w ") and icontains(Process.CommandLine, "hidden") and icontains(Process.CommandLine, "-noni") and icontains(Process.CommandLine, "-nop") and icontains(Process.CommandLine, " -c ") and icontains(Process.CommandLine, "iex") and icontains(Process.CommandLine, "New-Object") or icontains(Process.CommandLine, " -w ") and icontains(Process.CommandLine, "hidden") and icontains(Process.CommandLine, "-ep") and icontains(Process.CommandLine, "bypass") and icontains(Process.CommandLine, "-Enc") or icontains(Process.CommandLine, "powershell") and icontains(Process.CommandLine, "reg") and icontains(Process.CommandLine, "add") and icontains(Process.CommandLine, "\\software\\") or icontains(Process.CommandLine, "bypass") and icontains(Process.CommandLine, "-noprofile") and icontains(Process.CommandLine, "-windowstyle") and icontains(Process.CommandLine, "hidden") and icontains(Process.CommandLine, "new-object") and icontains(Process.CommandLine, "system.net.webclient") and icontains(Process.CommandLine, ".download") or icontains(Process.CommandLine, "iex") and icontains(Process.CommandLine, "New-Object") and icontains(Process.CommandLine, "Net.WebClient") and icontains(Process.CommandLine, ".Download")) and not (icontains(Process.CommandLine, "(New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1") or icontains(Process.CommandLine, "Write-ChocolateyWarning"))


[ActivityMonitoringRule platform=Windows]
# Dynamic-link libraries (DLLs) that are specified in the AppCertDLLs value in the Registry key can be abused to obtain persistence and privilege escalation
# by causing a malicious DLL to be loaded and run in the context of separate processes on the computer.
# Author: Ilyas Ochkov, oscd.community
RuleId = 6aa1d992-5925-4e9f-a49b-845e51d1de01
RuleName = New DLL Added to AppCertDlls Registry Key
EventType = Reg.Any
Tag = new-dll-added-to-appcertdlls-registry-key
RiskScore = 50
Annotation = {"mitre_attack": ["T1546.009"]}
Query = Reg.Key.Target == "HKLM\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\AppCertDlls" or Reg.Key.Path.New == "HKLM\\SYSTEM\\CurentControlSet\\Control\\Session Manager\\AppCertDlls"
Hive = HKLM,HKU
GenericProperty1 = Reg.Key.Path.New
GenericProperty2 = Reg.Key.Target


[ActivityMonitoringRule platform=Windows]
# Detects the removal of a port or application rule in the Windows Firewall configuration using netsh
# Author: frack113
RuleId = 1a5fefe6-734f-452e-a07d-fc1c35bce4b2
RuleName = Firewall Rule Deleted Via Netsh.EXE
EventType = Process.Start
Tag = proc-start-firewall-rule-deleted-via-netsh.exe
RiskScore = 50
Annotation = {"mitre_attack": ["T1562.004"]}
Query = (iendswith(Process.Path, "\\netsh.exe") or Process.Name == "netsh.exe") and icontains(Process.CommandLine, "firewall") and icontains(Process.CommandLine, "delete ") and not (iendswith(Parent.Path, "\\Dropbox.exe") and icontains(Process.CommandLine, "name=Dropbox"))
GenericProperty1 = Parent.Path


[ActivityMonitoringRule platform=Windows]
# Detects execution of python using the "-c" flag. This is could be used as a way to launch a reverse shell or execute live python code.
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleId = 899133d5-4d7c-4a7f-94ee-27355c879d90
RuleName = Python Inline Command Execution
EventType = Process.Start
Tag = proc-start-python-inline-command-execution
RiskScore = 50
Annotation = {"mitre_attack": ["T1059"]}
Query = (Process.Name == "python.exe" or iendswith(Process.Path, "python.exe") or iendswith(Process.Path, "python3.exe") or iendswith(Process.Path, "python2.exe")) and icontains(Process.CommandLine, " -c") and not (istartswith(Parent.Path, "C:\\Program Files\\Python") and iendswith(Parent.Path, "\\python.exe") and icontains(Parent.CommandLine, "-E -s -m ensurepip -U --default-pip") or iendswith(Parent.Path, "\\AppData\\Local\\Programs\\Microsoft VS Code\\Code.exe"))
GenericProperty1 = Parent.Path
GenericProperty2 = Parent.CommandLine


[ActivityMonitoringRule platform=Windows]
# Detects DNS queries made by "AppInstaller.EXE". The AppInstaller is the default handler for the "ms-appinstaller" URI. It attempts to load/install a package from the referenced URL
# Author: frack113
RuleId = 7cff77e1-9663-46a3-8260-17f2e1aa9d0a
RuleName = AppX Package Installation Attempts Via AppInstaller.EXE
EventType = Dns.Query
Tag = appx-package-installation-attempts-via-appinstaller.exe
RiskScore = 50
Annotation = {"mitre_attack": ["T1105"]}
Query = istartswith(Process.Path, "C:\\Program Files\\WindowsApps\\Microsoft.DesktopAppInstaller_") and iendswith(Process.Path, "\\AppInstaller.exe")


[ActivityMonitoringRule platform=Windows]
# Detects Rclone config files being created
# Author: Aaron Greetham (@beardofbinary) - NCC Group
RuleId = 34986307-b7f4-49be-92f3-e7a4d01ac5db
RuleName = Rclone Config File Creation
EventType = File.Create
Tag = rclone-config-file-creation
RiskScore = 50
Annotation = {"mitre_attack": ["T1567.002"]}
Query = icontains(File.Path, ":\\Users\\") and icontains(File.Path, "\\.config\\rclone\\")
GenericProperty1 = File.Path


[ActivityMonitoringRule platform=Windows]
# An adversary may use legitimate desktop support and remote access software, such as Team Viewer, Go2Assist, LogMein, AmmyyAdmin, etc, to establish an interactive command and control channel to target systems within networks.
# These services are commonly used as legitimate technical support software, and may be allowed by application control within a target environment.
# Remote access tools like VNC, Ammyy, and Teamviewer are used frequently when compared with other legitimate software commonly used by adversaries. (Citation: Symantec Living off the Land)
# Author: frack113
RuleId = fec96f39-988b-4586-b746-b93d59fd1922
RuleName = ScreenConnect Temporary Installation Artefact
EventType = File.Create
Tag = screenconnect-temporary-installation-artefact
RiskScore = 50
Annotation = {"mitre_attack": ["T1219"]}
Query = icontains(File.Path, "\\Bin\\ScreenConnect.")
GenericProperty1 = File.Path


[ActivityMonitoringRule platform=Windows]
# Detects potential DLL sideloading of "libcurl.dll" by the "gup.exe" process from an uncommon location
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleId = e49b5745-1064-4ac1-9a2e-f687bc2dd37e
RuleName = Potential DLL Sideloading Of Libcurl.DLL Via GUP.EXE
EventType = Image.Load
Tag = potential-dll-sideloading-of-libcurl.dll-via-gup.exe
RiskScore = 50
Annotation = {"mitre_attack": ["T1574.001", "T1574.002"]}
Query = iendswith(Process.Path, "\\gup.exe") and iendswith(Image.Path, "\\libcurl.dll") and not iendswith(Process.Path, "\\Notepad++\\updater\\GUP.exe")
GenericProperty1 = Image.Path


[ActivityMonitoringRule platform=Windows]
# Detects the execution of Xwizard tool with specific arguments which utilized to run custom class properties.
# Author: Ensar Şamil, @sblmsrsn, @oscd_initiative
RuleId = 53d4bb30-3f36-4e8a-b078-69d36c4a79ff
RuleName = Custom Class Execution via Xwizard
EventType = Process.Start
Tag = proc-start-custom-class-execution-via-xwizard
RiskScore = 50
Annotation = {"mitre_attack": ["T1218"]}
Query = iendswith(Process.Path, "\\xwizard.exe") and regex_match(Process.CommandLine, r"\\{[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\}")


[ActivityMonitoringRule platform=Windows]
# A general detection for processes creating PFX files. This could be an indicator of an adversary exporting a local certificate to a PFX file.
# Author: Roberto Rodriguez (Cyb3rWard0g), OTR (Open Threat Research)
RuleId = dca1b3e8-e043-4ec8-85d7-867f334b5724
RuleName = Suspicious PFX File Creation
EventType = File.Create
Tag = suspicious-pfx-file-creation
RiskScore = 50
Annotation = {"mitre_attack": ["T1552.004"]}
Query = iendswith(File.Path, ".pfx") and not (icontains(File.Path, "\\Templates\\Windows\\Windows_TemporaryKey.pfx") and icontains(File.Path, "\\CMake\\"))
GenericProperty1 = File.Path


[ActivityMonitoringRule platform=Windows]
# Detect attacker collecting audio via SoundRecorder application.
# Author: E.M. Anhaus (originally from Atomic Blue Detections, Endgame), oscd.community
RuleId = 83865853-59aa-449e-9600-74b9d89a6d6e
RuleName = Audio Capture via SoundRecorder
EventType = Process.Start
Tag = proc-start-audio-capture-via-soundrecorder
RiskScore = 50
Annotation = {"mitre_attack": ["T1123"]}
Query = iendswith(Process.Path, "\\SoundRecorder.exe") and icontains(Process.CommandLine, "/FILE")


[ActivityMonitoringRule platform=Windows]
# Once established within a system or network, an adversary may use automated techniques for collecting internal data.
# Author: frack113
RuleId = f576a613-2392-4067-9d1a-9345fb58d8d1
RuleName = Automated Collection Command Prompt
EventType = Process.Start
Tag = proc-start-automated-collection-command-prompt
RiskScore = 50
Annotation = {"mitre_attack": ["T1119", "T1552.001"]}
Query = (icontains(Process.CommandLine, ".doc") or icontains(Process.CommandLine, ".docx") or icontains(Process.CommandLine, ".xls") or icontains(Process.CommandLine, ".xlsx") or icontains(Process.CommandLine, ".ppt") or icontains(Process.CommandLine, ".pptx") or icontains(Process.CommandLine, ".rtf") or icontains(Process.CommandLine, ".pdf") or icontains(Process.CommandLine, ".txt")) and (icontains(Process.CommandLine, "dir ") and icontains(Process.CommandLine, " /b ") and icontains(Process.CommandLine, " /s ") or Process.Name == "FINDSTR.EXE" and (icontains(Process.CommandLine, " /e ") or icontains(Process.CommandLine, " /si ")))


[ActivityMonitoringRule platform=Windows]
# Detects execution of GfxDownloadWrapper.exe with a URL as an argument to download file.
# Author: Victor Sergeev, oscd.community
RuleId = eee00933-a761-4cd0-be70-c42fe91731e7
RuleName = Arbitrary File Download Via GfxDownloadWrapper.EXE
EventType = Process.Start
Tag = proc-start-arbitrary-file-download-via-gfxdownloadwrapper.exe
RiskScore = 50
Annotation = {"mitre_attack": ["T1105"]}
Query = iendswith(Process.Path, "\\GfxDownloadWrapper.exe") and (icontains(Process.CommandLine, "http://") or icontains(Process.CommandLine, "https://")) and not icontains(Process.CommandLine, "https://gameplayapi.intel.com/")


[ActivityMonitoringRule platform=Windows]
# Detects potentially suspicious child processes of "Diskshadow.exe". This could be an attempt to bypass parent/child relationship detection or application whitelisting rules.
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleId = 9f546b25-5f12-4c8d-8532-5893dcb1e4b8
RuleName = Potentially Suspicious Child Process Of DiskShadow.EXE
EventType = Process.Start
Tag = proc-start-potentially-suspicious-child-process-of-diskshadow.exe
RiskScore = 50
Annotation = {"mitre_attack": ["T1218"]}
Query = iendswith(Parent.Path, "\\diskshadow.exe") and (iendswith(Process.Path, "\\certutil.exe") or iendswith(Process.Path, "\\cscript.exe") or iendswith(Process.Path, "\\mshta.exe") or iendswith(Process.Path, "\\powershell.exe") or iendswith(Process.Path, "\\pwsh.exe") or iendswith(Process.Path, "\\regsvr32.exe") or iendswith(Process.Path, "\\rundll32.exe") or iendswith(Process.Path, "\\wscript.exe"))
GenericProperty1 = Parent.Path


[ActivityMonitoringRule platform=Windows]
# Detects an attempt to execute code or create service on remote host via winrm.vbs.
# Author: Julia Fomina, oscd.community
RuleId = 9df0dd3a-1a5c-47e3-a2bc-30ed177646a0
RuleName = Remote Code Execute via Winrm.vbs
EventType = Process.Start
Tag = proc-start-remote-code-execute-via-winrm.vbs
RiskScore = 50
Annotation = {"mitre_attack": ["T1216"]}
Query = (iendswith(Process.Path, "\\cscript.exe") or Process.Name == "cscript.exe") and icontains(Process.CommandLine, "winrm") and icontains(Process.CommandLine, "invoke Create wmicimv2/Win32_") and icontains(Process.CommandLine, "-r:http")


[ActivityMonitoringRule platform=Windows]
# Detects usage of wmic to start or stop a service
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleId = 0b7163dc-7eee-4960-af17-c0cd517f92da
RuleName = Service Started/Stopped Via Wmic.EXE
EventType = Process.Start
Tag = proc-start-service-started/stopped-via-wmic.exe
RiskScore = 50
Annotation = {"mitre_attack": ["T1047"]}
Query = (Process.Name == "wmic.exe" or iendswith(Process.Path, "\\WMIC.exe")) and icontains(Process.CommandLine, " service ") and icontains(Process.CommandLine, " call ") and (icontains(Process.CommandLine, "stopservice") or icontains(Process.CommandLine, "startservice"))


[ActivityMonitoringRule platform=Windows]
# Detects usage of findstr with the "EVERYONE" or "BUILTIN" keywords. This is seen being used in combination with "icacls" to look for misconfigured files or folders permissions
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleId = 47e4bab7-c626-47dc-967b-255608c9a920
RuleName = Permission Misconfiguration Reconnaissance Via Findstr.EXE
EventType = Process.Start
Tag = proc-start-permission-misconfiguration-reconnaissance-via-findstr.exe
RiskScore = 50
Annotation = {"mitre_attack": ["T1552.006"]}
Query = (iendswith(Process.Path, "\\find.exe") or iendswith(Process.Path, "\\findstr.exe") or Process.Name in ["FIND.EXE", "FINDSTR.EXE"]) and (icontains(Process.CommandLine, "\"Everyone\"") or icontains(Process.CommandLine, "'Everyone'") or icontains(Process.CommandLine, "\"BUILTIN\\\"") or icontains(Process.CommandLine, "'BUILTIN\\'")) or icontains(Process.CommandLine, "icacls ") and icontains(Process.CommandLine, "findstr ") and icontains(Process.CommandLine, "Everyone")


[ActivityMonitoringRule platform=Windows]
# A General detection for sdclt spawning new processes. This could be an indicator of sdclt being used for bypass UAC techniques.
# Author: Roberto Rodriguez (Cyb3rWard0g), OTR (Open Threat Research)
RuleId = da2738f2-fadb-4394-afa7-0a0674885afa
RuleName = Sdclt Child Processes
EventType = Process.Start
Tag = proc-start-sdclt-child-processes
RiskScore = 50
Annotation = {"mitre_attack": ["T1548.002"]}
Query = iendswith(Parent.Path, "\\sdclt.exe")
GenericProperty1 = Parent.Path


[ActivityMonitoringRule platform=Windows]
# Detects possible payload obfuscation via the commandline
# Author: frack113, Nasreddine Bencherchali (Nextron Systems)
RuleId = a77c1610-fc73-4019-8e29-0f51efc04a51
RuleName = Potential Dosfuscation Activity
EventType = Process.Start
Tag = proc-start-potential-dosfuscation-activity
RiskScore = 50
Annotation = {"mitre_attack": ["T1059"]}
Query = icontains(Process.CommandLine, "^^") or icontains(Process.CommandLine, "^|^") or icontains(Process.CommandLine, ",;,") or icontains(Process.CommandLine, ";;;;") or icontains(Process.CommandLine, ";; ;;") or icontains(Process.CommandLine, "(,(,") or icontains(Process.CommandLine, "%COMSPEC:~") or icontains(Process.CommandLine, " c^m^d") or icontains(Process.CommandLine, "^c^m^d") or icontains(Process.CommandLine, " c^md") or icontains(Process.CommandLine, " cm^d") or icontains(Process.CommandLine, "^cm^d") or icontains(Process.CommandLine, " s^et ") or icontains(Process.CommandLine, " s^e^t ") or icontains(Process.CommandLine, " se^t ")


[ActivityMonitoringRule platform=Windows]
# Detects execution of "curl.exe" with a potential custom "User-Agent". Attackers can leverage this to download or exfiltrate data via "curl" to a domain that only accept specific "User-Agent" strings
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleId = 85de1f22-d189-44e4-8239-dc276b45379b
RuleName = Curl Web Request With Potential Custom User-Agent
EventType = Process.Start
Tag = proc-start-curl-web-request-with-potential-custom-user-agent
RiskScore = 50
Query = (iendswith(Process.Path, "\\curl.exe") or Process.Name == "curl.exe") and regex_match(Process.CommandLine, r"\\s-H\\s") and icontains(Process.CommandLine, "User-Agent:")


[ActivityMonitoringRule platform=Windows]
# Detects the usage of the "sftp.exe" binary as a LOLBIN by abusing the "-D" flag
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleId = a85ffc3a-e8fd-4040-93bf-78aff284d801
RuleName = Use Of The SFTP.EXE Binary As A LOLBIN
EventType = Process.Start
Tag = proc-start-use-of-the-sftp.exe-binary-as-a-lolbin
RiskScore = 50
Annotation = {"mitre_attack": ["T1218"]}
Query = iendswith(Process.Path, "\\sftp.exe") and (icontains(Process.CommandLine, " -D ..") or icontains(Process.CommandLine, " -D C:\\"))


[ActivityMonitoringRule platform=Windows]
# Detects the creation of copy of suspicious files (EXE/DLL) to the default GPO storage folder
# Author: elhoim
RuleId = 5f87308a-0a5b-4623-ae15-d8fa1809bc60
RuleName = Suspicious Files in Default GPO Folder
EventType = File.Create
Tag = suspicious-files-in-default-gpo-folder
RiskScore = 50
Annotation = {"mitre_attack": ["T1036.005"]}
Query = icontains(File.Path, "\\Policies\\{31B2F340-016D-11D2-945F-00C04FB984F9}\\") and (iendswith(File.Path, ".dll") or iendswith(File.Path, ".exe"))
GenericProperty1 = File.Path


[ActivityMonitoringRule platform=Windows]
# Detects PowerShell creating a binary executable or a script file.
# Author: frack113, Nasreddine Bencherchali (Nextron Systems)
RuleId = 7047d730-036f-4f40-b9d8-1c63e36d5e62
RuleName = Potential Binary Or Script Dropper Via PowerShell
EventType = File.Create
Tag = potential-binary-or-script-dropper-via-powershell
RiskScore = 50
Query = (iendswith(Process.Path, "\\powershell.exe") or iendswith(Process.Path, "\\pwsh.exe")) and (iendswith(File.Path, ".bat") or iendswith(File.Path, ".chm") or iendswith(File.Path, ".cmd") or iendswith(File.Path, ".com") or iendswith(File.Path, ".dll") or iendswith(File.Path, ".exe") or iendswith(File.Path, ".hta") or iendswith(File.Path, ".jar") or iendswith(File.Path, ".js") or iendswith(File.Path, ".ocx") or iendswith(File.Path, ".scr") or iendswith(File.Path, ".sys") or iendswith(File.Path, ".vbe") or iendswith(File.Path, ".vbs") or iendswith(File.Path, ".wsf")) and not (istartswith(File.Path, "C:\\Users\\") and icontains(File.Path, "\\AppData\\Local\\Temp\\") and (iendswith(File.Path, ".dll") or iendswith(File.Path, ".exe")) or istartswith(File.Path, "C:\\Windows\\Temp\\") and (iendswith(File.Path, ".dll") or iendswith(File.Path, ".exe")))
GenericProperty1 = File.Path


[ActivityMonitoringRule platform=Windows]
# Detects execution of powershell scripts via Runscripthelper.exe
# Author: Victor Sergeev, oscd.community
RuleId = eca49c87-8a75-4f13-9c73-a5a29e845f03
RuleName = Suspicious Runscripthelper.exe
EventType = Process.Start
Tag = proc-start-suspicious-runscripthelper.exe
RiskScore = 50
Annotation = {"mitre_attack": ["T1059", "T1202"]}
Query = iendswith(Process.Path, "\\Runscripthelper.exe") and icontains(Process.CommandLine, "surfacecheck")


[ActivityMonitoringRule platform=Windows]
# Detects the use of a Microsoft signed script executing a managed DLL with PowerShell.
# Author: frack113
RuleId = 0403d67d-6227-4ea8-8145-4e72db7da120
RuleName = UtilityFunctions.ps1 Proxy Dll
EventType = Process.Start
Tag = proc-start-utilityfunctions.ps1-proxy-dll
RiskScore = 50
Annotation = {"mitre_attack": ["T1216"]}
Query = icontains(Process.CommandLine, "UtilityFunctions.ps1") or icontains(Process.CommandLine, "RegSnapin ")


[ActivityMonitoringRule platform=Windows]
# Detects suspicious execution of "PDQDeployRunner" which is part of the PDQDeploy service stack that is responsible for executing commands and packages on a remote machines
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleId = 12b8e9f5-96b2-41e1-9a42-8c6779a5c184
RuleName = Suspicious Execution Of PDQDeployRunner
EventType = Process.Start
Tag = proc-start-suspicious-execution-of-pdqdeployrunner
RiskScore = 50
Query = icontains(Parent.Path, "PDQDeployRunner-") and (iendswith(Process.Path, "\\wscript.exe") or iendswith(Process.Path, "\\cscript.exe") or iendswith(Process.Path, "\\rundll32.exe") or iendswith(Process.Path, "\\regsvr32.exe") or iendswith(Process.Path, "\\wmic.exe") or iendswith(Process.Path, "\\msiexec.exe") or iendswith(Process.Path, "\\mshta.exe") or iendswith(Process.Path, "\\csc.exe") or iendswith(Process.Path, "\\dllhost.exe") or iendswith(Process.Path, "\\certutil.exe") or iendswith(Process.Path, "\\scriptrunner.exe") or iendswith(Process.Path, "\\bash.exe") or iendswith(Process.Path, "\\wsl.exe") or icontains(Process.Path, "C:\\Users\\Public\\") or icontains(Process.Path, "C:\\ProgramData\\") or icontains(Process.Path, "C:\\Windows\\TEMP\\") or icontains(Process.Path, "\\AppData\\Local\\Temp") or icontains(Process.CommandLine, "iex ") or icontains(Process.CommandLine, "Invoke-") or icontains(Process.CommandLine, "DownloadString") or icontains(Process.CommandLine, "http") or icontains(Process.CommandLine, " -enc ") or icontains(Process.CommandLine, " -encodedcommand ") or icontains(Process.CommandLine, "FromBase64String") or icontains(Process.CommandLine, " -decode ") or icontains(Process.CommandLine, " -w hidden"))
GenericProperty1 = Parent.Path


[ActivityMonitoringRule platform=Windows]
# Detects the addition of office test registry that allows a user to specify an arbitrary DLL that will be executed every time an Office application is started
# Author: omkar72
RuleId = 3d27f6dd-1c74-4687-b4fa-ca849d128d1c
RuleName = Office Application Startup - Office Test
EventType = Reg.Any
Tag = office-application-startup-office-test
RiskScore = 50
Annotation = {"mitre_attack": ["T1137.002"]}
Query = icontains(Reg.Key.Target, "\\Software\\Microsoft\\Office test\\Special\\Perf")
Hive = HKLM,HKU
GenericProperty1 = Reg.Key.Target


[ActivityMonitoringRule platform=Windows]
# Detects potential "ShellDispatch.dll" functionality abuse to execute arbitrary binaries via "ShellExecute"
# Author: X__Junior (Nextron Systems)
RuleId = 82343930-652f-43f5-ab70-2ee9fdd6d5e9
RuleName = Potential ShellDispatch.DLL Functionality Abuse
EventType = Process.Start
Tag = proc-start-potential-shelldispatch.dll-functionality-abuse
RiskScore = 50
Query = (iendswith(Process.Path, "\\rundll32.exe") or Process.Name == "RUNDLL32.EXE") and icontains(Process.CommandLine, "RunDll_ShellExecuteW")


[ActivityMonitoringRule platform=Windows]
# Detects usage of cmdkey to add generic credentials. As an example, this has to be used before connecting to an RDP session via command line interface.
# Author: frack113, Nasreddine Bencherchali (Nextron Systems)
RuleId = b1ec66c6-f4d1-4b5c-96dd-af28ccae7727
RuleName = New Generic Credentials Added Via Cmdkey.EXE
EventType = Process.Start
Tag = proc-start-new-generic-credentials-added-via-cmdkey.exe
RiskScore = 50
Annotation = {"mitre_attack": ["T1003.005"]}
Query = (iendswith(Process.Path, "\\cmdkey.exe") or Process.Name == "cmdkey.exe") and icontains(Process.CommandLine, " /g") and icontains(Process.CommandLine, " /u") and icontains(Process.CommandLine, " /p")


[ActivityMonitoringRule platform=Windows]
# Detects the execution of certutil with certain flags that allow the utility to download files.
# Author: Florian Roth (Nextron Systems), Jonhnathan Ribeiro, oscd.community, Nasreddine Bencherchali (Nextron Systems)
RuleId = 19b08b1c-861d-4e75-a1ef-ea0c1baf202b
RuleName = Suspicious Download Via Certutil.EXE
EventType = Process.Start
Tag = proc-start-suspicious-download-via-certutil.exe
RiskScore = 50
Annotation = {"mitre_attack": ["T1027"]}
Query = (iendswith(Process.Path, "\\certutil.exe") or Process.Name == "CertUtil.exe") and (icontains(Process.CommandLine, "urlcache ") or icontains(Process.CommandLine, "verifyctl ")) and icontains(Process.CommandLine, "http")


[ActivityMonitoringRule platform=Windows]
# Detects unsigned module load by ClickOnce application.
# Author: @SerkinValery
RuleId = 060d5ad4-3153-47bb-8382-43e5e29eda92
RuleName = Unsigned Module Loaded by ClickOnce Application
EventType = Image.Load
Tag = unsigned-module-loaded-by-clickonce-application
RiskScore = 50
Annotation = {"mitre_attack": ["T1574.002"]}
Query = icontains(Process.Path, "\\AppData\\Local\\Apps\\2.0\\") and (Image.IsSigned == "false" or Image.SignatureStatus == "Expired")
GenericProperty1 = Image.IsSigned
GenericProperty2 = Image.SignatureStatus


[ActivityMonitoringRule platform=Windows]
# Detects the execution utitilies often found in Visual Studio tools that hardcode the call to the binary "link.exe". They can be abused to sideload any binary with the same name
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleId = 6e968eb1-5f05-4dac-94e9-fd0c5cb49fd6
RuleName = Sideloading Link.EXE
EventType = Process.Start
Tag = proc-start-sideloading-link.exe
RiskScore = 50
Annotation = {"mitre_attack": ["T1218"]}
Query = iendswith(Process.Path, "\\link.exe") and icontains(Process.CommandLine, "LINK /") and not ((istartswith(Parent.Path, "C:\\Program Files\\Microsoft Visual Studio\\") or istartswith(Parent.Path, "C:\\Program Files (x86)\\Microsoft Visual Studio\\")) and icontains(Parent.Path, "\\VC\\Tools\\MSVC\\"))
GenericProperty1 = Parent.Path


[ActivityMonitoringRule platform=Windows]
# Detects the usage of the "Squirrel.exe" binary to execute arbitrary processes. This binary is part of multiple Electron based software installations (Slack, Teams, Discord, etc.)
# Author: Nasreddine Bencherchali (Nextron Systems), Karneades / Markus Neis, Jonhnathan Ribeiro, oscd.community
RuleId = 45239e6a-b035-4aaf-b339-8ad379fcb67e
RuleName = Process Proxy Execution Via Squirrel.EXE
EventType = Process.Start
Tag = proc-start-process-proxy-execution-via-squirrel.exe
RiskScore = 50
Annotation = {"mitre_attack": ["T1218"]}
Query = (iendswith(Process.Path, "\\squirrel.exe") or iendswith(Process.Path, "\\update.exe")) and (icontains(Process.CommandLine, "--processStart") or icontains(Process.CommandLine, "--processStartAndWait") or icontains(Process.CommandLine, "--createShortcut")) and not (icontains(Process.CommandLine, ":\\Users\\") and icontains(Process.CommandLine, "\\AppData\\Local\\Discord\\Update.exe") and icontains(Process.CommandLine, " --processStart") and icontains(Process.CommandLine, "Discord.exe") or icontains(Process.CommandLine, ":\\Users\\") and icontains(Process.CommandLine, "\\AppData\\Local\\GitHubDesktop\\Update.exe") and icontains(Process.CommandLine, "GitHubDesktop.exe") and (icontains(Process.CommandLine, "--createShortcut") or icontains(Process.CommandLine, "--processStartAndWait")) or icontains(Process.CommandLine, ":\\Users\\") and icontains(Process.CommandLine, "\\AppData\\Local\\Microsoft\\Teams\\Update.exe") and icontains(Process.CommandLine, "Teams.exe") and (icontains(Process.CommandLine, "--processStart") or icontains(Process.CommandLine, "--createShortcut")) or icontains(Process.CommandLine, ":\\Users\\") and icontains(Process.CommandLine, "\\AppData\\Local\\yammerdesktop\\Update.exe") and icontains(Process.CommandLine, "Yammer.exe") and (icontains(Process.CommandLine, "--processStart") or icontains(Process.CommandLine, "--createShortcut")))


[ActivityMonitoringRule platform=Windows]
# Detects the execution of other scripts using the Node executable packaged with Adobe Creative Cloud
# Author: Max Altgelt (Nextron Systems)
RuleId = df1f26d3-bea7-4700-9ea2-ad3e990cf90e
RuleName = Node Process Executions
EventType = Process.Start
Tag = proc-start-node-process-executions
RiskScore = 50
Annotation = {"mitre_attack": ["T1127", "T1059.007"]}
Query = iendswith(Process.Path, "\\Adobe Creative Cloud Experience\\libs\\node.exe") and not icontains(Process.CommandLine, "Adobe Creative Cloud Experience\\js")


[ActivityMonitoringRule platform=Windows]
# Detects potential DLL sideloading of "SolidPDFCreator.dll"
# Author: X__Junior (Nextron Systems)
RuleId = a2edbce1-95c8-4291-8676-0d45146862b3
RuleName = Potential SolidPDFCreator.DLL Sideloading
EventType = Image.Load
Tag = potential-solidpdfcreator.dll-sideloading
RiskScore = 50
Annotation = {"mitre_attack": ["T1574.001", "T1574.002"]}
Query = iendswith(Image.Path, "\\SolidPDFCreator.dll") and not (iendswith(Process.Path, "\\SolidPDFCreator.exe") and (istartswith(Image.Path, "C:\\Program Files (x86)\\SolidDocuments\\SolidPDFCreator\\") or istartswith(Image.Path, "C:\\Program Files\\SolidDocuments\\SolidPDFCreator\\")))
GenericProperty1 = Image.Path


[ActivityMonitoringRule platform=Windows]
# Detects the usage of the "Squirrel.exe" to download arbitrary files. This binary is part of multiple Electron based software installations (Slack, Teams, Discord, etc.)
# Author: Nasreddine Bencherchali (Nextron Systems), Karneades / Markus Neis, Jonhnathan Ribeiro, oscd.community
RuleId = 1e75c1cc-c5d4-42aa-ac3d-91b0b68b3b4c
RuleName = Arbitrary File Download Via Squirrel.EXE
EventType = Process.Start
Tag = proc-start-arbitrary-file-download-via-squirrel.exe
RiskScore = 50
Annotation = {"mitre_attack": ["T1218"]}
Query = (iendswith(Process.Path, "\\squirrel.exe") or iendswith(Process.Path, "\\update.exe")) and (icontains(Process.CommandLine, " --download ") or icontains(Process.CommandLine, " --update ") or icontains(Process.CommandLine, " --updateRollback=")) and icontains(Process.CommandLine, "http")


[ActivityMonitoringRule platform=Windows]
# Detects default CSExec service filename which indicates CSExec service installation and execution
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleId = f0e2b768-5220-47dd-b891-d57b96fc0ec1
RuleName = CSExec Service File Creation
EventType = File.Create
Tag = csexec-service-file-creation
RiskScore = 50
Annotation = {"mitre_attack": ["T1569.002"]}
Query = iendswith(File.Path, "\\csexecsvc.exe")
GenericProperty1 = File.Path


[ActivityMonitoringRule platform=Windows]
# Detects file access requests to the Windows Credential History File by an uncommon application.
# This can be a sign of credential stealing. Example case would be usage of mimikatz "dpapi::credhist" function
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleId = 7a2a22ea-a203-4cd3-9abf-20eb1c5c6cd2
RuleName = Access To Windows Credential History File By Uncommon Application
EventType = File.Read
Tag = access-to-windows-credential-history-file-by-uncommon-application
RiskScore = 50
Annotation = {"mitre_attack": ["T1555.004"]}
Query = iendswith(File.Path, "\\Microsoft\\Protect\\CREDHIST") and not (istartswith(Process.Path, "C:\\Program Files\\") or istartswith(Process.Path, "C:\\Program Files (x86)\\") or istartswith(Process.Path, "C:\\Windows\\system32\\") or istartswith(Process.Path, "C:\\Windows\\SysWOW64\\") or Process.Path == "C:\\Windows\\explorer.exe")
GenericProperty1 = File.Path


[ActivityMonitoringRule platform=Windows]
# Detects execution of "rundll32" with potential obfuscated ordinal calls
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleId = 43fa5350-db63-4b8f-9a01-789a427074e1
RuleName = Potential Obfuscated Ordinal Call Via Rundll32
EventType = Process.Start
Tag = proc-start-potential-obfuscated-ordinal-call-via-rundll32
RiskScore = 50
Query = (iendswith(Process.Path, "\\rundll32.exe") or Process.Name == "RUNDLL32.EXE" or icontains(Process.CommandLine, "rundll32")) and (icontains(Process.CommandLine, "#+") or icontains(Process.CommandLine, "#-"))


[ActivityMonitoringRule platform=Windows]
# Detects potential DLL sideloading of "libvlc.dll", a DLL that is legitimately used by "VLC.exe"
# Author: X__Junior
RuleId = bf9808c4-d24f-44a2-8398-b65227d406b6
RuleName = Potential Libvlc.DLL Sideloading
EventType = Image.Load
Tag = potential-libvlc.dll-sideloading
RiskScore = 50
Annotation = {"mitre_attack": ["T1574.001", "T1574.002"]}
Query = iendswith(Image.Path, "\\libvlc.dll") and not (istartswith(Image.Path, "C:\\Program Files (x86)\\VideoLAN\\VLC\\") or istartswith(Image.Path, "C:\\Program Files\\VideoLAN\\VLC\\"))
GenericProperty1 = Image.Path


[ActivityMonitoringRule platform=Windows]
# Detects DLL sideloading of DLLs that are part of third party software (zoom, discord....etc)
# Author: Nasreddine Bencherchali (Nextron Systems), Wietze Beukema (project and research)
RuleId = f9df325d-d7bc-4a32-8a1a-2cc61dcefc63
RuleName = Third Party Software DLL Sideloading
EventType = Image.Load
Tag = third-party-software-dll-sideloading
RiskScore = 50
Annotation = {"mitre_attack": ["T1574.001", "T1574.002"]}
Query = iendswith(Image.Path, "\\commfunc.dll") and not (icontains(Image.Path, "\\AppData\\local\\Google\\Chrome\\Application\\") or istartswith(Image.Path, "C:\\Program Files\\Lenovo\\Communications Utility\\") or istartswith(Image.Path, "C:\\Program Files (x86)\\Lenovo\\Communications Utility\\")) or iendswith(Image.Path, "\\tosbtkbd.dll") and not (istartswith(Image.Path, "C:\\Program Files\\Toshiba\\Bluetooth Toshiba Stack\\") or istartswith(Image.Path, "C:\\Program Files (x86)\\Toshiba\\Bluetooth Toshiba Stack\\"))
GenericProperty1 = Image.Path


[ActivityMonitoringRule platform=Windows]
# Detects the deletion of IIS WebServer access logs which may indicate an attempt to destroy forensic evidence
# Author: Tim Rauch (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)
RuleId = 3eb8c339-a765-48cc-a150-4364c04652bf
RuleName = IIS WebServer Access Logs Deleted
EventType = File.Delete
Tag = iis-webserver-access-logs-deleted
RiskScore = 50
Annotation = {"mitre_attack": ["T1070"]}
Query = icontains(File.Path, "\\inetpub\\logs\\LogFiles\\") and iendswith(File.Path, ".log")
GenericProperty1 = File.Path


[ActivityMonitoringRule platform=Windows]
# Detects potential Amazon SSM agent hijack attempts as outlined in the Mitiga research report.
# Author: Muhammad Faisal
RuleId = d20ee2f4-822c-4827-9e15-41500b1fff10
RuleName = Potential Amazon SSM Agent Hijacking
EventType = Process.Start
Tag = proc-start-potential-amazon-ssm-agent-hijacking
RiskScore = 50
Annotation = {"mitre_attack": ["T1219"]}
Query = iendswith(Process.Path, "\\amazon-ssm-agent.exe") and icontains(Process.CommandLine, "-register ") and icontains(Process.CommandLine, "-code ") and icontains(Process.CommandLine, "-id ") and icontains(Process.CommandLine, "-region ")


[ActivityMonitoringRule platform=Windows]
# Detects the import of '.reg' files from suspicious paths using the 'reg.exe' utility
# Author: frack113, Nasreddine Bencherchali
RuleId = 62e0298b-e994-4189-bc87-bc699aa62d97
RuleName = Potential Suspicious Registry File Imported Via Reg.EXE
EventType = Process.Start
Tag = proc-start-potential-suspicious-registry-file-imported-via-reg.exe
RiskScore = 50
Annotation = {"mitre_attack": ["T1112"]}
Query = (iendswith(Process.Path, "\\reg.exe") or Process.Name == "reg.exe") and icontains(Process.CommandLine, " import ") and (icontains(Process.CommandLine, "C:\\Users\\") or icontains(Process.CommandLine, "%temp%") or icontains(Process.CommandLine, "%tmp%") or icontains(Process.CommandLine, "%appdata%") or icontains(Process.CommandLine, "\\AppData\\Local\\Temp\\") or icontains(Process.CommandLine, "C:\\Windows\\Temp\\") or icontains(Process.CommandLine, "C:\\ProgramData\\"))


[ActivityMonitoringRule platform=Windows]
# Detects usage of the Get-ADUser cmdlet to collect user information and output it to a file
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleId = 1114e048-b69c-4f41-bc20-657245ae6e3f
RuleName = User Discovery And Export Via Get-ADUser Cmdlet
EventType = Process.Start
Tag = proc-start-user-discovery-and-export-via-get-aduser-cmdlet
RiskScore = 50
Annotation = {"mitre_attack": ["T1033"]}
Query = (iendswith(Process.Path, "\\powershell.exe") or iendswith(Process.Path, "\\pwsh.exe") or Process.Name in ["PowerShell.EXE", "pwsh.dll"]) and icontains(Process.CommandLine, "Get-ADUser ") and icontains(Process.CommandLine, " -Filter \*") and (icontains(Process.CommandLine, " > ") or icontains(Process.CommandLine, " | Select ") or icontains(Process.CommandLine, "Out-File") or icontains(Process.CommandLine, "Set-Content") or icontains(Process.CommandLine, "Add-Content"))


[ActivityMonitoringRule platform=Windows]
# Detects the Installation of a Exchange Transport Agent
# Author: Tobias Michalski (Nextron Systems)
RuleId = 83809e84-4475-4b69-bc3e-4aad8568612f
RuleName = MSExchange Transport Agent Installation
EventType = Process.Start
Tag = proc-start-msexchange-transport-agent-installation
RiskScore = 50
Annotation = {"mitre_attack": ["T1505.002"]}
Query = icontains(Process.CommandLine, "Install-TransportAgent")


[ActivityMonitoringRule platform=Windows]
# Detects the use of the PowerShell "Set-Service" cmdlet to change the startup type of a service to "disabled" or "manual"
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleId = 62b20d44-1546-4e61-afce-8e175eb9473c
RuleName = Service StartupType Change Via PowerShell Set-Service
EventType = Process.Start
Tag = proc-start-service-startuptype-change-via-powershell-set-service
RiskScore = 50
Annotation = {"mitre_attack": ["T1562.001"]}
Query = (iendswith(Process.Path, "\\powershell.exe") or Process.Name == "PowerShell.EXE") and icontains(Process.CommandLine, "Set-Service") and icontains(Process.CommandLine, "-StartupType") and (icontains(Process.CommandLine, "Disabled") or icontains(Process.CommandLine, "Manual"))


[ActivityMonitoringRule platform=Windows]
# Detects the import of the specified file to the registry with regedit.exe.
# Author: Oddvar Moe, Sander Wiebing, oscd.community
RuleId = 73bba97f-a82d-42ce-b315-9182e76c57b1
RuleName = Imports Registry Key From a File
EventType = Process.Start
Tag = proc-start-imports-registry-key-from-a-file
RiskScore = 50
Annotation = {"mitre_attack": ["T1112"]}
Query = (iendswith(Process.Path, "\\regedit.exe") or Process.Name == "REGEDIT.EXE") and (icontains(Process.CommandLine, " /i ") or icontains(Process.CommandLine, " /s ") or icontains(Process.CommandLine, ".reg")) and not ((icontains(Process.CommandLine, " /e ") or icontains(Process.CommandLine, " /a ") or icontains(Process.CommandLine, " /c ") or icontains(Process.CommandLine, " -e ") or icontains(Process.CommandLine, " -a ") or icontains(Process.CommandLine, " -c ")) and regex_match(Process.CommandLine, r":[^ \\\\]"))


[ActivityMonitoringRule platform=Windows]
# Adversaries may search the Registry on compromised systems for insecurely stored credentials.
# The Windows Registry stores configuration information that can be used by the system or other programs.
# Adversaries may query the Registry looking for credentials and passwords that have been stored for use by other programs or services
# Author: frack113
RuleId = e0b0c2ab-3d52-46d9-8cb7-049dc775fbd1
RuleName = Enumeration for Credentials in Registry
EventType = Process.Start
Tag = proc-start-enumeration-for-credentials-in-registry
RiskScore = 50
Annotation = {"mitre_attack": ["T1552.002"]}
Query = iendswith(Process.Path, "\\reg.exe") and icontains(Process.CommandLine, " query ") and icontains(Process.CommandLine, "/t ") and icontains(Process.CommandLine, "REG_SZ") and icontains(Process.CommandLine, "/s") and (icontains(Process.CommandLine, "/f ") and icontains(Process.CommandLine, "HKLM") or icontains(Process.CommandLine, "/f ") and icontains(Process.CommandLine, "HKCU") or icontains(Process.CommandLine, "HKCU\\Software\\SimonTatham\\PuTTY\\Sessions"))


[ActivityMonitoringRule platform=Windows]
# TeamViewer_Desktop.exe is create during install
# Author: frack113
RuleId = 9711de76-5d4f-4c50-a94f-21e4e8f8384d
RuleName = Installation of TeamViewer Desktop
EventType = File.Create
Tag = installation-of-teamviewer-desktop
RiskScore = 50
Annotation = {"mitre_attack": ["T1219"]}
Query = iendswith(File.Path, "\\TeamViewer_Desktop.exe")
GenericProperty1 = File.Path


[ActivityMonitoringRule platform=Windows]
# Execute C# code located in the consoleapp folder
# Author: Beyu Denis, oscd.community
RuleId = 81ebd28b-9607-4478-bf06-974ed9d53ed7
RuleName = Application Whitelisting Bypass via Dnx.exe
EventType = Process.Start
Tag = proc-start-application-whitelisting-bypass-via-dnx.exe
RiskScore = 50
Annotation = {"mitre_attack": ["T1218", "T1027.004"]}
Query = iendswith(Process.Path, "\\dnx.exe")


[ActivityMonitoringRule platform=Windows]
# Detects the creation of an "Active Directory Schema Cache File" (.sch) file by an uncommon tool.
# Author: xknow @xknow_infosec, Tim Shelton
RuleId = 75bf09fa-1dd7-4d18-9af9-dd9e492562eb
RuleName = ADSI-Cache File Creation By Uncommon Tool
EventType = File.Create
Tag = adsi-cache-file-creation-by-uncommon-tool
RiskScore = 50
Annotation = {"mitre_attack": ["T1001.003"]}
Query = icontains(File.Path, "\\Local\\Microsoft\\Windows\\SchCache\\") and iendswith(File.Path, ".sch") and not (iendswith(Process.Path, ":\\Program Files\\Cylance\\Desktop\\CylanceSvc.exe") or iendswith(Process.Path, ":\\Windows\\CCM\\CcmExec.exe") or iendswith(Process.Path, ":\\windows\\system32\\dllhost.exe") or iendswith(Process.Path, ":\\Windows\\system32\\dsac.exe") or iendswith(Process.Path, ":\\Windows\\system32\\efsui.exe") or iendswith(Process.Path, ":\\windows\\system32\\mmc.exe") or iendswith(Process.Path, ":\\windows\\system32\\svchost.exe") or iendswith(Process.Path, ":\\Windows\\System32\\wbem\\WmiPrvSE.exe") or iendswith(Process.Path, ":\\windows\\system32\\WindowsPowerShell\\v1.0\\powershell.exe") or icontains(Process.Path, ":\\Windows\\ccmsetup\\autoupgrade\\ccmsetup") or icontains(Process.Path, ":\\Program Files\\SentinelOne\\Sentinel Agent") or icontains(Process.Path, ":\\Program Files\\") and icontains(Process.Path, "\\Microsoft Office") and iendswith(Process.Path, "\\OUTLOOK.EXE")) and not (iendswith(Process.Path, "\\LANDesk\\LDCLient\\ldapwhoami.exe") or iendswith(Process.Path, ":\\Program Files\\Citrix\\Receiver StoreFront\\Services\\DefaultDomainServices\\Citrix.DeliveryServices.DomainServices.ServiceHost.exe"))
GenericProperty1 = File.Path


[ActivityMonitoringRule platform=Windows]
# Detects use of .NET InstallUtil.exe in order to download arbitrary files. The files will be written to "%LOCALAPPDATA%\Microsoft\Windows\INetCache\IE\"
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleId = 75edd216-1939-4c73-8d61-7f3a0d85b5cc
RuleName = File Download Via InstallUtil.EXE
EventType = Process.Start
Tag = proc-start-file-download-via-installutil.exe
RiskScore = 50
Annotation = {"mitre_attack": ["T1218"]}
Query = (iendswith(Process.Path, "\\InstallUtil.exe") or Process.Name == "InstallUtil.exe") and (icontains(Process.CommandLine, "ftp://") or icontains(Process.CommandLine, "http://") or icontains(Process.CommandLine, "https://"))


[ActivityMonitoringRule platform=Windows]
# Detects the Setting of Windows Defender Exclusions
# Author: Christian Burkard (Nextron Systems)
RuleId = a982fc9c-6333-4ffb-a51d-addb04e8b529
RuleName = Windows Defender Exclusions Added - Registry
EventType = Reg.Any
Tag = windows-defender-exclusions-added-registry
RiskScore = 50
Annotation = {"mitre_attack": ["T1562.001"]}
Query = icontains(Reg.Key.Target, "\\Microsoft\\Windows Defender\\Exclusions")
Hive = HKLM,HKU
GenericProperty1 = Reg.Key.Target


[ActivityMonitoringRule platform=Windows]
# Detects suspicious connections from Microsoft Sync Center to non-private IPs.
# Author: elhoim
RuleId = 9f2cc74d-78af-4eb2-bb64-9cd1d292b87b
RuleName = Microsoft Sync Center Suspicious Network Connections
EventType = Net.Any
Tag = microsoft-sync-center-suspicious-network-connections
RiskScore = 50
Annotation = {"mitre_attack": ["T1055", "T1218"]}
Query = iendswith(Process.Path, "\\mobsync.exe") and not ((istartswith(Net.Target.Ip, "10.") or istartswith(Net.Target.Ip, "192.168.") or istartswith(Net.Target.Ip, "172.16.") or istartswith(Net.Target.Ip, "172.17.") or istartswith(Net.Target.Ip, "172.18.") or istartswith(Net.Target.Ip, "172.19.") or istartswith(Net.Target.Ip, "172.20.") or istartswith(Net.Target.Ip, "172.21.") or istartswith(Net.Target.Ip, "172.22.") or istartswith(Net.Target.Ip, "172.23.") or istartswith(Net.Target.Ip, "172.24.") or istartswith(Net.Target.Ip, "172.25.") or istartswith(Net.Target.Ip, "172.26.") or istartswith(Net.Target.Ip, "172.27.") or istartswith(Net.Target.Ip, "172.28.") or istartswith(Net.Target.Ip, "172.29.") or istartswith(Net.Target.Ip, "172.30.") or istartswith(Net.Target.Ip, "172.31.")) and Net.Target.IpIsV6 == "false")
GenericProperty1 = Net.Target.Ip
GenericProperty2 = Net.Target.IpIsV6


[ActivityMonitoringRule platform=Windows]
# Detects the deletion of tomcat WebServer logs which may indicate an attempt to destroy forensic evidence
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleId = 270185ff-5f50-4d6d-a27f-24c3b8c9fef8
RuleName = Tomcat WebServer Logs Deleted
EventType = File.Delete
Tag = tomcat-webserver-logs-deleted
RiskScore = 50
Annotation = {"mitre_attack": ["T1070"]}
Query = icontains(File.Path, "\\Tomcat") and icontains(File.Path, "\\logs\\") and (icontains(File.Path, "catalina.") or icontains(File.Path, "_access_log.") or icontains(File.Path, "localhost."))
GenericProperty1 = File.Path


[ActivityMonitoringRule platform=Windows]
# Detects password change for the computer's domain account or host principal via "ksetup.exe"
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleId = de16d92c-c446-4d53-8938-10aeef41c8b6
RuleName = Computer Password Change Via Ksetup.EXE
EventType = Process.Start
Tag = proc-start-computer-password-change-via-ksetup.exe
RiskScore = 50
Query = (iendswith(Process.Path, "\\ksetup.exe") or Process.Name == "ksetup.exe") and icontains(Process.CommandLine, " /setcomputerpassword ")


[ActivityMonitoringRule platform=Windows]
# Detects when a user installs certificates by using CertOC.exe to loads the target DLL file.
# Author: Austin Songer @austinsonger
RuleId = 242301bc-f92f-4476-8718-78004a6efd9f
RuleName = DLL Loaded via CertOC.EXE
EventType = Process.Start
Tag = proc-start-dll-loaded-via-certoc.exe
RiskScore = 50
Annotation = {"mitre_attack": ["T1218"]}
Query = (iendswith(Process.Path, "\\certoc.exe") or Process.Name == "CertOC.exe") and (icontains(Process.CommandLine, " -LoadDLL ") or icontains(Process.CommandLine, " /LoadDLL "))


[ActivityMonitoringRule platform=Windows]
# Ntvdm.exe allows the execution of 16-bit Windows applications on 32-bit Windows operating systems, as well as the execution of both 16-bit and 32-bit DOS applications
# Author: frack113
RuleId = 16905e21-66ee-42fe-b256-1318ada2d770
RuleName = Start of NT Virtual DOS Machine
EventType = Process.Start
Tag = proc-start-start-of-nt-virtual-dos-machine
RiskScore = 50
Query = iendswith(Process.Path, "\\ntvdm.exe") or iendswith(Process.Path, "\\csrstub.exe")


[ActivityMonitoringRule platform=Windows]
# Detects execution of "Diskshadow.exe" in script mode using the "/s" flag where the script is located in a potentially suspicious location.
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleId = fa1a7e52-3d02-435b-81b8-00da14dd66c1
RuleName = Diskshadow Script Mode - Execution From Potential Suspicious Location
EventType = Process.Start
Tag = proc-start-diskshadow-script-mode-execution-from-potential-suspicious-location
RiskScore = 50
Annotation = {"mitre_attack": ["T1218"]}
Query = (Process.Name == "diskshadow.exe" or iendswith(Process.Path, "\\diskshadow.exe")) and (icontains(Process.CommandLine, "/s ") or icontains(Process.CommandLine, "-s ")) and (icontains(Process.CommandLine, ":\\Temp\\") or icontains(Process.CommandLine, ":\\Windows\\Temp\\") or icontains(Process.CommandLine, "\\AppData\\Local\\") or icontains(Process.CommandLine, "\\AppData\\Roaming\\") or icontains(Process.CommandLine, "\\ProgramData\\") or icontains(Process.CommandLine, "\\Users\\Public\\"))


[ActivityMonitoringRule platform=Windows]
# lolbas Cmdl32 is use to download a payload to evade antivirus
# Author: frack113
RuleId = f37aba28-a9e6-4045-882c-d5004043b337
RuleName = Suspicious Cmdl32 Execution
EventType = Process.Start
Tag = proc-start-suspicious-cmdl32-execution
RiskScore = 50
Annotation = {"mitre_attack": ["T1218", "T1202"]}
Query = (iendswith(Process.Path, "\\cmdl32.exe") or Process.Name == "CMDL32.EXE") and icontains(Process.CommandLine, "/vpn ") and icontains(Process.CommandLine, "/lan ")


[ActivityMonitoringRule platform=Windows]
# Detects creation of the Process Monitor driver by processes other than Process Monitor (procmon) itself.
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleId = a05baa88-e922-4001-bc4d-8738135f27de
RuleName = Process Monitor Driver Creation By Non-Sysinternals Binary
EventType = File.Create
Tag = process-monitor-driver-creation-by-non-sysinternals-binary
RiskScore = 50
Annotation = {"mitre_attack": ["T1068"]}
Query = icontains(File.Path, "\\procmon") and iendswith(File.Path, ".sys") and not (iendswith(Process.Path, "\\procmon.exe") or iendswith(Process.Path, "\\procmon64.exe"))
GenericProperty1 = File.Path


[ActivityMonitoringRule platform=Windows]
# Detects modification addition to the 'TypedPaths' key in the user or admin registry via the commandline. Which might indicate persistence attempt
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleId = ec88289a-7e1a-4cc3-8d18-bd1f60e4b9ba
RuleName = Persistence Via TypedPaths - CommandLine
EventType = Process.Start
Tag = proc-start-persistence-via-typedpaths-commandline
RiskScore = 50
Query = icontains(Process.CommandLine, "\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\TypedPaths")


[ActivityMonitoringRule platform=Windows]
# Detects potentially suspicious child processes of a ClickOnce deployment application
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleId = 67bc0e75-c0a9-4cfc-8754-84a505b63c04
RuleName = Potentially Suspicious Child Process Of ClickOnce Application
EventType = Process.Start
Tag = proc-start-potentially-suspicious-child-process-of-clickonce-application
RiskScore = 50
Query = icontains(Parent.Path, "\\AppData\\Local\\Apps\\2.0\\") and (iendswith(Process.Path, "\\calc.exe") or iendswith(Process.Path, "\\cmd.exe") or iendswith(Process.Path, "\\cscript.exe") or iendswith(Process.Path, "\\explorer.exe") or iendswith(Process.Path, "\\mshta.exe") or iendswith(Process.Path, "\\net.exe") or iendswith(Process.Path, "\\net1.exe") or iendswith(Process.Path, "\\nltest.exe") or iendswith(Process.Path, "\\notepad.exe") or iendswith(Process.Path, "\\powershell.exe") or iendswith(Process.Path, "\\pwsh.exe") or iendswith(Process.Path, "\\reg.exe") or iendswith(Process.Path, "\\regsvr32.exe") or iendswith(Process.Path, "\\rundll32.exe") or iendswith(Process.Path, "\\schtasks.exe") or iendswith(Process.Path, "\\werfault.exe") or iendswith(Process.Path, "\\wscript.exe"))
GenericProperty1 = Parent.Path


[ActivityMonitoringRule platform=Windows]
# Detects suspicious file type dropped by an Exchange component in IIS
# Author: Florian Roth (Nextron Systems)
RuleId = 6b269392-9eba-40b5-acb6-55c882b20ba6
RuleName = Suspicious File Drop by Exchange
EventType = File.Create
Tag = suspicious-file-drop-by-exchange
RiskScore = 50
Annotation = {"mitre_attack": ["T1190", "T1505.003"]}
Query = iendswith(Process.Path, "\\w3wp.exe") and icontains(Process.CommandLine, "MSExchange") and (iendswith(File.Path, ".aspx") or iendswith(File.Path, ".asp") or iendswith(File.Path, ".ashx") or iendswith(File.Path, ".ps1") or iendswith(File.Path, ".bat") or iendswith(File.Path, ".exe") or iendswith(File.Path, ".dll") or iendswith(File.Path, ".vbs"))
GenericProperty1 = File.Path


[ActivityMonitoringRule platform=Windows]
# Detects execution of the Impersonate tool. Which can be used to manipulate tokens on a Windows computers remotely (PsExec/WmiExec) or interactively
# Author: Sai Prashanth Pulisetti @pulisettis
RuleId = cf0c254b-22f1-4b2b-8221-e137b3c0af94
RuleName = HackTool - Impersonate Execution
EventType = Process.Start
Tag = proc-start-hacktool-impersonate-execution
RiskScore = 50
Annotation = {"mitre_attack": ["T1134.001", "T1134.003"]}
Query = icontains(Process.CommandLine, "impersonate.exe") and (icontains(Process.CommandLine, " list ") or icontains(Process.CommandLine, " exec ") or icontains(Process.CommandLine, " adduser ")) or icontains(Process.Hashes, "MD5=9520714AB576B0ED01D1513691377D01") or icontains(Process.Hashes, "SHA256=E81CC96E2118DC4FBFE5BAD1604E0AC7681960143E2101E1A024D52264BB0A8A") or icontains(Process.Hashes, "IMPHASH=0A358FFC1697B7A07D0E817AC740DF62") or Process.Hash.MD5 == "9520714AB576B0ED01D1513691377D01" or Process.Hash.SHA256 == "E81CC96E2118DC4FBFE5BAD1604E0AC7681960143E2101E1A024D52264BB0A8A" or Process.Hash.IMP == "0A358FFC1697B7A07D0E817AC740DF62"
GenericProperty1 = Process.Hash.MD5
GenericProperty2 = Process.Hash.SHA256
GenericProperty3 = Process.Hash.IMP
GenericProperty4 = Process.Hashes


[ActivityMonitoringRule platform=Windows]
# Detects suspicious process related to rasdial.exe
# Author: juju4
RuleId = 6bba49bf-7f8c-47d6-a1bb-6b4dece4640e
RuleName = Suspicious RASdial Activity
EventType = Process.Start
Tag = proc-start-suspicious-rasdial-activity
RiskScore = 50
Annotation = {"mitre_attack": ["T1059"]}
Query = iendswith(Process.Path, "rasdial.exe")


[ActivityMonitoringRule platform=Windows]
# Detects the presence of unicode characters which are homoglyphs, or identical in appearance, to ASCII letter characters.
# This is used as an obfuscation and masquerading techniques. Only "perfect" homoglyphs are included; these are characters that
# are indistinguishable from ASCII characters and thus may make excellent candidates for homoglyph attack characters.
# Author: Micah Babinski, @micahbabinski
RuleId = 32e280f1-8ad4-46ef-9e80-910657611fbc
RuleName = Potential Homoglyph Attack Using Lookalike Characters
EventType = Process.Start
Tag = proc-start-potential-homoglyph-attack-using-lookalike-characters
RiskScore = 50
Annotation = {"mitre_attack": ["T1036", "T1036.003"]}
Query = icontains(Process.CommandLine, "А") or icontains(Process.CommandLine, "В") or icontains(Process.CommandLine, "Е") or icontains(Process.CommandLine, "К") or icontains(Process.CommandLine, "М") or icontains(Process.CommandLine, "Н") or icontains(Process.CommandLine, "О") or icontains(Process.CommandLine, "Р") or icontains(Process.CommandLine, "С") or icontains(Process.CommandLine, "Т") or icontains(Process.CommandLine, "Х") or icontains(Process.CommandLine, "Ѕ") or icontains(Process.CommandLine, "І") or icontains(Process.CommandLine, "Ј") or icontains(Process.CommandLine, "Ү") or icontains(Process.CommandLine, "Ӏ") or icontains(Process.CommandLine, "Ԍ") or icontains(Process.CommandLine, "Ԛ") or icontains(Process.CommandLine, "Ԝ") or icontains(Process.CommandLine, "Α") or icontains(Process.CommandLine, "Β") or icontains(Process.CommandLine, "Ε") or icontains(Process.CommandLine, "Ζ") or icontains(Process.CommandLine, "Η") or icontains(Process.CommandLine, "Ι") or icontains(Process.CommandLine, "Κ") or icontains(Process.CommandLine, "Μ") or icontains(Process.CommandLine, "Ν") or icontains(Process.CommandLine, "Ο") or icontains(Process.CommandLine, "Ρ") or icontains(Process.CommandLine, "Τ") or icontains(Process.CommandLine, "Υ") or icontains(Process.CommandLine, "Χ") or icontains(Process.CommandLine, "а") or icontains(Process.CommandLine, "е") or icontains(Process.CommandLine, "о") or icontains(Process.CommandLine, "р") or icontains(Process.CommandLine, "с") or icontains(Process.CommandLine, "х") or icontains(Process.CommandLine, "ѕ") or icontains(Process.CommandLine, "і") or icontains(Process.CommandLine, "ӏ") or icontains(Process.CommandLine, "ј") or icontains(Process.CommandLine, "һ") or icontains(Process.CommandLine, "ԁ") or icontains(Process.CommandLine, "ԛ") or icontains(Process.CommandLine, "ԝ") or icontains(Process.CommandLine, "ο")


[ActivityMonitoringRule platform=Windows]
# Detects a suspicious program execution in a web service root folder (filter out false positives)
# Author: Florian Roth (Nextron Systems)
RuleId = 35efb964-e6a5-47ad-bbcd-19661854018d
RuleName = Execution in Webserver Root Folder
EventType = Process.Start
Tag = proc-start-execution-in-webserver-root-folder
RiskScore = 50
Annotation = {"mitre_attack": ["T1505.003"]}
Query = (icontains(Process.Path, "\\wwwroot\\") or icontains(Process.Path, "\\wmpub\\") or icontains(Process.Path, "\\htdocs\\")) and not ((icontains(Process.Path, "bin\\") or icontains(Process.Path, "\\Tools\\") or icontains(Process.Path, "\\SMSComponent\\")) and iendswith(Parent.Path, "\\services.exe"))
GenericProperty1 = Parent.Path


[ActivityMonitoringRule platform=Windows]
# This rule detects execution of a PowerShell code through the sqltoolsps.exe utility, which is included in the standard set of utilities supplied with the Microsoft SQL Server Management studio.
# Script blocks are not logged in this case, so this utility helps to bypass protection mechanisms based on the analysis of these logs.
# Author: Agro (@agro_sev) oscd.communitly
RuleId = a746c9b8-a2fb-4ee5-a428-92bee9e99060
RuleName = SQL Client Tools PowerShell Session Detection
EventType = Process.Start
Tag = proc-start-sql-client-tools-powershell-session-detection
RiskScore = 50
Annotation = {"mitre_attack": ["T1059.001", "T1127"]}
Query = (iendswith(Process.Path, "\\sqltoolsps.exe") or iendswith(Parent.Path, "\\sqltoolsps.exe") or Process.Name == "\\sqltoolsps.exe") and not iendswith(Parent.Path, "\\smss.exe")
GenericProperty1 = Parent.Path


[ActivityMonitoringRule platform=Windows]
# Detects uncommon child processes of "BgInfo.exe" which could be a sign of potential abuse of the binary to proxy execution via external VBScript
# Author: Nasreddine Bencherchali (Nextron Systems), Beyu Denis, oscd.community
RuleId = aaf46cdc-934e-4284-b329-34aa701e3771
RuleName = Uncommon Child Process Of BgInfo.EXE
EventType = Process.Start
Tag = proc-start-uncommon-child-process-of-bginfo.exe
RiskScore = 50
Annotation = {"mitre_attack": ["T1059.005", "T1218", "T1202"]}
Query = iendswith(Parent.Path, "\\bginfo.exe") or iendswith(Parent.Path, "\\bginfo64.exe")
GenericProperty1 = Parent.Path


[ActivityMonitoringRule platform=Windows]
# Detects suspicious child processes of SysAidServer (as seen in MERCURY threat actor intrusions)
# Author: Florian Roth (Nextron Systems)
RuleId = 60bfeac3-0d35-4302-8efb-1dd16f715bc6
RuleName = Suspicious SysAidServer Child
EventType = Process.Start
Tag = proc-start-suspicious-sysaidserver-child
RiskScore = 50
Annotation = {"mitre_attack": ["T1210"]}
Query = (iendswith(Parent.Path, "\\java.exe") or iendswith(Parent.Path, "\\javaw.exe")) and icontains(Parent.CommandLine, "SysAidServer")
GenericProperty1 = Parent.Path
GenericProperty2 = Parent.CommandLine


[ActivityMonitoringRule platform=Windows]
# Detects the execution of "csvde.exe" in order to export organizational Active Directory structure.
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleId = e5d36acd-acb4-4c6f-a13f-9eb203d50099
RuleName = Active Directory Structure Export Via Csvde.EXE
EventType = Process.Start
Tag = proc-start-active-directory-structure-export-via-csvde.exe
RiskScore = 50
Query = (iendswith(Process.Path, "\\csvde.exe") or Process.Name == "csvde.exe") and icontains(Process.CommandLine, " -f") and not icontains(Process.CommandLine, " -i")


[ActivityMonitoringRule platform=Windows]
# The "ScriptRunner.exe" binary can be abused to proxy execution through it and bypass possible whitelisting
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleId = 64760eef-87f7-4ed3-93fd-655668ea9420
RuleName = Use of Scriptrunner.exe
EventType = Process.Start
Tag = proc-start-use-of-scriptrunner.exe
RiskScore = 50
Annotation = {"mitre_attack": ["T1218"]}
Query = (iendswith(Process.Path, "\\ScriptRunner.exe") or Process.Name == "ScriptRunner.exe") and icontains(Process.CommandLine, " -appvscript ")


[ActivityMonitoringRule platform=Windows]
# Detects a command line process that uses explorer.exe to launch arbitrary commands or binaries,
# which is similar to cmd.exe /c, only it breaks the process tree and makes its parent a new instance of explorer spawning from "svchost"
# Author: Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems), @gott_cyber
RuleId = 949f1ffb-6e85-4f00-ae1e-c3c5b190d605
RuleName = Explorer Process Tree Break
EventType = Process.Start
Tag = proc-start-explorer-process-tree-break
RiskScore = 50
Annotation = {"mitre_attack": ["T1036"]}
Query = icontains(Process.CommandLine, "/factory,{75dff2b7-6936-4c06-a8bb-676a7b00b24b}") or icontains(Process.CommandLine, "explorer.exe") and icontains(Process.CommandLine, " /root,")


[ActivityMonitoringRule platform=Windows]
# Detects "svchost.exe" spawning "rundll32.exe" with command arguments like "C:\windows\system32\davclnt.dll,DavSetCookie".
# This could be an indicator of exfiltration or use of WebDav to launch code (hosted on a WebDav server).
# Author: Roberto Rodriguez (Cyb3rWard0g), OTR (Open Threat Research)
RuleId = 2dbd9d3d-9e27-42a8-b8df-f13825c6c3d5
RuleName = WebDav Client Execution Via Rundll32.EXE
EventType = Process.Start
Tag = proc-start-webdav-client-execution-via-rundll32.exe
RiskScore = 50
Annotation = {"mitre_attack": ["T1048.003"]}
Query = iendswith(Parent.Path, "\\svchost.exe") and (iendswith(Process.Path, "\\rundll32.exe") or Process.Name == "RUNDLL32.EXE") and icontains(Process.CommandLine, "C:\\windows\\system32\\davclnt.dll,DavSetCookie")
GenericProperty1 = Parent.Path


[ActivityMonitoringRule platform=Windows]
# Detects possible search for office tokens via CLI by looking for the string "eyJ0eX". This string is used as an anchor to look for the start of the JWT token used by office and similar apps.
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleId = 6d3a3952-6530-44a3-8554-cf17c116c615
RuleName = Suspicious Office Token Search Via CLI
EventType = Process.Start
Tag = proc-start-suspicious-office-token-search-via-cli
RiskScore = 50
Annotation = {"mitre_attack": ["T1528"]}
Query = icontains(Process.CommandLine, "eyJ0eXAiOi") or icontains(Process.CommandLine, " eyJ0eX") or icontains(Process.CommandLine, " \"eyJ0eX\"") or icontains(Process.CommandLine, " 'eyJ0eX'")


[ActivityMonitoringRule platform=Windows]
# Detects file execution using the msdeploy.exe lolbin
# Author: Beyu Denis, oscd.community
RuleId = 646bc99f-6682-4b47-a73a-17b1b64c9d34
RuleName = Execute Files with Msdeploy.exe
EventType = Process.Start
Tag = proc-start-execute-files-with-msdeploy.exe
RiskScore = 50
Annotation = {"mitre_attack": ["T1218"]}
Query = icontains(Process.CommandLine, "verb:sync") and icontains(Process.CommandLine, "-source:RunCommand") and icontains(Process.CommandLine, "-dest:runCommand") and iendswith(Process.Path, "\\msdeploy.exe")


[ActivityMonitoringRule platform=Windows]
# Detects usage of the "ConvertTo-SecureString" cmdlet via the commandline. Which is fairly uncommon and could indicate potential suspicious activity
# Author: Teymur Kheirkhabarov (idea), Vasiliy Burov (rule), oscd.community, Tim Shelton
RuleId = 74403157-20f5-415d-89a7-c505779585cf
RuleName = ConvertTo-SecureString Cmdlet Usage Via CommandLine
EventType = Process.Start
Tag = proc-start-convertto-securestring-cmdlet-usage-via-commandline
RiskScore = 50
Annotation = {"mitre_attack": ["T1027", "T1059.001"]}
Query = (iendswith(Process.Path, "\\powershell.exe") or iendswith(Process.Path, "\\pwsh.exe") or Process.Name in ["PowerShell.EXE", "pwsh.dll"]) and icontains(Process.CommandLine, "ConvertTo-SecureString")


[ActivityMonitoringRule platform=Windows]
# dotnet.exe will execute any DLL and execute unsigned code
# Author: Beyu Denis, oscd.community
RuleId = d80d5c81-04ba-45b4-84e4-92eba40e0ad3
RuleName = Dotnet.exe Exec Dll and Execute Unsigned Code LOLBIN
EventType = Process.Start
Tag = proc-start-dotnet.exe-exec-dll-and-execute-unsigned-code-lolbin
RiskScore = 50
Annotation = {"mitre_attack": ["T1218"]}
Query = (iendswith(Process.Path, "\\dotnet.exe") or Process.Name == ".NET Host") and (iendswith(Process.CommandLine, ".dll") or iendswith(Process.CommandLine, ".csproj"))


[ActivityMonitoringRule platform=Windows]
# Detects execution of "aspnet_compiler.exe" which can be abused to compile and execute C# code.
# Author: frack113
RuleId = a01b8329-5953-4f73-ae2d-aa01e1f35f00
RuleName = AspNetCompiler Execution
EventType = Process.Start
Tag = proc-start-aspnetcompiler-execution
RiskScore = 50
Annotation = {"mitre_attack": ["T1127"]}
Query = (icontains(Process.Path, "C:\\Windows\\Microsoft.NET\\Framework\\") or icontains(Process.Path, "C:\\Windows\\Microsoft.NET\\Framework64\\")) and iendswith(Process.Path, "\\aspnet_compiler.exe")


[ActivityMonitoringRule platform=Windows]
# Detects the use of various web request commands with commandline tools and Windows PowerShell cmdlets (including aliases) via CommandLine
# Author: James Pemberton / @4A616D6573, Endgame, JHasenbusch, oscd.community, Austin Songer @austinsonger
RuleId = 9fc51a3c-81b3-4fa7-b35f-7c02cf10fd2d
RuleName = Usage Of Web Request Commands And Cmdlets
EventType = Process.Start
Tag = proc-start-usage-of-web-request-commands-and-cmdlets
RiskScore = 50
Annotation = {"mitre_attack": ["T1059.001"]}
Query = icontains(Process.CommandLine, "[System.Net.WebRequest]::create") or icontains(Process.CommandLine, "curl ") or icontains(Process.CommandLine, "Invoke-RestMethod") or icontains(Process.CommandLine, "Invoke-WebRequest") or icontains(Process.CommandLine, "iwr ") or icontains(Process.CommandLine, "Net.WebClient") or icontains(Process.CommandLine, "Resume-BitsTransfer") or icontains(Process.CommandLine, "Start-BitsTransfer") or icontains(Process.CommandLine, "wget ") or icontains(Process.CommandLine, "WinHttp.WinHttpRequest")


[ActivityMonitoringRule platform=Windows]
# Detection of sc.exe utility adding a new service with special permission which hides that service.
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleId = 98c5aeef-32d5-492f-b174-64a691896d25
RuleName = Service Security Descriptor Tampering Via Sc.EXE
EventType = Process.Start
Tag = proc-start-service-security-descriptor-tampering-via-sc.exe
RiskScore = 50
Annotation = {"mitre_attack": ["T1574.011"]}
Query = (iendswith(Process.Path, "\\sc.exe") or Process.Name == "sc.exe") and icontains(Process.CommandLine, "sdset")


[ActivityMonitoringRule platform=Windows]
# Detects the execution of AdvancedRun utility
# Author: Florian Roth (Nextron Systems)
RuleId = d2b749ee-4225-417e-b20e-a8d2193cbb84
RuleName = PUA - AdvancedRun Execution
EventType = Process.Start
Tag = proc-start-pua-advancedrun-execution
RiskScore = 50
Annotation = {"mitre_attack": ["T1564.003", "T1134.002", "T1059.003"]}
Query = Process.Name == "AdvancedRun.exe" or icontains(Process.CommandLine, " /EXEFilename ") and icontains(Process.CommandLine, " /Run") or icontains(Process.CommandLine, " /WindowState 0") and icontains(Process.CommandLine, " /RunAs ") and icontains(Process.CommandLine, " /CommandLine ")


[ActivityMonitoringRule platform=Windows]
# Detects signs of the WMI script host process "scrcons.exe" loading scripting DLLs which could indicates WMI ActiveScriptEventConsumers EventConsumers activity.
# Author: Roberto Rodriguez (Cyb3rWard0g), OTR (Open Threat Research)
RuleId = b439f47d-ef52-4b29-9a2f-57d8a96cb6b8
RuleName = WMI ActiveScriptEventConsumers Activity Via Scrcons.EXE DLL Load
EventType = Image.Load
Tag = wmi-activescripteventconsumers-activity-via-scrcons.exe-dll-load
RiskScore = 50
Annotation = {"mitre_attack": ["T1546.003"]}
Query = iendswith(Process.Path, "\\scrcons.exe") and (iendswith(Image.Path, "\\vbscript.dll") or iendswith(Image.Path, "\\wbemdisp.dll") or iendswith(Image.Path, "\\wshom.ocx") or iendswith(Image.Path, "\\scrrun.dll"))
GenericProperty1 = Image.Path


[ActivityMonitoringRule platform=Windows]
# Detects potential DLL sideloading of "vivaldi_elf.dll"
# Author: X__Junior (Nextron Systems)
RuleId = 2092cacb-d77b-4f98-ab0d-32b32f99a054
RuleName = Potential Vivaldi_elf.DLL Sideloading
EventType = Image.Load
Tag = potential-vivaldi_elf.dll-sideloading
RiskScore = 50
Annotation = {"mitre_attack": ["T1574.001", "T1574.002"]}
Query = iendswith(Image.Path, "\\vivaldi_elf.dll") and not (iendswith(Process.Path, "\\Vivaldi\\Application\\vivaldi.exe") and icontains(Image.Path, "\\Vivaldi\\Application\\"))
GenericProperty1 = Image.Path


[ActivityMonitoringRule platform=Windows]
# Detects calls to PowerShell with Invoke-WebRequest cmdlet using direct IP access
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleId = 1edff897-9146-48d2-9066-52e8d8f80a2f
RuleName = Suspicious Invoke-WebRequest Execution With DirectIP
EventType = Process.Start
Tag = proc-start-suspicious-invoke-webrequest-execution-with-directip
RiskScore = 50
Annotation = {"mitre_attack": ["T1105"]}
Query = (iendswith(Process.Path, "\\powershell.exe") or iendswith(Process.Path, "\\pwsh.exe") or Process.Name in ["PowerShell.EXE", "pwsh.dll"]) and (icontains(Process.CommandLine, "curl ") or icontains(Process.CommandLine, "Invoke-WebRequest") or icontains(Process.CommandLine, "iwr ") or icontains(Process.CommandLine, "wget ")) and (icontains(Process.CommandLine, "://1") or icontains(Process.CommandLine, "://2") or icontains(Process.CommandLine, "://3") or icontains(Process.CommandLine, "://4") or icontains(Process.CommandLine, "://5") or icontains(Process.CommandLine, "://6") or icontains(Process.CommandLine, "://7") or icontains(Process.CommandLine, "://8") or icontains(Process.CommandLine, "://9"))


[ActivityMonitoringRule platform=Windows]
# Detects using register-cimprovider.exe to execute arbitrary dll file.
# Author: Ivan Dyachkov, Yulia Fomina, oscd.community
RuleId = a2910908-e86f-4687-aeba-76a5f996e652
RuleName = DLL Execution Via Register-cimprovider.exe
EventType = Process.Start
Tag = proc-start-dll-execution-via-register-cimprovider.exe
RiskScore = 50
Annotation = {"mitre_attack": ["T1574"]}
Query = iendswith(Process.Path, "\\register-cimprovider.exe") and icontains(Process.CommandLine, "-path") and icontains(Process.CommandLine, "dll")


[ActivityMonitoringRule platform=Windows]
# Detects an attempt to leverage dnscmd.exe to enumerate the DNS zones of a domain. DNS zones used to host the DNS records for a particular domain.
# Author: @gott_cyber
RuleId = b6457d63-d2a2-4e29-859d-4e7affc153d1
RuleName = Potential Discovery Activity Via Dnscmd.EXE
EventType = Process.Start
Tag = proc-start-potential-discovery-activity-via-dnscmd.exe
RiskScore = 50
Annotation = {"mitre_attack": ["T1543.003"]}
Query = iendswith(Process.Path, "\\dnscmd.exe") and (icontains(Process.CommandLine, "/enumrecords") or icontains(Process.CommandLine, "/enumzones") or icontains(Process.CommandLine, "/ZonePrint") or icontains(Process.CommandLine, "/info"))


[ActivityMonitoringRule platform=Windows]
# Detects execution of "certutil" with the "addstore" flag in order to install a new certificate on the system.
# Adversaries may install a root certificate on a compromised system to avoid warnings when connecting to adversary controlled web servers.
# Author: oscd.community, @redcanary, Zach Stanford @svch0st
RuleId = d2125259-ddea-4c1c-9c22-977eb5b29cf0
RuleName = New Root Certificate Installed Via Certutil.EXE
EventType = Process.Start
Tag = proc-start-new-root-certificate-installed-via-certutil.exe
RiskScore = 50
Annotation = {"mitre_attack": ["T1553.004"]}
Query = (iendswith(Process.Path, "\\certutil.exe") or Process.Name == "CertUtil.exe") and (icontains(Process.CommandLine, "/addstore") or icontains(Process.CommandLine, "-addstore")) and icontains(Process.CommandLine, "root")


[ActivityMonitoringRule platform=Windows]
# Detects events that appear when a user click on a link file with a powershell command in it
# Author: frack113
RuleId = 30e92f50-bb5a-4884-98b5-d20aa80f3d7a
RuleName = Hidden Powershell in Link File Pattern
EventType = Process.Start
Tag = proc-start-hidden-powershell-in-link-file-pattern
RiskScore = 50
Annotation = {"mitre_attack": ["T1059.001"]}
Query = Parent.Path == "C:\\Windows\\explorer.exe" and Process.Path == "C:\\Windows\\System32\\cmd.exe" and icontains(Process.CommandLine, "powershell") and icontains(Process.CommandLine, ".lnk")
GenericProperty1 = Parent.Path


[ActivityMonitoringRule platform=Windows]
# Detects usage of the SysInternals Procdump utility
# Author: Florian Roth (Nextron Systems)
RuleId = 2e65275c-8288-4ab4-aeb7-6274f58b6b20
RuleName = Procdump Execution
EventType = Process.Start
Tag = proc-start-procdump-execution
RiskScore = 50
Annotation = {"mitre_attack": ["T1036", "T1003.001"]}
Query = iendswith(Process.Path, "\\procdump.exe") or iendswith(Process.Path, "\\procdump64.exe")


[ActivityMonitoringRule platform=Windows]
# Detects the use of Setres.exe to set the screen resolution and then potentially launch a file named "choice" (with any executable extension such as ".cmd" or ".exe") from the current execution path
# Author: @gott_cyber
RuleId = 835e75bf-4bfd-47a4-b8a6-b766cac8bcb7
RuleName = Use of Setres.exe
EventType = Process.Start
Tag = proc-start-use-of-setres.exe
RiskScore = 50
Annotation = {"mitre_attack": ["T1218", "T1202"]}
Query = iendswith(Parent.Path, "\\setres.exe") and iendswith(Process.Path, "\\choice")
GenericProperty1 = Parent.Path


[ActivityMonitoringRule platform=Windows]
# Detects potential network sniffing via use of network tools such as "tshark", "windump".
# Network sniffing refers to using the network interface on a system to monitor or capture information sent over a wired or wireless connection.
# An adversary may place a network interface into promiscuous mode to passively access data in transit over the network, or use span ports to capture a larger amount of data.
# Author: Timur Zinniatullin, oscd.community, Nasreddine Bencherchali (Nextron Systems)
RuleId = ba1f7802-adc7-48b4-9ecb-81e227fddfd5
RuleName = Potential Network Sniffing Activity Using Network Tools
EventType = Process.Start
Tag = proc-start-potential-network-sniffing-activity-using-network-tools
RiskScore = 50
Annotation = {"mitre_attack": ["T1040"]}
Query = iendswith(Process.Path, "\\tshark.exe") and icontains(Process.CommandLine, "-i") or iendswith(Process.Path, "\\windump.exe")


[ActivityMonitoringRule platform=Windows]
# Detects process dump via legitimate sqldumper.exe binary
# Author: Kirill Kiryanov, oscd.community
RuleId = 23ceaf5c-b6f1-4a32-8559-f2ff734be516
RuleName = Dumping Process via Sqldumper.exe
EventType = Process.Start
Tag = proc-start-dumping-process-via-sqldumper.exe
RiskScore = 50
Annotation = {"mitre_attack": ["T1003.001"]}
Query = iendswith(Process.Path, "\\sqldumper.exe") and (icontains(Process.CommandLine, "0x0110") or icontains(Process.CommandLine, "0x01100:40"))


[ActivityMonitoringRule platform=Windows]
# Detects the use of the 'Pubprn.vbs' Microsoft signed script to execute commands.
# Author: frack113
RuleId = 1fb76ab8-fa60-4b01-bddd-71e89bf555da
RuleName = Pubprn.vbs Proxy Execution
EventType = Process.Start
Tag = proc-start-pubprn.vbs-proxy-execution
RiskScore = 50
Annotation = {"mitre_attack": ["T1216.001"]}
Query = icontains(Process.CommandLine, "\\pubprn.vbs") and icontains(Process.CommandLine, "script:")


[ActivityMonitoringRule platform=Windows]
# Detects the use of a Microsoft signed script 'REGISTER_APP.VBS' to register a VSS/VDS Provider as a COM+ application.
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleId = 1c8774a0-44d4-4db0-91f8-e792359c70bd
RuleName = REGISTER_APP.VBS Proxy Execution
EventType = Process.Start
Tag = proc-start-register_app.vbs-proxy-execution
RiskScore = 50
Annotation = {"mitre_attack": ["T1218"]}
Query = icontains(Process.CommandLine, "\\register_app.vbs") and icontains(Process.CommandLine, "-register")


[ActivityMonitoringRule platform=Windows]
# Detects usage of the wevtutil utility to perform reconnaissance
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleId = beaa66d6-aa1b-4e3c-80f5-e0145369bfaf
RuleName = Potential Recon Activity Using Wevtutil
EventType = Process.Start
Tag = proc-start-potential-recon-activity-using-wevtutil
RiskScore = 50
Query = iendswith(Process.Path, "\\wevtutil.exe") and (icontains(Process.CommandLine, " qe ") or icontains(Process.CommandLine, " query-events ")) and (icontains(Process.CommandLine, "Microsoft-Windows-TerminalServices-LocalSessionManager/Operational") or icontains(Process.CommandLine, "Microsoft-Windows-Terminal-Services-RemoteConnectionManager/Operational") or icontains(Process.CommandLine, "Security"))


[ActivityMonitoringRule platform=Windows]
# Detects persistence via Visual Studio Tools for Office (VSTO) add-ins in Office applications.
# Author: Bhabesh Raj
RuleId = 9d15044a-7cfe-4d23-8085-6ebc11df7685
RuleName = Potential Persistence Via Visual Studio Tools for Office
EventType = Reg.Any
Tag = potential-persistence-via-visual-studio-tools-for-office
RiskScore = 50
Annotation = {"mitre_attack": ["T1137.006"]}
Query = (icontains(Reg.Key.Target, "\\Software\\Microsoft\\Office\\Outlook\\Addins\\") or icontains(Reg.Key.Target, "\\Software\\Microsoft\\Office\\Word\\Addins\\") or icontains(Reg.Key.Target, "\\Software\\Microsoft\\Office\\Excel\\Addins\\") or icontains(Reg.Key.Target, "\\Software\\Microsoft\\Office\\Powerpoint\\Addins\\") or icontains(Reg.Key.Target, "\\Software\\Microsoft\\VSTO\\Security\\Inclusion\\")) and not (iendswith(Process.Path, "\\msiexec.exe") or iendswith(Process.Path, "\\regsvr32.exe") or iendswith(Process.Path, "\\excel.exe") or iendswith(Process.Path, "\\integrator.exe") or iendswith(Process.Path, "\\OfficeClickToRun.exe") or iendswith(Process.Path, "\\winword.exe") or iendswith(Process.Path, "\\visio.exe") or iendswith(Process.Path, "\\Teams.exe") or Process.Path == "C:\\Program Files\\AVG\\Antivirus\\RegSvr.exe" and icontains(Reg.Key.Target, "\\Microsoft\\Office\\Outlook\\Addins\\Antivirus.AsOutExt\\"))
Hive = HKLM,HKU
GenericProperty1 = Reg.Key.Target


[ActivityMonitoringRule platform=Windows]
# Detects potential DLL sideloading of DLLs that are part of antivirus software suchas McAfee, Symantec...etc
# Author: Nasreddine Bencherchali (Nextron Systems), Wietze Beukema (project and research)
RuleId = 552b6b65-df37-4d3e-a258-f2fc4771ae54
RuleName = Potential Antivirus Software DLL Sideloading
EventType = Image.Load
Tag = potential-antivirus-software-dll-sideloading
RiskScore = 50
Annotation = {"mitre_attack": ["T1574.001", "T1574.002"]}
Query = iendswith(Image.Path, "\\log.dll") and not (istartswith(Image.Path, "C:\\Program Files\\Bitdefender Antivirus Free\\") or istartswith(Image.Path, "C:\\Program Files (x86)\\Bitdefender Antivirus Free\\") or Process.Path == "C:\\Program Files\\Dell\\SARemediation\\audit\\TelemetryUtility.exe" and (Image.Path in ["C:\\Program Files\\Dell\\SARemediation\\plugin\\log.dll", "C:\\Program Files\\Dell\\SARemediation\\audit\\log.dll"]) or istartswith(Image.Path, "C:\\Program Files\\Canon\\MyPrinter\\")) or iendswith(Image.Path, "\\qrt.dll") and not (istartswith(Image.Path, "C:\\Program Files\\F-Secure\\Anti-Virus\\") or istartswith(Image.Path, "C:\\Program Files (x86)\\F-Secure\\Anti-Virus\\")) or (iendswith(Image.Path, "\\ashldres.dll") or iendswith(Image.Path, "\\lockdown.dll") or iendswith(Image.Path, "\\vsodscpl.dll")) and not (istartswith(Image.Path, "C:\\Program Files\\McAfee\\") or istartswith(Image.Path, "C:\\Program Files (x86)\\McAfee\\")) or iendswith(Image.Path, "\\vftrace.dll") and not (istartswith(Image.Path, "C:\\Program Files\\CyberArk\\Endpoint Privilege Manager\\Agent\\x32\\") or istartswith(Image.Path, "C:\\Program Files (x86)\\CyberArk\\Endpoint Privilege Manager\\Agent\\x32\\")) or iendswith(Image.Path, "\\wsc.dll") and not (istartswith(Image.Path, "C:\\program Files\\AVAST Software\\Avast\\") or istartswith(Image.Path, "C:\\program Files (x86)\\AVAST Software\\Avast\\")) or iendswith(Image.Path, "\\tmdbglog.dll") and not (istartswith(Image.Path, "C:\\program Files\\Trend Micro\\Titanium\\") or istartswith(Image.Path, "C:\\program Files (x86)\\Trend Micro\\Titanium\\")) or iendswith(Image.Path, "\\DLPPREM32.dll") and not (istartswith(Image.Path, "C:\\program Files\\ESET") or istartswith(Image.Path, "C:\\program Files (x86)\\ESET"))
GenericProperty1 = Image.Path


[ActivityMonitoringRule platform=Windows]
# Detects launch of the PSEXESVC service, which means that this system was the target of a psexec remote execution
# Author: Thomas Patzke, Romaissa Adjailia, Florian Roth (Nextron Systems)
RuleId = fdfcbd78-48f1-4a4b-90ac-d82241e368c5
RuleName = PsExec Service Execution
EventType = Process.Start
Tag = proc-start-psexec-service-execution
RiskScore = 50
Query = Process.Path == "C:\\Windows\\PSEXESVC.exe" or Process.Name == "psexesvc.exe"


[ActivityMonitoringRule platform=Windows]
# Detects the execution of certutil with either the "decode" or "decodehex" flags to decode base64 or hex encoded files. This can be abused by attackers to decode an encoded payload before execution
# Author: Florian Roth (Nextron Systems), Jonhnathan Ribeiro, oscd.community
RuleId = cc9cbe82-7bc0-4ef5-bc23-bbfb83947be7
RuleName = File Decoded From Base64/Hex Via Certutil.EXE
EventType = Process.Start
Tag = proc-start-file-decoded-from-base64/hex-via-certutil.exe
RiskScore = 50
Annotation = {"mitre_attack": ["T1027"]}
Query = (iendswith(Process.Path, "\\certutil.exe") or Process.Name == "CertUtil.exe") and (icontains(Process.CommandLine, "-decode ") or icontains(Process.CommandLine, "/decode ") or icontains(Process.CommandLine, "-decodehex ") or icontains(Process.CommandLine, "/decodehex "))


[ActivityMonitoringRule platform=Windows]
# Detects potential DLL sideloading of a signed dbghelp.dll by the Sysinternals VMMap.
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleId = 98ffaed4-aec2-4e04-9b07-31492fe68b3d
RuleName = VMMap Signed Dbghelp.DLL Potential Sideloading
EventType = Image.Load
Tag = vmmap-signed-dbghelp.dll-potential-sideloading
RiskScore = 50
Annotation = {"mitre_attack": ["T1574.001", "T1574.002"]}
Query = icontains(Image.Path, "C:\\Debuggers\\dbghelp.dll") and (iendswith(Process.Path, "\\vmmap.exe") or iendswith(Process.Path, "\\vmmap64.exe")) and Image.IsSigned == "true"
GenericProperty1 = Image.Path
GenericProperty2 = Image.IsSigned


[ActivityMonitoringRule platform=Windows]
# Detects suspicious child processes of electron apps (teams, discord, slack, etc.). This could be a potential sign of ".asar" file tampering (See reference section for more information) or binary execution proxy through specific CLI arguments (see related rule)
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleId = f26eb764-fd89-464b-85e2-dc4a8e6e77b8
RuleName = Suspicious Electron Application Child Processes
EventType = Process.Start
Tag = proc-start-suspicious-electron-application-child-processes
RiskScore = 50
Query = (iendswith(Parent.Path, "\\chrome.exe") or iendswith(Parent.Path, "\\discord.exe") or iendswith(Parent.Path, "\\GitHubDesktop.exe") or iendswith(Parent.Path, "\\keybase.exe") or iendswith(Parent.Path, "\\msedge.exe") or iendswith(Parent.Path, "\\msedgewebview2.exe") or iendswith(Parent.Path, "\\msteams.exe") or iendswith(Parent.Path, "\\slack.exe") or iendswith(Parent.Path, "\\Teams.exe")) and (iendswith(Process.Path, "\\cmd.exe") or iendswith(Process.Path, "\\cscript.exe") or iendswith(Process.Path, "\\mshta.exe") or iendswith(Process.Path, "\\powershell.exe") or iendswith(Process.Path, "\\pwsh.exe") or iendswith(Process.Path, "\\regsvr32.exe") or iendswith(Process.Path, "\\wscript.exe") or icontains(Process.Path, "\\AppData\\Local\\Temp\\") or icontains(Process.Path, "\\Users\\Public\\") or icontains(Process.Path, "\\Windows\\Temp\\") or icontains(Process.Path, ":\\Temp\\")) and not (iendswith(Parent.Path, "\\chrome.exe") and iendswith(Process.Path, "\\chrome.exe") or iendswith(Parent.Path, "\\discord.exe") and iendswith(Process.Path, "\\discord.exe") or iendswith(Parent.Path, "\\GitHubDesktop.exe") and iendswith(Process.Path, "\\GitHubDesktop.exe") or iendswith(Parent.Path, "\\keybase.exe") and iendswith(Process.Path, "\\keybase.exe") or iendswith(Parent.Path, "\\msedge.exe") and iendswith(Process.Path, "\\msedge.exe") or iendswith(Parent.Path, "\\msedgewebview2.exe") and iendswith(Process.Path, "\\msedgewebview2.exe") or iendswith(Parent.Path, "\\msteams.exe") and iendswith(Process.Path, "\\msteams.exe") or iendswith(Parent.Path, "\\slack.exe") and iendswith(Process.Path, "\\slack.exe") or iendswith(Parent.Path, "\\teams.exe") and iendswith(Process.Path, "\\teams.exe") or Process.Path in ["C:\\Windows\\SysWOW64\\WerFault.exe", "C:\\Windows\\System32\\WerFault.exe"]) and not (iendswith(Parent.Path, "\\Discord.exe") and icontains(Process.CommandLine, "\\NVSMI\\nvidia-smi.exe"))
GenericProperty1 = Parent.Path


[ActivityMonitoringRule platform=Windows]
# Detects execution of attacker-controlled WsmPty.xsl or WsmTxt.xsl via winrm.vbs and copied cscript.exe (can be renamed)
# Author: Julia Fomina, oscd.community
RuleId = d353dac0-1b41-46c2-820c-d7d2561fc6ed
RuleName = AWL Bypass with Winrm.vbs and Malicious WsmPty.xsl/WsmTxt.xsl - File
EventType = File.Create
Tag = awl-bypass-with-winrm.vbs-and-malicious-wsmpty.xsl/wsmtxt.xsl-file
RiskScore = 50
Annotation = {"mitre_attack": ["T1216"]}
Query = (iendswith(File.Path, "WsmPty.xsl") or iendswith(File.Path, "WsmTxt.xsl")) and not (istartswith(File.Path, "C:\\Windows\\System32\\") or istartswith(File.Path, "C:\\Windows\\SysWOW64\\"))
GenericProperty1 = File.Path


[ActivityMonitoringRule platform=Windows]
# Detects powershell scripts that import modules from suspicious directories
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleId = c31364f7-8be6-4b77-8483-dd2b5a7b69a3
RuleName = Import PowerShell Modules From Suspicious Directories - ProcCreation
EventType = Process.Start
Tag = proc-start-import-powershell-modules-from-suspicious-directories-proccreation
RiskScore = 50
Annotation = {"mitre_attack": ["T1059.001"]}
Query = icontains(Process.CommandLine, "Import-Module \"$Env:Temp\\") or icontains(Process.CommandLine, "Import-Module '$Env:Temp\\") or icontains(Process.CommandLine, "Import-Module $Env:Temp\\") or icontains(Process.CommandLine, "Import-Module \"$Env:Appdata\\") or icontains(Process.CommandLine, "Import-Module '$Env:Appdata\\") or icontains(Process.CommandLine, "Import-Module $Env:Appdata\\") or icontains(Process.CommandLine, "Import-Module C:\\Users\\Public\\") or icontains(Process.CommandLine, "ipmo \"$Env:Temp\\") or icontains(Process.CommandLine, "ipmo '$Env:Temp\\") or icontains(Process.CommandLine, "ipmo $Env:Temp\\") or icontains(Process.CommandLine, "ipmo \"$Env:Appdata\\") or icontains(Process.CommandLine, "ipmo '$Env:Appdata\\") or icontains(Process.CommandLine, "ipmo $Env:Appdata\\") or icontains(Process.CommandLine, "ipmo C:\\Users\\Public\\")


[ActivityMonitoringRule platform=Windows]
# BITS will allow you to schedule a command to execute after a successful download to notify you that the job is finished. When the job runs on the system the command specified in the BITS job will be executed. This can be abused by actors to create a backdoor within the system and for persistence. It will be chained in a BITS job to schedule the download of malware/additional binaries and execute the program after being downloaded
# Author: Sreeman
RuleId = b9cbbc17-d00d-4e3d-a827-b06d03d2380d
RuleName = Monitoring For Persistence Via BITS
EventType = Process.Start
Tag = proc-start-monitoring-for-persistence-via-bits
RiskScore = 50
Annotation = {"mitre_attack": ["T1197"]}
Query = icontains(Process.CommandLine, "bitsadmin") and icontains(Process.CommandLine, "/SetNotifyCmdLine") and (icontains(Process.CommandLine, "%COMSPEC%") or icontains(Process.CommandLine, "cmd.exe") or icontains(Process.CommandLine, "regsvr32.exe")) or icontains(Process.CommandLine, "bitsadmin") and icontains(Process.CommandLine, "/Addfile") and (icontains(Process.CommandLine, "http:") or icontains(Process.CommandLine, "https:") or icontains(Process.CommandLine, "ftp:") or icontains(Process.CommandLine, "ftps:"))


[ActivityMonitoringRule platform=Windows]
# Detects the creation of binaries in the WinSxS folder by non-system processes
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleId = 34746e8c-5fb8-415a-b135-0abc167e912a
RuleName = WinSxS Executable File Creation By Non-System Process
EventType = File.Create
Tag = winsxs-executable-file-creation-by-non-system-process
RiskScore = 50
Query = istartswith(File.Path, "C:\\Windows\\WinSxS\\") and iendswith(File.Path, ".exe") and not (istartswith(Process.Path, "C:\\Windows\\Systems32\\") or istartswith(Process.Path, "C:\\Windows\\SysWOW64\\") or istartswith(Process.Path, "C:\\Windows\\WinSxS\\"))
GenericProperty1 = File.Path


[ActivityMonitoringRule platform=Windows]
# Detects execution of "certmgr" with the "add" flag in order to install a new certificate on the system.
# Adversaries may install a root certificate on a compromised system to avoid warnings when connecting to adversary controlled web servers.
# Author: oscd.community, @redcanary, Zach Stanford @svch0st
RuleId = ff992eac-6449-4c60-8c1d-91c9722a1d48
RuleName = New Root Certificate Installed Via CertMgr.EXE
EventType = Process.Start
Tag = proc-start-new-root-certificate-installed-via-certmgr.exe
RiskScore = 50
Annotation = {"mitre_attack": ["T1553.004"]}
Query = (iendswith(Process.Path, "\\CertMgr.exe") or Process.Name == "CERTMGT.EXE") and icontains(Process.CommandLine, "/add") and icontains(Process.CommandLine, "root")


[ActivityMonitoringRule platform=Windows]
# Detects usage of "msedge_proxy.exe" to download arbitrary files
# Author: Swachchhanda Shrawan Poudel
RuleId = e84d89c4-f544-41ca-a6af-4b92fd38b023
RuleName = Arbitrary File Download Via MSEDGE_PROXY.EXE
EventType = Process.Start
Tag = proc-start-arbitrary-file-download-via-msedge_proxy.exe
RiskScore = 50
Annotation = {"mitre_attack": ["T1218"]}
Query = (iendswith(Process.Path, "\\msedge_proxy.exe") or Process.Name == "msedge_proxy.exe") and (icontains(Process.CommandLine, "http://") or icontains(Process.CommandLine, "https://"))


[ActivityMonitoringRule platform=Windows]
# Detects usage of "ProtocolHandler" to download files. Downloaded files will be located in the cache folder (for example - %LOCALAPPDATA%\Microsoft\Windows\INetCache\IE)
# Author: frack113
RuleId = 104cdb48-a7a8-4ca7-a453-32942c6e5dcb
RuleName = File Download Using ProtocolHandler.exe
EventType = Process.Start
Tag = proc-start-file-download-using-protocolhandler.exe
RiskScore = 50
Annotation = {"mitre_attack": ["T1218"]}
Query = (iendswith(Process.Path, "\\protocolhandler.exe") or Process.Name == "ProtocolHandler.exe") and (icontains(Process.CommandLine, "ftp://") or icontains(Process.CommandLine, "http://") or icontains(Process.CommandLine, "https://"))


[ActivityMonitoringRule platform=Windows]
# Detects execution of "WerFault.exe" with the "-pr" commandline flag that is used to run files stored in the ReflectDebugger key which could be used to store the path to the malware in order to masquerade the execution flow
# Author: X__Junior (Nextron Systems)
RuleId = fabfb3a7-3ce1-4445-9c7c-3c27f1051cdd
RuleName = Potential ReflectDebugger Content Execution Via WerFault.EXE
EventType = Process.Start
Tag = proc-start-potential-reflectdebugger-content-execution-via-werfault.exe
RiskScore = 50
Annotation = {"mitre_attack": ["T1036"]}
Query = (iendswith(Process.Path, "\\WerFault.exe") or Process.Name == "WerFault.exe") and icontains(Process.CommandLine, " -pr ")


[ActivityMonitoringRule platform=Windows]
# Detects creation of ".vhd"/".vhdx" files by browser processes.
# Malware can use mountable Virtual Hard Disk ".vhd" files to encapsulate payloads and evade security controls.
# Author: frack113, Christopher Peacock '@securepeacock', SCYTHE '@scythe_io'
RuleId = 8468111a-ef07-4654-903b-b863a80bbc95
RuleName = VHD Image Download Via Browser
EventType = File.Create
Tag = vhd-image-download-via-browser
RiskScore = 50
Annotation = {"mitre_attack": ["T1587.001"]}
Query = (iendswith(Process.Path, "\\brave.exe") or iendswith(Process.Path, "\\chrome.exe") or iendswith(Process.Path, "\\firefox.exe") or iendswith(Process.Path, "\\iexplore.exe") or iendswith(Process.Path, "\\maxthon.exe") or iendswith(Process.Path, "\\MicrosoftEdge.exe") or iendswith(Process.Path, "\\msedge.exe") or iendswith(Process.Path, "\\msedgewebview2.exe") or iendswith(Process.Path, "\\opera.exe") or iendswith(Process.Path, "\\safari.exe") or iendswith(Process.Path, "\\seamonkey.exe") or iendswith(Process.Path, "\\vivaldi.exe") or iendswith(Process.Path, "\\whale.exe")) and icontains(File.Path, ".vhd")
GenericProperty1 = File.Path


[ActivityMonitoringRule platform=Windows]
# Detect modification of TreatAs key to enable "rundll32.exe -sta" command
# Author: frack113
RuleId = dc5c24af-6995-49b2-86eb-a9ff62199e82
RuleName = COM Hijacking via TreatAs
EventType = Reg.Any
Tag = com-hijacking-via-treatas
RiskScore = 50
Annotation = {"mitre_attack": ["T1546.015"]}
Query = iendswith(Reg.Key.Target, "TreatAs\\(Default)") and not (istartswith(Process.Path, "C:\\Program Files\\Common Files\\Microsoft Shared\\ClickToRun\\") and iendswith(Process.Path, "\\OfficeClickToRun.exe") or Process.Path == "C:\\Program Files (x86)\\Microsoft Office\\root\\integration\\integrator.exe" or Process.Path == "C:\\Windows\\system32\\svchost.exe" or Process.Path in ["C:\\Windows\\system32\\msiexec.exe", "C:\\Windows\\SysWOW64\\msiexec.exe"])
Hive = HKLM,HKU
GenericProperty1 = Reg.Key.Target


[ActivityMonitoringRule platform=Windows]
# The FSharp Interpreters, FsiAnyCpu.exe and FSi.exe, can be used for AWL bypass and is listed in Microsoft recommended block rules.
# Author: Christopher Peacock @SecurePeacock, SCYTHE @scythe_io
RuleId = b96b2031-7c17-4473-afe7-a30ce714db29
RuleName = Use of FSharp Interpreters
EventType = Process.Start
Tag = proc-start-use-of-fsharp-interpreters
RiskScore = 50
Annotation = {"mitre_attack": ["T1059"]}
Query = iendswith(Process.Path, "\\fsianycpu.exe") or Process.Name == "fsianycpu.exe" or iendswith(Process.Path, "\\fsi.exe") or Process.Name == "fsi.exe"


[ActivityMonitoringRule platform=Windows]
# Detects the deletion of the "Zone.Identifier" ADS by an uncommon process. Attackers can leverage this in order to bypass security restrictions that make use of the ADS such as Microsoft Office apps.
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleId = 3109530e-ab47-4cc6-a953-cac5ebcc93ae
RuleName = ADS Zone.Identifier Deleted By Uncommon Application
EventType = File.Delete
Tag = ads-zone.identifier-deleted-by-uncommon-application
RiskScore = 50
Annotation = {"mitre_attack": ["T1070.004"]}
Query = iendswith(File.Path, ":Zone.Identifier") and not (iendswith(Process.Path, ":\\Program Files\\PowerShell\\7-preview\\pwsh.exe") or iendswith(Process.Path, ":\\Program Files\\PowerShell\\7\\pwsh.exe") or iendswith(Process.Path, ":\\Windows\\explorer.exe") or iendswith(Process.Path, ":\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe") or iendswith(Process.Path, ":\\Windows\\SysWOW64\\explorer.exe") or iendswith(Process.Path, ":\\Windows\\SysWOW64\\WindowsPowerShell\\v1.0\\powershell.exe"))
GenericProperty1 = File.Path


[ActivityMonitoringRule platform=Windows]
# Detects calls to "SyncInvoke" that is part of the "CL_Invocation.ps1" script to proxy execution using "System.Diagnostics.Process"
# Author: Nasreddine Bencherchali (Nextron Systems), oscd.community, Natalia Shornikova
RuleId = a0459f02-ac51-4c09-b511-b8c9203fc429
RuleName = Potential Process Execution Proxy Via CL_Invocation.ps1
EventType = Process.Start
Tag = proc-start-potential-process-execution-proxy-via-cl_invocation.ps1
RiskScore = 50
Annotation = {"mitre_attack": ["T1216"]}
Query = icontains(Process.CommandLine, "SyncInvoke ")


[ActivityMonitoringRule platform=Windows]
# Detects usage of "cdb.exe" to launch 64-bit shellcode or arbitrary processes or commands from a debugger script file
# Author: Beyu Denis, oscd.community, Nasreddine Bencherchali
RuleId = b5c7395f-e501-4a08-94d4-57fe7a9da9d2
RuleName = WinDbg/CDB LOLBIN Usage
EventType = Process.Start
Tag = proc-start-windbg/cdb-lolbin-usage
RiskScore = 50
Annotation = {"mitre_attack": ["T1106", "T1218", "T1127"]}
Query = (iendswith(Process.Path, "\\cdb.exe") or Process.Name == "CDB.Exe") and (icontains(Process.CommandLine, " -c ") or icontains(Process.CommandLine, " -cf "))


[ActivityMonitoringRule platform=Windows]
# Identifies the creation of local users via the net.exe command.
# Author: Endgame, JHasenbusch (adapted to Sigma for oscd.community)
RuleId = cd219ff3-fa99-45d4-8380-a7d15116c6dc
RuleName = New User Created Via Net.EXE
EventType = Process.Start
Tag = proc-start-new-user-created-via-net.exe
RiskScore = 50
Annotation = {"mitre_attack": ["T1136.001"]}
Query = (iendswith(Process.Path, "\\net.exe") or iendswith(Process.Path, "\\net1.exe") or Process.Name in ["net.exe", "net1.exe"]) and icontains(Process.CommandLine, "user") and icontains(Process.CommandLine, "add")


[ActivityMonitoringRule platform=Windows]
# Detects a Powershell process that contains download commands in its command line string
# Author: Florian Roth (Nextron Systems), oscd.community, Jonhnathan Ribeiro
RuleId = 3b6ab547-8ec2-4991-b9d2-2b06702a48d7
RuleName = PowerShell Download Pattern
EventType = Process.Start
Tag = proc-start-powershell-download-pattern
RiskScore = 50
Annotation = {"mitre_attack": ["T1059.001"]}
Query = (iendswith(Process.Path, "\\powershell.exe") or iendswith(Process.Path, "\\pwsh.exe") or Process.Name in ["PowerShell.EXE", "pwsh.dll"]) and icontains(Process.CommandLine, "new-object") and icontains(Process.CommandLine, "net.webclient).") and icontains(Process.CommandLine, "download") and (icontains(Process.CommandLine, "string(") or icontains(Process.CommandLine, "file("))


[ActivityMonitoringRule platform=Windows]
# Detects the execution of ".xbap" (Browser Applications) files via PresentationHost.EXE from an uncommon location. These files can be abused to run malicious ".xbap" files any bypass AWL
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleId = d22e2925-cfd8-463f-96f6-89cec9d9bc5f
RuleName = XBAP Execution From Uncommon Locations Via PresentationHost.EXE
EventType = Process.Start
Tag = proc-start-xbap-execution-from-uncommon-locations-via-presentationhost.exe
RiskScore = 50
Annotation = {"mitre_attack": ["T1218"]}
Query = (iendswith(Process.Path, "\\presentationhost.exe") or Process.Name == "PresentationHost.exe") and icontains(Process.CommandLine, ".xbap") and not (icontains(Process.CommandLine, " C:\\Windows\\") or icontains(Process.CommandLine, " C:\\Program Files"))


[ActivityMonitoringRule platform=Windows]
# Detects a "regsvr32" execution where the DLL doesn't contain a common file extension.
# Author: Florian Roth (Nextron Systems)
RuleId = 50919691-7302-437f-8e10-1fe088afa145
RuleName = Regsvr32 DLL Execution With Uncommon Extension
EventType = Process.Start
Tag = proc-start-regsvr32-dll-execution-with-uncommon-extension
RiskScore = 50
Annotation = {"mitre_attack": ["T1574"]}
Query = (iendswith(Process.Path, "\\regsvr32.exe") or Process.Name == "REGSVR32.EXE") and not (icontains(Process.CommandLine, ".ax") or icontains(Process.CommandLine, ".cpl") or icontains(Process.CommandLine, ".dll") or icontains(Process.CommandLine, ".ocx") or isnull(Process.CommandLine) or Process.CommandLine == "") and not (icontains(Process.CommandLine, ".ppl") or icontains(Process.CommandLine, ".bav"))


[ActivityMonitoringRule platform=Windows]
# Detects the creation of diagcab file, which could be caused by some legitimate installer or is a sign of exploitation (review the filename and its location)
# Author: frack113
RuleId = 3d0ed417-3d94-4963-a562-4a92c940656a
RuleName = Creation of a Diagcab
EventType = File.Create
Tag = creation-of-a-diagcab
RiskScore = 50
Query = iendswith(File.Path, ".diagcab")
GenericProperty1 = File.Path


[ActivityMonitoringRule platform=Windows]
# Detect usage of the "defaultpack.exe" binary as a proxy to launch other programs
# Author: frack113
RuleId = b2309017-4235-44fe-b5af-b15363011957
RuleName = Lolbin Defaultpack.exe Use As Proxy
EventType = Process.Start
Tag = proc-start-lolbin-defaultpack.exe-use-as-proxy
RiskScore = 50
Annotation = {"mitre_attack": ["T1218"]}
Query = iendswith(Parent.Path, "\\defaultpack.exe")
GenericProperty1 = Parent.Path


[ActivityMonitoringRule platform=Windows]
# Detects potentially suspicious SQL queries using SQLCmd targeting the Veeam backup databases in order to steal information.
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleId = 696bfb54-227e-4602-ac5b-30d9d2053312
RuleName = Veeam Backup Database Suspicious Query
EventType = Process.Start
Tag = proc-start-veeam-backup-database-suspicious-query
RiskScore = 50
Annotation = {"mitre_attack": ["T1005"]}
Query = iendswith(Process.Path, "\\sqlcmd.exe") and icontains(Process.CommandLine, "VeeamBackup") and icontains(Process.CommandLine, "From ") and (icontains(Process.CommandLine, "BackupRepositories") or icontains(Process.CommandLine, "Backups") or icontains(Process.CommandLine, "Credentials") or icontains(Process.CommandLine, "HostCreds") or icontains(Process.CommandLine, "SmbFileShares") or icontains(Process.CommandLine, "Ssh_creds") or icontains(Process.CommandLine, "VSphereInfo"))


[ActivityMonitoringRule platform=Windows]
# Detects child processes of "provlaunch.exe" which might indicate potential abuse to proxy execution.
# Author: Nasreddine Bencherchali (Nextron Systems), Swachchhanda Shrawan Poudel
RuleId = 7f5d1c9a-3e83-48df-95a7-2b98aae6c13c
RuleName = Potential Provlaunch.EXE Binary Proxy Execution Abuse
EventType = Process.Start
Tag = proc-start-potential-provlaunch.exe-binary-proxy-execution-abuse
RiskScore = 50
Annotation = {"mitre_attack": ["T1218"]}
Query = iendswith(Parent.Path, "\\provlaunch.exe") and not (iendswith(Process.Path, "\\calc.exe") or iendswith(Process.Path, "\\cmd.exe") or iendswith(Process.Path, "\\cscript.exe") or iendswith(Process.Path, "\\mshta.exe") or iendswith(Process.Path, "\\notepad.exe") or iendswith(Process.Path, "\\powershell.exe") or iendswith(Process.Path, "\\pwsh.exe") or iendswith(Process.Path, "\\regsvr32.exe") or iendswith(Process.Path, "\\rundll32.exe") or iendswith(Process.Path, "\\wscript.exe") or icontains(Process.Path, ":\\PerfLogs\\") or icontains(Process.Path, ":\\Temp\\") or icontains(Process.Path, ":\\Users\\Public\\") or icontains(Process.Path, "\\AppData\\Temp\\") or icontains(Process.Path, "\\Windows\\System32\\Tasks\\") or icontains(Process.Path, "\\Windows\\Tasks\\") or icontains(Process.Path, "\\Windows\\Temp\\"))
GenericProperty1 = Parent.Path


[ActivityMonitoringRule platform=Windows]
# Detects the use of the 'Launch-VsDevShell.ps1' Microsoft signed script to execute commands.
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleId = 45d3a03d-f441-458c-8883-df101a3bb146
RuleName = Launch-VsDevShell.PS1 Proxy Execution
EventType = Process.Start
Tag = proc-start-launch-vsdevshell.ps1-proxy-execution
RiskScore = 50
Annotation = {"mitre_attack": ["T1216.001"]}
Query = icontains(Process.CommandLine, "Launch-VsDevShell.ps1") and (icontains(Process.CommandLine, "VsWherePath ") or icontains(Process.CommandLine, "VsInstallationPath "))


[ActivityMonitoringRule platform=Windows]
# Detects the creation of log files during a TeamViewer remote session
# Author: Florian Roth (Nextron Systems)
RuleId = 162ab1e4-6874-4564-853c-53ec3ab8be01
RuleName = TeamViewer Remote Session
EventType = File.Create
Tag = teamviewer-remote-session
RiskScore = 50
Annotation = {"mitre_attack": ["T1219"]}
Query = iendswith(File.Path, "\\TeamViewer\\RemotePrinting\\tvprint.db") or iendswith(File.Path, "\\TeamViewer\\TVNetwork.log") or icontains(File.Path, "\\TeamViewer") and icontains(File.Path, "_Logfile.log")
GenericProperty1 = File.Path


[ActivityMonitoringRule platform=Windows]
# Loading unsigned image (DLL, EXE) into LSASS process
# Author: Teymur Kheirkhabarov, oscd.community
RuleId = 857c8db3-c89b-42fb-882b-f681c7cf4da2
RuleName = Unsigned Image Loaded Into LSASS Process
EventType = Image.Load
Tag = unsigned-image-loaded-into-lsass-process
RiskScore = 50
Annotation = {"mitre_attack": ["T1003.001"]}
Query = iendswith(Process.Path, "\\lsass.exe") and Image.IsSigned == "false"
GenericProperty1 = Image.IsSigned


[ActivityMonitoringRule platform=Windows]
# Detects process creation events that use the Sysnative folder (common for CobaltStrike spawns)
# Author: Max Altgelt (Nextron Systems)
RuleId = 3c1b5fb0-c72f-45ba-abd1-4d4c353144ab
RuleName = Process Creation Using Sysnative Folder
EventType = Process.Start
Tag = proc-start-process-creation-using-sysnative-folder
RiskScore = 50
Annotation = {"mitre_attack": ["T1055"]}
Query = istartswith(Process.CommandLine, "C:\\Windows\\Sysnative\\")


[ActivityMonitoringRule platform=Windows]
# Detects calls to cmdlets that are used to export certificates from the local certificate store. Threat actors were seen abusing this to steal private keys from compromised machines.
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleId = 9e716b33-63b2-46da-86a4-bd3c3b9b5dfb
RuleName = Certificate Exported Via PowerShell
EventType = Process.Start
Tag = proc-start-certificate-exported-via-powershell
RiskScore = 50
Annotation = {"mitre_attack": ["T1552.004", "T1059.001"]}
Query = icontains(Process.CommandLine, "Export-PfxCertificate ") or icontains(Process.CommandLine, "Export-Certificate ")


[ActivityMonitoringRule platform=Windows]
# Detects attempts to bypass User Account Control (UAC) by hijacking the Microsoft Management Console (MMC) Windows Firewall snap-in
# Author: Tim Rauch
RuleId = e52cb31c-10ed-4aea-bcb7-593c9f4a315b
RuleName = UAC Bypass via Windows Firewall Snap-In Hijack
EventType = Process.Start
Tag = proc-start-uac-bypass-via-windows-firewall-snap-in-hijack
RiskScore = 50
Annotation = {"mitre_attack": ["T1548"]}
Query = iendswith(Parent.Path, "\\mmc.exe") and icontains(Parent.CommandLine, "WF.msc") and not iendswith(Process.Path, "\\WerFault.exe")
GenericProperty1 = Parent.Path
GenericProperty2 = Parent.CommandLine


[ActivityMonitoringRule platform=Windows]
# Shadow Copies creation using operating systems utilities, possible credential access
# Author: Teymur Kheirkhabarov, Daniil Yugoslavskiy, oscd.community
RuleId = b17ea6f7-6e90-447e-a799-e6c0a493d6ce
RuleName = Shadow Copies Creation Using Operating Systems Utilities
EventType = Process.Start
Tag = proc-start-shadow-copies-creation-using-operating-systems-utilities
RiskScore = 50
Annotation = {"mitre_attack": ["T1003", "T1003.002", "T1003.003"]}
Query = (iendswith(Process.Path, "\\powershell.exe") or iendswith(Process.Path, "\\pwsh.exe") or iendswith(Process.Path, "\\wmic.exe") or iendswith(Process.Path, "\\vssadmin.exe") or Process.Name in ["PowerShell.EXE", "pwsh.dll", "wmic.exe", "VSSADMIN.EXE"]) and icontains(Process.CommandLine, "shadow") and icontains(Process.CommandLine, "create")


[ActivityMonitoringRule platform=Windows]
# Detects the usage of "reg.exe" to add Defender folder exclusions. Qbot has been seen using this technique to add exclusions for folders within AppData and ProgramData.
# Author: frack113
RuleId = 48917adc-a28e-4f5d-b729-11e75da8941f
RuleName = Suspicious Windows Defender Folder Exclusion Added Via Reg.EXE
EventType = Process.Start
Tag = proc-start-suspicious-windows-defender-folder-exclusion-added-via-reg.exe
RiskScore = 50
Annotation = {"mitre_attack": ["T1562.001"]}
Query = iendswith(Process.Path, "\\reg.exe") and (icontains(Process.CommandLine, "SOFTWARE\\Microsoft\\Windows Defender\\Exclusions\\Paths") or icontains(Process.CommandLine, "SOFTWARE\\Microsoft\\Microsoft Antimalware\\Exclusions\\Paths")) and icontains(Process.CommandLine, "ADD ") and icontains(Process.CommandLine, "/t ") and icontains(Process.CommandLine, "REG_DWORD ") and icontains(Process.CommandLine, "/v ") and icontains(Process.CommandLine, "/d ") and icontains(Process.CommandLine, "0")


[ActivityMonitoringRule platform=Windows]
# Detects execution of the Notepad++ updater (gup) to launch other commands or executables
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleId = d65aee4d-2292-4cea-b832-83accd6cfa43
RuleName = Arbitrary Binary Execution Using GUP Utility
EventType = Process.Start
Tag = proc-start-arbitrary-binary-execution-using-gup-utility
RiskScore = 50
Query = iendswith(Parent.Path, "\\gup.exe") and iendswith(Process.Path, "\\explorer.exe") and not (iendswith(Process.Path, "\\explorer.exe") and icontains(Process.CommandLine, "\\Notepad++\\notepad++.exe") or icontains(Parent.Path, "\\Notepad++\\updater\\") or isnull(Process.CommandLine))
GenericProperty1 = Parent.Path


[ActivityMonitoringRule platform=Windows]
# Execute commands and binaries from the context of "forfiles". This is used as a LOLBIN for example to bypass application whitelisting.
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleId = 9aa5106d-bce3-4b13-86df-3a20f1d5cf0b
RuleName = Use of Forfiles For Execution
EventType = Process.Start
Tag = proc-start-use-of-forfiles-for-execution
RiskScore = 50
Annotation = {"mitre_attack": ["T1059"]}
Query = (iendswith(Process.Path, "\\forfiles.exe") or Process.Name == "forfiles.exe") and (icontains(Process.CommandLine, " /p ") or icontains(Process.CommandLine, " -p ")) and (icontains(Process.CommandLine, " /m ") or icontains(Process.CommandLine, " -m ")) and (icontains(Process.CommandLine, " /c ") or icontains(Process.CommandLine, " -c "))


[ActivityMonitoringRule platform=Windows]
# Detects suspicious sysprep process start with AppData folder as target (as used by Trojan Syndicasec in Thrip report by Symantec)
# Author: Florian Roth (Nextron Systems)
RuleId = d5b9ae7a-e6fc-405e-80ff-2ff9dcc64e7e
RuleName = Sysprep on AppData Folder
EventType = Process.Start
Tag = proc-start-sysprep-on-appdata-folder
RiskScore = 50
Annotation = {"mitre_attack": ["T1059"]}
Query = iendswith(Process.Path, "\\sysprep.exe") and icontains(Process.CommandLine, "\\AppData\\")


[ActivityMonitoringRule platform=Windows]
# Detects usage of bitsadmin downloading a file to uncommon target folder
# Author: Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)
RuleId = 6e30c82f-a9f8-4aab-b79c-7c12bce6f248
RuleName = File Download Via Bitsadmin To An Uncommon Target Folder
EventType = Process.Start
Tag = proc-start-file-download-via-bitsadmin-to-an-uncommon-target-folder
RiskScore = 50
Annotation = {"mitre_attack": ["T1197", "T1036.003"]}
Query = (iendswith(Process.Path, "\\bitsadmin.exe") or Process.Name == "bitsadmin.exe") and (icontains(Process.CommandLine, " /transfer ") or icontains(Process.CommandLine, " /create ") or icontains(Process.CommandLine, " /addfile ")) and (icontains(Process.CommandLine, "%AppData%") or icontains(Process.CommandLine, "%temp%") or icontains(Process.CommandLine, "%tmp%") or icontains(Process.CommandLine, "\\AppData\\Local\\") or icontains(Process.CommandLine, "C:\\Windows\\Temp\\"))


[ActivityMonitoringRule platform=Windows]
# Detects using Rasautou.exe for loading arbitrary .DLL specified in -d option and executes the export specified in -p.
# Author: Julia Fomina, oscd.community
RuleId = cd3d1298-eb3b-476c-ac67-12847de55813
RuleName = DLL Execution via Rasautou.exe
EventType = Process.Start
Tag = proc-start-dll-execution-via-rasautou.exe
RiskScore = 50
Annotation = {"mitre_attack": ["T1218"]}
Query = (iendswith(Process.Path, "\\rasautou.exe") or Process.Name == "rasdlui.exe") and icontains(Process.CommandLine, " -d ") and icontains(Process.CommandLine, " -p ")


[ActivityMonitoringRule platform=Windows]
# Detects the creation of the "PSScriptPolicyTest" PowerShell script by an uncommon process. This file is usually generated by Microsoft Powershell to test against Applocker.
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleId = 1027d292-dd87-4a1a-8701-2abe04d7783c
RuleName = PSScriptPolicyTest Creation By Uncommon Process
EventType = File.Create
Tag = psscriptpolicytest-creation-by-uncommon-process
RiskScore = 50
Query = icontains(File.Path, "__PSScriptPolicyTest_") and not (iendswith(Process.Path, ":\\Program Files\\PowerShell\\7-preview\\pwsh.exe") or iendswith(Process.Path, ":\\Program Files\\PowerShell\\7\\pwsh.exe") or iendswith(Process.Path, ":\\Windows\\System32\\dsac.exe") or iendswith(Process.Path, ":\\Windows\\System32\\ServerManager.exe") or iendswith(Process.Path, ":\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell_ise.exe") or iendswith(Process.Path, ":\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe") or iendswith(Process.Path, ":\\Windows\\System32\\wsmprovhost.exe") or iendswith(Process.Path, ":\\Windows\\SysWOW64\\WindowsPowerShell\\v1.0\\powershell_ise.exe") or iendswith(Process.Path, ":\\Windows\\SysWOW64\\WindowsPowerShell\\v1.0\\powershell.exe"))
GenericProperty1 = File.Path


[ActivityMonitoringRule platform=Windows]
# Adversaries may establish persistence by executing malicious content triggered by user inactivity.
# Screensavers are programs that execute after a configurable time of user inactivity and consist of Portable Executable (PE) files with a .scr file extension
# Author: frack113
RuleId = 97aa2e88-555c-450d-85a6-229bcd87efb8
RuleName = Suspicious Screensaver Binary File Creation
EventType = File.Create
Tag = suspicious-screensaver-binary-file-creation
RiskScore = 50
Annotation = {"mitre_attack": ["T1546.002"]}
Query = iendswith(File.Path, ".scr") and not (iendswith(Process.Path, "\\Kindle.exe") or iendswith(Process.Path, "\\Bin\\ccSvcHst.exe") or iendswith(Process.Path, "\\TiWorker.exe") and iendswith(File.Path, "\\uwfservicingscr.scr"))
GenericProperty1 = File.Path


[ActivityMonitoringRule platform=Windows]
# Detects execution from an Alternate Data Stream (ADS). Adversaries may use NTFS file attributes to hide their malicious data in order to evade detection
# Author: frack113
RuleId = 7f43c430-5001-4f8b-aaa9-c3b88f18fa5c
RuleName = Execute From Alternate Data Streams
EventType = Process.Start
Tag = proc-start-execute-from-alternate-data-streams
RiskScore = 50
Annotation = {"mitre_attack": ["T1564.004"]}
Query = icontains(Process.CommandLine, "txt:") and (icontains(Process.CommandLine, "type ") and icontains(Process.CommandLine, " > ") or icontains(Process.CommandLine, "makecab ") and icontains(Process.CommandLine, ".cab") or icontains(Process.CommandLine, "reg ") and icontains(Process.CommandLine, " export ") or icontains(Process.CommandLine, "regedit ") and icontains(Process.CommandLine, " /E ") or icontains(Process.CommandLine, "esentutl ") and icontains(Process.CommandLine, " /y ") and icontains(Process.CommandLine, " /d ") and icontains(Process.CommandLine, " /o "))


[ActivityMonitoringRule platform=Windows]
# Detects suspicious execution of 'Msbuild.exe' by a uncommon parent process
# Author: frack113
RuleId = 33be4333-2c6b-44f4-ae28-102cdbde0a31
RuleName = Suspicious Msbuild Execution By Uncommon Parent Process
EventType = Process.Start
Tag = proc-start-suspicious-msbuild-execution-by-uncommon-parent-process
RiskScore = 50
Query = (iendswith(Process.Path, "\\MSBuild.exe") or Process.Name == "MSBuild.exe") and not (iendswith(Parent.Path, "\\devenv.exe") or iendswith(Parent.Path, "\\cmd.exe") or iendswith(Parent.Path, "\\msbuild.exe") or iendswith(Parent.Path, "\\python.exe") or iendswith(Parent.Path, "\\explorer.exe") or iendswith(Parent.Path, "\\nuget.exe"))
GenericProperty1 = Parent.Path


[ActivityMonitoringRule platform=Windows]
# Detects the execution of "ldifde.exe" in order to export organizational Active Directory structure.
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleId = 4f7a6757-ff79-46db-9687-66501a02d9ec
RuleName = Active Directory Structure Export Via Ldifde.EXE
EventType = Process.Start
Tag = proc-start-active-directory-structure-export-via-ldifde.exe
RiskScore = 50
Query = (iendswith(Process.Path, "\\ldifde.exe") or Process.Name == "ldifde.exe") and icontains(Process.CommandLine, "-f") and not icontains(Process.CommandLine, " -i")


[ActivityMonitoringRule platform=Windows]
# Detects potential DLL sideloading of "mfdetours.dll". While using "mftrace.exe" it can be abused to attach to an arbitrary process and force load any DLL named "mfdetours.dll" from the current directory of execution.
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleId = d2605a99-2218-4894-8fd3-2afb7946514d
RuleName = Potential Mfdetours.DLL Sideloading
EventType = Image.Load
Tag = potential-mfdetours.dll-sideloading
RiskScore = 50
Annotation = {"mitre_attack": ["T1574.001", "T1574.002"]}
Query = iendswith(Image.Path, "\\mfdetours.dll") and not icontains(Image.Path, ":\\Program Files (x86)\\Windows Kits\\10\\bin\\")
GenericProperty1 = Image.Path


[ActivityMonitoringRule platform=Windows]
# Detects dropping of dll files in system32 that may be used to retrieve user credentials from LSASS
# Author: Sreeman
RuleId = b7966f4a-b333-455b-8370-8ca53c229762
RuleName = Dropping Of Password Filter DLL
EventType = Process.Start
Tag = proc-start-dropping-of-password-filter-dll
RiskScore = 50
Annotation = {"mitre_attack": ["T1556.002"]}
Query = icontains(Process.CommandLine, "HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa") and icontains(Process.CommandLine, "scecli\\0") and icontains(Process.CommandLine, "reg add")


[ActivityMonitoringRule platform=Windows]
# Detects an svchost process spawning an instance of an office application. This happens when the initial word application creates an instance of one of the Office COM objects such as 'Word.Application', 'Excel.Application', etc.
# This can be used by malicious actors to create malicious Office documents with macros on the fly. (See vba2clr project in the references)
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleId = 9bdaf1e9-fdef-443b-8081-4341b74a7e28
RuleName = Suspicious New Instance Of An Office COM Object
EventType = Process.Start
Tag = proc-start-suspicious-new-instance-of-an-office-com-object
RiskScore = 50
Query = iendswith(Parent.Path, "\\svchost.exe") and (iendswith(Process.Path, "\\winword.exe") or iendswith(Process.Path, "\\excel.exe") or iendswith(Process.Path, "\\powerpnt.exe") or iendswith(Process.Path, "\\msaccess.exe") or iendswith(Process.Path, "\\mspub.exe") or iendswith(Process.Path, "\\eqnedt32.exe") or iendswith(Process.Path, "\\visio.exe"))
GenericProperty1 = Parent.Path


[ActivityMonitoringRule platform=Windows]
# Detects the execution of "lodctr.exe" to rebuild the performance counter registry values. This can be abused by attackers by providing a malicious config file to overwrite performance counter configuration to confuse and evade monitoring and security solutions.
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleId = cc9d3712-6310-4320-b2df-7cb408274d53
RuleName = Rebuild Performance Counter Values Via Lodctr.EXE
EventType = Process.Start
Tag = proc-start-rebuild-performance-counter-values-via-lodctr.exe
RiskScore = 50
Query = iendswith(Process.Path, "\\lodctr.exe") and Process.Name == "LODCTR.EXE" and (icontains(Process.CommandLine, " /r") or icontains(Process.CommandLine, " -r"))


[ActivityMonitoringRule platform=Windows]
# Detects usage of COM objects that can be abused to download files in PowerShell by CLSID
# Author: frack113
RuleId = 02b64f1b-3f33-4e67-aede-ef3b0a5a8fcf
RuleName = Potential COM Objects Download Cradles Usage - Process Creation
EventType = Process.Start
Tag = proc-start-potential-com-objects-download-cradles-usage-process-creation
RiskScore = 50
Annotation = {"mitre_attack": ["T1105"]}
Query = icontains(Process.CommandLine, "[Type]::GetTypeFromCLSID(") and (icontains(Process.CommandLine, "0002DF01-0000-0000-C000-000000000046") or icontains(Process.CommandLine, "F6D90F16-9C73-11D3-B32E-00C04F990BB4") or icontains(Process.CommandLine, "F5078F35-C551-11D3-89B9-0000F81FE221") or icontains(Process.CommandLine, "88d96a0a-f192-11d4-a65f-0040963251e5") or icontains(Process.CommandLine, "AFBA6B42-5692-48EA-8141-DC517DCF0EF1") or icontains(Process.CommandLine, "AFB40FFD-B609-40A3-9828-F88BBE11E4E3") or icontains(Process.CommandLine, "88d96a0b-f192-11d4-a65f-0040963251e5") or icontains(Process.CommandLine, "2087c2f4-2cef-4953-a8ab-66779b670495") or icontains(Process.CommandLine, "000209FF-0000-0000-C000-000000000046") or icontains(Process.CommandLine, "00024500-0000-0000-C000-000000000046"))


[ActivityMonitoringRule platform=Windows]
# Detects usage of special strings/null bits in order to potentially bypass AMSI functionalities
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleId = 92a974db-ab84-457f-9ec0-55db83d7a825
RuleName = Potential AMSI Bypass Using NULL Bits
EventType = Process.Start
Tag = proc-start-potential-amsi-bypass-using-null-bits
RiskScore = 50
Annotation = {"mitre_attack": ["T1562.001"]}
Query = icontains(Process.CommandLine, "if(0){{{0}}}' -f $(0 -as [char]) +") or icontains(Process.CommandLine, "#<NULL>")


[ActivityMonitoringRule platform=Windows]
# Detects uncommon or suspicious child processes spawning from a VsCode "code.exe" process. This could indicate an attempt of persistence via VsCode tasks or terminal profiles.
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleId = 5a3164f2-b373-4152-93cf-090b13c12d27
RuleName = Potentially Suspicious Child Process Of VsCode
EventType = Process.Start
Tag = proc-start-potentially-suspicious-child-process-of-vscode
RiskScore = 50
Annotation = {"mitre_attack": ["T1218", "T1202"]}
Query = iendswith(Parent.Path, "\\code.exe") and (iendswith(Process.Path, "\\calc.exe") or iendswith(Process.Path, "\\regsvr32.exe") or iendswith(Process.Path, "\\rundll32.exe") or iendswith(Process.Path, "\\cscript.exe") or iendswith(Process.Path, "\\wscript.exe") or (iendswith(Process.Path, "\\powershell.exe") or iendswith(Process.Path, "\\pwsh.exe") or iendswith(Process.Path, "\\cmd.exe")) and (icontains(Process.CommandLine, "Invoke-Expressions") or icontains(Process.CommandLine, "IEX") or icontains(Process.CommandLine, "Invoke-Command") or icontains(Process.CommandLine, "ICM") or icontains(Process.CommandLine, "DownloadString") or icontains(Process.CommandLine, "rundll32") or icontains(Process.CommandLine, "regsvr32") or icontains(Process.CommandLine, "wscript") or icontains(Process.CommandLine, "cscript")) or icontains(Process.Path, ":\\Users\\Public\\") or icontains(Process.Path, ":\\Windows\\Temp\\") or icontains(Process.Path, ":\\Temp\\"))
GenericProperty1 = Parent.Path


[ActivityMonitoringRule platform=Windows]
# Detects the addition of a new rule to the Windows firewall via netsh
# Author: Markus Neis, Sander Wiebing
RuleId = cd5cfd80-aa5f-44c0-9c20-108c4ae12e3c
RuleName = New Firewall Rule Added Via Netsh.EXE
EventType = Process.Start
Tag = proc-start-new-firewall-rule-added-via-netsh.exe
RiskScore = 50
Annotation = {"mitre_attack": ["T1562.004"]}
Query = (iendswith(Process.Path, "\\netsh.exe") or Process.Name == "netsh.exe") and icontains(Process.CommandLine, " firewall ") and icontains(Process.CommandLine, " add ") and not (icontains(Process.CommandLine, "\\netsh.exe advfirewall firewall add rule name=Dropbox dir=in action=allow \"program=C:\\Program Files (x86)\\Dropbox\\Client\\Dropbox.exe\" enable=yes profile=Any") or icontains(Process.CommandLine, "\\netsh.exe advfirewall firewall add rule name=Dropbox dir=in action=allow \"program=C:\\Program Files\\Dropbox\\Client\\Dropbox.exe\" enable=yes profile=Any") or istartswith(Parent.Path, "C:\\Windows\\Temp\\asgard2-agent\\") and iendswith(Parent.Path, "\\thor64.exe") and icontains(Process.CommandLine, "advfirewall firewall show rule name=all"))
GenericProperty1 = Parent.Path


[ActivityMonitoringRule platform=Windows]
# Detects the execution of whoami, which is often used by attackers after exploitation / privilege escalation
# Author: Florian Roth (Nextron Systems)
RuleId = e28a5a99-da44-436d-b7a0-2afc20a5f413
RuleName = Whoami Utility Execution
EventType = Process.Start
Tag = proc-start-whoami-utility-execution
RiskScore = 50
Annotation = {"mitre_attack": ["T1033"]}
Query = iendswith(Process.Path, "\\whoami.exe") or Process.Name == "whoami.exe"


[ActivityMonitoringRule platform=Windows]
# Detects when an attacker tries to add a new network provider in order to dump clear text credentials, similar to how the NPPSpy tool does it
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleId = 0442defa-b4a2-41c9-ae2c-ea7042fc4701
RuleName = Potential Credential Dumping Attempt Using New NetworkProvider - REG
EventType = Reg.Any
Tag = potential-credential-dumping-attempt-using-new-networkprovider-reg
RiskScore = 50
Annotation = {"mitre_attack": ["T1003"]}
Query = icontains(Reg.Key.Target, "\\System\\CurrentControlSet\\Services\\") and icontains(Reg.Key.Target, "\\NetworkProvider") and not (icontains(Reg.Key.Target, "\\System\\CurrentControlSet\\Services\\WebClient\\NetworkProvider") or icontains(Reg.Key.Target, "\\System\\CurrentControlSet\\Services\\LanmanWorkstation\\NetworkProvider") or icontains(Reg.Key.Target, "\\System\\CurrentControlSet\\Services\\RDPNP\\NetworkProvider") or Process.Path == "C:\\Windows\\System32\\poqexec.exe")
Hive = HKLM,HKU
GenericProperty1 = Reg.Key.Target


[ActivityMonitoringRule platform=Windows]
# Detects execution of "csc.exe" to compile .NET code. Attackers often leverage this to compile code on the fly and use it in other stages.
# Author: Florian Roth (Nextron Systems), X__Junior (Nextron Systems)
RuleId = dcaa3f04-70c3-427a-80b4-b870d73c94c4
RuleName = Dynamic .NET Compilation Via Csc.EXE
EventType = Process.Start
Tag = proc-start-dynamic-.net-compilation-via-csc.exe
RiskScore = 50
Annotation = {"mitre_attack": ["T1027.004"]}
Query = iendswith(Process.Path, "\\csc.exe") and (icontains(Process.CommandLine, ":\\Perflogs\\") or icontains(Process.CommandLine, ":\\Users\\Public\\") or icontains(Process.CommandLine, "\\AppData\\Local\\Temp\\") or icontains(Process.CommandLine, "\\Temporary Internet") or icontains(Process.CommandLine, "\\Windows\\Temp\\") or icontains(Process.CommandLine, ":\\Users\\") and icontains(Process.CommandLine, "\\Favorites\\") or icontains(Process.CommandLine, ":\\Users\\") and icontains(Process.CommandLine, "\\Favourites\\") or icontains(Process.CommandLine, ":\\Users\\") and icontains(Process.CommandLine, "\\Contacts\\") or icontains(Process.CommandLine, ":\\Users\\") and icontains(Process.CommandLine, "\\Pictures\\") or regex_match(Process.CommandLine, r"([Pp]rogram[Dd]ata|%([Ll]ocal)?[Aa]pp[Dd]ata%|\\\\[Aa]pp[Dd]ata\\\\([Ll]ocal(Ll]ow)?|[Rr]oaming))\\\\[^\\\\]{1,256}$")) and not (istartswith(Parent.Path, "C:\\Program Files (x86)\\") or istartswith(Parent.Path, "C:\\Program Files\\") or Parent.Path == "C:\\Windows\\System32\\sdiagnhost.exe" or Parent.Path == "C:\\Windows\\System32\\inetsrv\\w3wp.exe") and not (Parent.Path == "C:\\ProgramData\\chocolatey\\choco.exe" or icontains(Parent.CommandLine, "\\ProgramData\\Microsoft\\Windows Defender Advanced Threat Protection") or icontains(Parent.CommandLine, "JwB7ACIAZgBhAGkAbABlAGQAIgA6AHQAcgB1AGUALAAiAG0AcwBnACIAOgAiAEEAbgBzAGkAYgBsAGUAIAByAGUAcQB1AGkAcgBlAHMAIABQAG8AdwBlAHIAUwBoAGUAbABsACAAdgAzAC4AMAAgAG8AcgAgAG4AZQB3AGUAcgAiAH0AJw") or icontains(Parent.CommandLine, "cAewAiAGYAYQBpAGwAZQBkACIAOgB0AHIAdQBlACwAIgBtAHMAZwAiADoAIgBBAG4AcwBpAGIAbABlACAAcgBlAHEAdQBpAHIAZQBzACAAUABvAHcAZQByAFMAaABlAGwAbAAgAHYAMwAuADAAIABvAHIAIABuAGUAdwBlAHIAIgB9ACcA") or icontains(Parent.CommandLine, "nAHsAIgBmAGEAaQBsAGUAZAAiADoAdAByAHUAZQAsACIAbQBzAGcAIgA6ACIAQQBuAHMAaQBiAGwAZQAgAHIAZQBxAHUAaQByAGUAcwAgAFAAbwB3AGUAcgBTAGgAZQBsAGwAIAB2ADMALgAwACAAbwByACAAbgBlAHcAZQByACIAfQAnA"))
GenericProperty1 = Parent.Path
GenericProperty2 = Parent.CommandLine


[ActivityMonitoringRule platform=Windows]
# Detects execution of ntdsutil.exe to perform different actions such as restoring snapshots...etc.
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleId = a58353df-af43-4753-bad0-cd83ef35eef5
RuleName = Suspicious Usage Of Active Directory Diagnostic Tool (ntdsutil.exe)
EventType = Process.Start
Tag = proc-start-suspicious-usage-of-active-directory-diagnostic-tool-(ntdsutil.exe)
RiskScore = 50
Annotation = {"mitre_attack": ["T1003.003"]}
Query = (iendswith(Process.Path, "\\ntdsutil.exe") or Process.Name == "ntdsutil.exe") and (icontains(Process.CommandLine, "snapshot") and icontains(Process.CommandLine, "mount ") or icontains(Process.CommandLine, "ac") and icontains(Process.CommandLine, " i") and icontains(Process.CommandLine, " ntds"))


[ActivityMonitoringRule platform=Windows]
# Detects the creation or modification of the Windows Terminal Profile settings file "settings.json" by an uncommon process.
# Author: frack113, Nasreddine Bencherchali (Nextron Systems)
RuleId = 9b64de98-9db3-4033-bd7a-f51430105f00
RuleName = Windows Terminal Profile Settings Modification By Uncommon Process
EventType = File.Create
Tag = windows-terminal-profile-settings-modification-by-uncommon-process
RiskScore = 50
Annotation = {"mitre_attack": ["T1547.015"]}
Query = (iendswith(Process.Path, "\\cmd.exe") or iendswith(Process.Path, "\\cscript.exe") or iendswith(Process.Path, "\\mshta.exe") or iendswith(Process.Path, "\\powershell.exe") or iendswith(Process.Path, "\\pwsh.exe") or iendswith(Process.Path, "\\wscript.exe")) and iendswith(File.Path, "\\AppData\\Local\\Packages\\Microsoft.WindowsTerminal_8wekyb3d8bbwe\\LocalState\\settings.json")
GenericProperty1 = File.Path


[ActivityMonitoringRule platform=Windows]
# Detects potential DLL sideloading of "ShellDispatch.dll"
# Author: X__Junior (Nextron Systems)
RuleId = 844f8eb2-610b-42c8-89a4-47596e089663
RuleName = Potential ShellDispatch.DLL Sideloading
EventType = Image.Load
Tag = potential-shelldispatch.dll-sideloading
RiskScore = 50
Annotation = {"mitre_attack": ["T1574.001", "T1574.002"]}
Query = iendswith(Image.Path, "\\ShellDispatch.dll") and not (icontains(Image.Path, ":\\Users\\") and icontains(Image.Path, "\\AppData\\Local\\Temp\\") or icontains(Image.Path, ":\\Windows\\Temp\\"))
GenericProperty1 = Image.Path


[ActivityMonitoringRule platform=Windows]
# Remote.exe is part of WinDbg in the Windows SDK and can be used for AWL bypass and running remote files.
# Author: Christopher Peacock @SecurePeacock, SCYTHE @scythe_io
RuleId = 4eddc365-79b4-43ff-a9d7-99422dc34b93
RuleName = Use of Remote.exe
EventType = Process.Start
Tag = proc-start-use-of-remote.exe
RiskScore = 50
Annotation = {"mitre_attack": ["T1127"]}
Query = iendswith(Process.Path, "\\remote.exe") or Process.Name == "remote.exe"


[ActivityMonitoringRule platform=Windows]
# Detects DNS queries to a TeamViewer domain only resolved by a TeamViewer client by an image that isn't named TeamViewer (sometimes used by threat actors for obfuscation)
# Author: Florian Roth (Nextron Systems)
RuleId = 778ba9a8-45e4-4b80-8e3e-34a419f0b85e
RuleName = TeamViewer Domain Query By Non-TeamViewer Application
EventType = Dns.Query
Tag = teamviewer-domain-query-by-non-teamviewer-application
RiskScore = 50
Annotation = {"mitre_attack": ["T1219"]}
Query = (Dns.QueryRequest in ["taf.teamviewer.com", "udp.ping.teamviewer.com"]) and not icontains(Process.Path, "TeamViewer")
GenericProperty1 = Dns.QueryRequest


[ActivityMonitoringRule platform=Windows]
# Detects usage of the "Add-WindowsCapability" cmdlet to add Windows capabilities. Notable capabilities could be "OpenSSH" and others.
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleId = b36d01a3-ddaf-4804-be18-18a6247adfcd
RuleName = Add Windows Capability Via PowerShell Cmdlet
EventType = Process.Start
Tag = proc-start-add-windows-capability-via-powershell-cmdlet
RiskScore = 50
Query = (iendswith(Process.Path, "\\powershell.exe") or iendswith(Process.Path, "\\pwsh.exe") or Process.Name in ["PowerShell.EXE", "pwsh.dll"]) and icontains(Process.CommandLine, "Add-WindowsCapability") and icontains(Process.CommandLine, "OpenSSH.")


[ActivityMonitoringRule platform=Windows]
# Detects default RemCom service filename which indicates RemCom service installation and execution
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleId = 7eff1a7f-dd45-4c20-877a-f21e342a7611
RuleName = RemCom Service File Creation
EventType = File.Create
Tag = remcom-service-file-creation
RiskScore = 50
Annotation = {"mitre_attack": ["T1569.002"]}
Query = iendswith(File.Path, "\\RemComSvc.exe")
GenericProperty1 = File.Path


[ActivityMonitoringRule platform=Windows]
# Detects the executiob of TTDInject.exe, which is used by Windows 10 v1809 and newer to debug time travel (underlying call of tttracer.exe)
# Author: frack113
RuleId = b27077d6-23e6-45d2-81a0-e2b356eea5fd
RuleName = Use of TTDInject.exe
EventType = Process.Start
Tag = proc-start-use-of-ttdinject.exe
RiskScore = 50
Annotation = {"mitre_attack": ["T1127"]}
Query = iendswith(Process.Path, "ttdinject.exe") or Process.Name == "TTDInject.EXE"


[ActivityMonitoringRule platform=Windows]
# Detects execution of LiveKD based on PE metadata or image name
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleId = a85f7765-698a-4088-afa0-ecfbf8d01fa4
RuleName = Potential Memory Dumping Activity Via LiveKD
EventType = Process.Start
Tag = proc-start-potential-memory-dumping-activity-via-livekd
RiskScore = 50
Query = iendswith(Process.Path, "\\livekd.exe") or iendswith(Process.Path, "\\livekd64.exe") or Process.Name == "livekd.exe"


[ActivityMonitoringRule platform=Windows]
# A General detection for files being created in the Windows startup directory. This could be an indicator of persistence.
# Author: Roberto Rodriguez (Cyb3rWard0g), OTR (Open Threat Research)
RuleId = 2aa0a6b4-a865-495b-ab51-c28249537b75
RuleName = Startup Folder File Write
EventType = File.Create
Tag = startup-folder-file-write
RiskScore = 50
Annotation = {"mitre_attack": ["T1547.001"]}
Query = icontains(File.Path, "\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp") and not (Process.Path == "C:\\Windows\\System32\\wuauclt.exe" or istartswith(File.Path, "C:\\$WINDOWS.~BT\\NewOS\\"))
GenericProperty1 = File.Path


[ActivityMonitoringRule platform=Windows]
# Detects usage of "PresentationHost" which is a utility that runs ".xbap" (Browser Applications) files to download arbitrary files
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleId = b124ddf4-778d-418e-907f-6dd3fc0d31cd
RuleName = Arbitrary File Download Via PresentationHost.EXE
EventType = Process.Start
Tag = proc-start-arbitrary-file-download-via-presentationhost.exe
RiskScore = 50
Annotation = {"mitre_attack": ["T1218"]}
Query = (iendswith(Process.Path, "\\presentationhost.exe") or Process.Name == "PresentationHost.exe") and (icontains(Process.CommandLine, "http://") or icontains(Process.CommandLine, "https://") or icontains(Process.CommandLine, "ftp://"))


[ActivityMonitoringRule platform=Windows]
# Detects inline Windows shell commands redirecting output via the ">" symbol to a suspicious location
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleId = 8e0bb260-d4b2-4fff-bb8d-3f82118e6892
RuleName = Suspicious CMD Shell Output Redirect
EventType = Process.Start
Tag = proc-start-suspicious-cmd-shell-output-redirect
RiskScore = 50
Annotation = {"mitre_attack": ["T1218"]}
Query = (iendswith(Process.Path, "\\cmd.exe") or Process.Name == "Cmd.Exe") and (icontains(Process.CommandLine, "> \\Users\\Public\\") or icontains(Process.CommandLine, "> %APPDATA%\\") or icontains(Process.CommandLine, "> %TEMP%\\") or icontains(Process.CommandLine, "> %TMP%\\") or icontains(Process.CommandLine, "> %USERPROFILE%\\") or icontains(Process.CommandLine, "> C:\\Temp\\") or icontains(Process.CommandLine, "> C:\\Users\\Public\\") or icontains(Process.CommandLine, "> C:\\Windows\\Temp\\") or icontains(Process.CommandLine, ">\\Users\\Public\\") or icontains(Process.CommandLine, ">%APPDATA%\\") or icontains(Process.CommandLine, ">%TEMP%\\") or icontains(Process.CommandLine, ">%TMP%\\") or icontains(Process.CommandLine, ">%USERPROFILE%\\") or icontains(Process.CommandLine, ">C:\\Temp\\") or icontains(Process.CommandLine, ">C:\\Users\\Public\\") or icontains(Process.CommandLine, ">C:\\Windows\\Temp\\") or (icontains(Process.CommandLine, " >") or icontains(Process.CommandLine, "\">") or icontains(Process.CommandLine, "'>")) and icontains(Process.CommandLine, "C:\\Users\\") and icontains(Process.CommandLine, "\\AppData\\Local\\"))


[ActivityMonitoringRule platform=Windows]
# Detects execution of "curl.exe" with the "file://" protocol handler in order to read local files.
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleId = aa6f6ea6-0676-40dd-b510-6e46f02d8867
RuleName = Local File Read Using Curl.EXE
EventType = Process.Start
Tag = proc-start-local-file-read-using-curl.exe
RiskScore = 50
Query = (iendswith(Process.Path, "\\curl.exe") or Process.Name == "curl.exe") and icontains(Process.CommandLine, "file:///")


[ActivityMonitoringRule platform=Windows]
# Detects execution of regsvr32 where the DLL is located in a potentially suspicious location.
# Author: Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)
RuleId = 9525dc73-0327-438c-8c04-13c0e037e9da
RuleName = Regsvr32 Execution From Potential Suspicious Location
EventType = Process.Start
Tag = proc-start-regsvr32-execution-from-potential-suspicious-location
RiskScore = 50
Annotation = {"mitre_attack": ["T1218.010"]}
Query = (iendswith(Process.Path, "\\regsvr32.exe") or Process.Name == "REGSVR32.EXE") and (icontains(Process.CommandLine, ":\\ProgramData\\") or icontains(Process.CommandLine, ":\\Temp\\") or icontains(Process.CommandLine, ":\\Users\\Public\\") or icontains(Process.CommandLine, ":\\Windows\\Temp\\") or icontains(Process.CommandLine, "\\AppData\\Local\\Temp\\") or icontains(Process.CommandLine, "\\AppData\\Roaming\\"))


[ActivityMonitoringRule platform=Windows]
# Detects execution of "odbcconf" with the "-f" flag in order to load a response file which might contain a malicious action.
# Author: Kirill Kiryanov, Beyu Denis, Daniil Yugoslavskiy, oscd.community, Nasreddine Bencherchali (Nextron Systems)
RuleId = 5f03babb-12db-4eec-8c82-7b4cb5580868
RuleName = Response File Execution Via Odbcconf.EXE
EventType = Process.Start
Tag = proc-start-response-file-execution-via-odbcconf.exe
RiskScore = 50
Annotation = {"mitre_attack": ["T1218.008"]}
Query = (iendswith(Process.Path, "\\odbcconf.exe") or Process.Name == "odbcconf.exe") and (icontains(Process.CommandLine, " -f ") or icontains(Process.CommandLine, " /f ")) and icontains(Process.CommandLine, ".rsp")


[ActivityMonitoringRule platform=Windows]
# Detects when the Console Window Host (conhost.exe) process is spawned by an uncommon parent process, which could be indicative of potential code injection activity.
# Author: Tim Rauch
RuleId = cbb9e3d1-2386-4e59-912e-62f1484f7a89
RuleName = Conhost Spawned By Uncommon Parent Process
EventType = Process.Start
Tag = proc-start-conhost-spawned-by-uncommon-parent-process
RiskScore = 50
Annotation = {"mitre_attack": ["T1059"]}
Query = iendswith(Process.Path, "\\conhost.exe") and (iendswith(Parent.Path, "\\explorer.exe") or iendswith(Parent.Path, "\\lsass.exe") or iendswith(Parent.Path, "\\regsvr32.exe") or iendswith(Parent.Path, "\\rundll32.exe") or iendswith(Parent.Path, "\\services.exe") or iendswith(Parent.Path, "\\smss.exe") or iendswith(Parent.Path, "\\spoolsv.exe") or iendswith(Parent.Path, "\\svchost.exe") or iendswith(Parent.Path, "\\userinit.exe") or iendswith(Parent.Path, "\\wininit.exe") or iendswith(Parent.Path, "\\winlogon.exe")) and not (icontains(Parent.CommandLine, "-k apphost -s AppHostSvc") or icontains(Parent.CommandLine, "-k imgsvc") or icontains(Parent.CommandLine, "-k localService -p -s RemoteRegistry") or icontains(Parent.CommandLine, "-k LocalSystemNetworkRestricted -p -s NgcSvc") or icontains(Parent.CommandLine, "-k NetSvcs -p -s NcaSvc") or icontains(Parent.CommandLine, "-k netsvcs -p -s NetSetupSvc") or icontains(Parent.CommandLine, "-k netsvcs -p -s wlidsvc") or icontains(Parent.CommandLine, "-k NetworkService -p -s DoSvc") or icontains(Parent.CommandLine, "-k wsappx -p -s AppXSvc") or icontains(Parent.CommandLine, "-k wsappx -p -s ClipSVC")) and not (icontains(Parent.CommandLine, "C:\\Program Files (x86)\\Dropbox\\Client\\") or icontains(Parent.CommandLine, "C:\\Program Files\\Dropbox\\Client\\"))
GenericProperty1 = Parent.Path
GenericProperty2 = Parent.CommandLine


[ActivityMonitoringRule platform=Windows]
# Extexport.exe loads dll and is execute from other folder the original path
# Author: frack113
RuleId = fb0b815b-f5f6-4f50-970f-ffe21f253f7a
RuleName = Suspicious Extexport Execution
EventType = Process.Start
Tag = proc-start-suspicious-extexport-execution
RiskScore = 50
Annotation = {"mitre_attack": ["T1218"]}
Query = icontains(Process.CommandLine, "Extexport.exe") or iendswith(Process.Path, "\\Extexport.exe") or Process.Name == "extexport.exe"


[ActivityMonitoringRule platform=Windows]
# Uninstall an application with wmic
# Author: frack113
RuleId = b53317a0-8acf-4fd1-8de8-a5401e776b96
RuleName = Application Removed Via Wmic.EXE
EventType = Process.Start
Tag = proc-start-application-removed-via-wmic.exe
RiskScore = 50
Annotation = {"mitre_attack": ["T1047"]}
Query = (iendswith(Process.Path, "\\WMIC.exe") or Process.Name == "wmic.exe") and (icontains(Process.CommandLine, "call") or icontains(Process.CommandLine, "uninstall"))


[ActivityMonitoringRule platform=Windows]
# Detects the creation of a macro file for Outlook.
# Author: @ScoubiMtl
RuleId = 8c31f563-f9a7-450c-bfa8-35f8f32f1f61
RuleName = New Outlook Macro Created
EventType = File.Create
Tag = new-outlook-macro-created
RiskScore = 50
Annotation = {"mitre_attack": ["T1137", "T1008", "T1546"]}
Query = iendswith(Process.Path, "\\outlook.exe") and iendswith(File.Path, "\\Microsoft\\Outlook\\VbaProject.OTM")
GenericProperty1 = File.Path


[ActivityMonitoringRule platform=Windows]
# Detects the use of "DumpMinitool.exe" a tool that allows the dump of process memory via the use of the "MiniDumpWriteDump"
# Author: Nasreddine Bencherchali (Nextron Systems), Florian Roth (Nextron Systems)
RuleId = dee0a7a3-f200-4112-a99b-952196d81e42
RuleName = DumpMinitool Execution
EventType = Process.Start
Tag = proc-start-dumpminitool-execution
RiskScore = 50
Annotation = {"mitre_attack": ["T1036", "T1003.001"]}
Query = (iendswith(Process.Path, "\\DumpMinitool.exe") or iendswith(Process.Path, "\\DumpMinitool.x86.exe") or iendswith(Process.Path, "\\DumpMinitool.arm64.exe") or Process.Name in ["DumpMinitool.exe", "DumpMinitool.x86.exe", "DumpMinitool.arm64.exe"]) and (icontains(Process.CommandLine, " Full") or icontains(Process.CommandLine, " Mini") or icontains(Process.CommandLine, " WithHeap"))


[ActivityMonitoringRule platform=Windows]
# Detects execution of "curl.exe" with the "-c" flag in order to save cookie data.
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleId = 5a6e1e16-07de-48d8-8aae-faa766c05e88
RuleName = Potential Cookies Session Hijacking
EventType = Process.Start
Tag = proc-start-potential-cookies-session-hijacking
RiskScore = 50
Query = (iendswith(Process.Path, "\\curl.exe") or Process.Name == "curl.exe") and (regex_match(Process.CommandLine, r"\\s-c\\s") or icontains(Process.CommandLine, "--cookie-jar"))


[ActivityMonitoringRule platform=Windows]
# Detects the execution of certutil with the "encode" flag to encode a file to base64. This can be abused by threat actors and attackers for data exfiltration
# Author: Florian Roth (Nextron Systems), Jonhnathan Ribeiro, oscd.community, Nasreddine Bencherchali (Nextron Systems)
RuleId = e62a9f0c-ca1e-46b2-85d5-a6da77f86d1a
RuleName = File Encoded To Base64 Via Certutil.EXE
EventType = Process.Start
Tag = proc-start-file-encoded-to-base64-via-certutil.exe
RiskScore = 50
Annotation = {"mitre_attack": ["T1027"]}
Query = (iendswith(Process.Path, "\\certutil.exe") or Process.Name == "CertUtil.exe") and (icontains(Process.CommandLine, "-encode") or icontains(Process.CommandLine, "/encode"))


[ActivityMonitoringRule platform=Windows]
# Detects usage of the built-in PowerShell cmdlet "Enable-WindowsOptionalFeature" used as a Deployment Image Servicing and Management tool.
# Similar to DISM.exe, this cmdlet is used to enumerate, install, uninstall, configure, and update features and packages in Windows images
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleId = c740d4cf-a1e9-41de-bb16-8a46a4f57918
RuleName = Potential Suspicious Windows Feature Enabled - ProcCreation
EventType = Process.Start
Tag = proc-start-potential-suspicious-windows-feature-enabled-proccreation
RiskScore = 50
Query = icontains(Process.CommandLine, "Enable-WindowsOptionalFeature") and icontains(Process.CommandLine, "-Online") and icontains(Process.CommandLine, "-FeatureName") and (icontains(Process.CommandLine, "TelnetServer") or icontains(Process.CommandLine, "Internet-Explorer-Optional-amd64") or icontains(Process.CommandLine, "TFTP") or icontains(Process.CommandLine, "SMB1Protocol") or icontains(Process.CommandLine, "Client-ProjFS") or icontains(Process.CommandLine, "Microsoft-Windows-Subsystem-Linux"))


[ActivityMonitoringRule platform=Windows]
# Detects DLL sideloading of VMGuestLib.dll by the WmiApSrv service.
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleId = 70e8e9b4-6a93-4cb7-8cde-da69502e7aff
RuleName = VMGuestLib DLL Sideload
EventType = Image.Load
Tag = vmguestlib-dll-sideload
RiskScore = 50
Annotation = {"mitre_attack": ["T1574.001", "T1574.002"]}
Query = icontains(Image.Path, "\\VMware\\VMware Tools\\vmStatsProvider\\win32") and icontains(Image.Path, "\\vmGuestLib.dll") and iendswith(Process.Path, "\\Windows\\System32\\wbem\\WmiApSrv.exe") and not Image.IsSigned == "true"
GenericProperty1 = Image.Path
GenericProperty2 = Image.IsSigned


[ActivityMonitoringRule platform=Windows]
# Attempts to access unattend.xml, where credentials are commonly stored, within the Panther directory where installation logs are stored.
# If these files exist, their contents will be displayed. They are used to store credentials/answers during the unattended windows install process
# Author: frack113
RuleId = 1a3d42dd-3763-46b9-8025-b5f17f340dfb
RuleName = Suspicious Unattend.xml File Access
EventType = File.Create
Tag = suspicious-unattend.xml-file-access
RiskScore = 50
Annotation = {"mitre_attack": ["T1552.001"]}
Query = iendswith(File.Path, "\\unattend.xml")
GenericProperty1 = File.Path


[ActivityMonitoringRule platform=Windows]
# Detects the creation of suspcious binary files inside the "\windows\system32\spool\drivers\color\" as seen in the blog referenced below
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleId = ce7066a6-508a-42d3-995b-2952c65dc2ce
RuleName = Drop Binaries Into Spool Drivers Color Folder
EventType = File.Create
Tag = drop-binaries-into-spool-drivers-color-folder
RiskScore = 50
Query = istartswith(File.Path, "C:\\Windows\\System32\\spool\\drivers\\color\\") and (iendswith(File.Path, ".dll") or iendswith(File.Path, ".exe") or iendswith(File.Path, ".sys"))
GenericProperty1 = File.Path


[ActivityMonitoringRule platform=Windows]
# Detects the execution of a renamed binary often used by attackers or malware leveraging new Sysmon OriginalFileName datapoint.
# Author: Matthew Green @mgreen27, Ecco, James Pemberton @4A616D6573, oscd.community, Andreas Hunkeler (@Karneades)
RuleId = 36480ae1-a1cb-4eaa-a0d6-29801d7e9142
RuleName = Potential Defense Evasion Via Binary Rename
EventType = Process.Start
Tag = proc-start-potential-defense-evasion-via-binary-rename
RiskScore = 50
Annotation = {"mitre_attack": ["T1036.003"]}
Query = (Process.Name in ["Cmd.Exe", "CONHOST.EXE", "7z.exe", "WinRAR.exe", "wevtutil.exe", "net.exe", "net1.exe", "netsh.exe", "InstallUtil.exe"]) and not (iendswith(Process.Path, "\\cmd.exe") or iendswith(Process.Path, "\\conhost.exe") or iendswith(Process.Path, "\\7z.exe") or iendswith(Process.Path, "\\WinRAR.exe") or iendswith(Process.Path, "\\wevtutil.exe") or iendswith(Process.Path, "\\net.exe") or iendswith(Process.Path, "\\net1.exe") or iendswith(Process.Path, "\\netsh.exe") or iendswith(Process.Path, "\\InstallUtil.exe"))


[ActivityMonitoringRule platform=Windows]
# setupapi.dll library provide InstallHinfSection function for processing INF files. INF file may contain instructions allowing to create values in the registry, modify files and install drivers. This technique could be used to obtain persistence via modifying one of Run or RunOnce registry keys, run process or use other DLLs chain calls (see references) InstallHinfSection function in setupapi.dll calls runonce.exe executable regardless of actual content of INF file.
# Author: Konstantin Grishchenko, oscd.community
RuleId = 285b85b1-a555-4095-8652-a8a4106af63f
RuleName = Suspicious Rundll32 Setupapi.dll Activity
EventType = Process.Start
Tag = proc-start-suspicious-rundll32-setupapi.dll-activity
RiskScore = 50
Annotation = {"mitre_attack": ["T1218.011"]}
Query = iendswith(Process.Path, "\\runonce.exe") and iendswith(Parent.Path, "\\rundll32.exe") and icontains(Parent.CommandLine, "setupapi.dll") and icontains(Parent.CommandLine, "InstallHinfSection")
GenericProperty1 = Parent.Path
GenericProperty2 = Parent.CommandLine


[ActivityMonitoringRule platform=Windows]
# Detects possible execution via LNK file accessed on a WebDAV server.
# Author: Micah Babinski
RuleId = 1412aa78-a24c-4abd-83df-767dfb2c5bbe
RuleName = Potentially Suspicious WebDAV LNK Execution
EventType = Process.Start
Tag = proc-start-potentially-suspicious-webdav-lnk-execution
RiskScore = 50
Annotation = {"mitre_attack": ["T1059.001", "T1204"]}
Query = iendswith(Parent.Path, "\\explorer.exe") and (iendswith(Process.Path, "\\cmd.exe") or iendswith(Process.Path, "\\cscript.exe") or iendswith(Process.Path, "\\mshta.exe") or iendswith(Process.Path, "\\powershell.exe") or iendswith(Process.Path, "\\pwsh.exe") or iendswith(Process.Path, "\\wscript.exe")) and icontains(Process.CommandLine, "\\DavWWWRoot\\")
GenericProperty1 = Parent.Path


[ActivityMonitoringRule platform=Windows]
# Detects creation of a new service (kernel driver) with the type "kernel"
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleId = 431a1fdb-4799-4f3b-91c3-a683b003fc49
RuleName = New Kernel Driver Via SC.EXE
EventType = Process.Start
Tag = proc-start-new-kernel-driver-via-sc.exe
RiskScore = 50
Annotation = {"mitre_attack": ["T1543.003"]}
Query = iendswith(Process.Path, "\\sc.exe") and (icontains(Process.CommandLine, "create") or icontains(Process.CommandLine, "config")) and icontains(Process.CommandLine, "binPath") and icontains(Process.CommandLine, "type") and icontains(Process.CommandLine, "kernel")


[ActivityMonitoringRule platform=Windows]
# Detects the load of known malicious drivers via their names only.
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleId = 39b64854-5497-4b57-a448-40977b8c9679
RuleName = Malicious Driver Load By Name
EventType = Driver.Load
Tag = malicious-driver-load-by-name
RiskScore = 50
Annotation = {"mitre_attack": ["T1543.003", "T1068"]}
Query = iendswith(Image.Path, "\\malicious.sys") or iendswith(Image.Path, "\\daxin_blank5.sys") or iendswith(Image.Path, "\\ntbios.sys") or iendswith(Image.Path, "\\kt2.sys") or iendswith(Image.Path, "\\7.sys") or iendswith(Image.Path, "\\daxin_blank1.sys") or iendswith(Image.Path, "\\ktes.sys") or iendswith(Image.Path, "\\e29f6311ae87542b3d693c1f38e4e3ad.sys") or iendswith(Image.Path, "\\wantd_3.sys") or iendswith(Image.Path, "\\mlgbbiicaihflrnh.sys") or iendswith(Image.Path, "\\poortry.sys") or iendswith(Image.Path, "\\daxin_blank2.sys") or iendswith(Image.Path, "\\spwizimgvt.sys") or iendswith(Image.Path, "\\daxin_blank6.sys") or iendswith(Image.Path, "\\nlslexicons0024uvn.sys") or iendswith(Image.Path, "\\daxin_blank.sys") or iendswith(Image.Path, "\\air_system10.sys") or iendswith(Image.Path, "\\4748696211bd56c2d93c21cab91e82a5.sys") or iendswith(Image.Path, "\\a9df5964635ef8bd567ae487c3d214c4.sys") or iendswith(Image.Path, "\\daxin_blank3.sys") or iendswith(Image.Path, "\\mimikatz.sys") or iendswith(Image.Path, "\\fur.sys") or iendswith(Image.Path, "\\gftkyj64.sys") or iendswith(Image.Path, "\\gmer64.sys") or iendswith(Image.Path, "\\mimidrv.sys") or iendswith(Image.Path, "\\dkrtk.sys") or iendswith(Image.Path, "\\4118b86e490aed091b1a219dba45f332.sys") or iendswith(Image.Path, "\\1fc7aeeff3ab19004d2e53eae8160ab1.sys") or iendswith(Image.Path, "\\msqpq.sys") or iendswith(Image.Path, "\\lctka.sys") or iendswith(Image.Path, "\\c94f405c5929cfcccc8ad00b42c95083.sys") or iendswith(Image.Path, "\\pciecubed.sys") or iendswith(Image.Path, "\\telephonuafy.sys") or iendswith(Image.Path, "\\poortry1.sys") or iendswith(Image.Path, "\\6771b13a53b9c7449d4891e427735ea2.sys") or iendswith(Image.Path, "\\834761775.sys") or iendswith(Image.Path, "\\blacklotus_driver.sys") or iendswith(Image.Path, "\\fgme.sys") or iendswith(Image.Path, "\\kapchelper_x64.sys") or iendswith(Image.Path, "\\typelibde.sys") or iendswith(Image.Path, "\\wfshbr64.sys") or iendswith(Image.Path, "\\wantd_2.sys") or iendswith(Image.Path, "\\a26363e7b02b13f2b8d697abb90cd5c3.sys") or iendswith(Image.Path, "\\sense5ext.sys") or iendswith(Image.Path, "\\nodedriver.sys") or iendswith(Image.Path, "\\a236e7d654cd932b7d11cb604629a2d0.sys") or iendswith(Image.Path, "\\ktmutil7odm.sys") or iendswith(Image.Path, "\\wintapix.sys") or iendswith(Image.Path, "\\prokiller64.sys") or iendswith(Image.Path, "\\reddriver.sys") or iendswith(Image.Path, "\\4.sys") or iendswith(Image.Path, "\\wantd_6.sys") or iendswith(Image.Path, "\\ktgn.sys") or iendswith(Image.Path, "\\poortry2.sys") or iendswith(Image.Path, "\\ntbios_2.sys") or iendswith(Image.Path, "\\nqrmq.sys") or iendswith(Image.Path, "\\wantd_4.sys") or iendswith(Image.Path, "\\ef0e1725aaf0c6c972593f860531a2ea.sys") or iendswith(Image.Path, "\\wantd.sys") or iendswith(Image.Path, "\\be6318413160e589080df02bb3ca6e6a.sys") or iendswith(Image.Path, "\\ndislan.sys") or iendswith(Image.Path, "\\5a4fe297c7d42539303137b6d75b150d.sys") or iendswith(Image.Path, "\\wantd_5.sys") or iendswith(Image.Path, "\\e939448b28a4edc81f1f974cebf6e7d2.sys") or iendswith(Image.Path, "\\2.sys") or iendswith(Image.Path, "\\windbg.sys") or iendswith(Image.Path, "\\mjj0ge.sys") or iendswith(Image.Path, "\\daxin_blank4.sys")
GenericProperty1 = Image.Path


[ActivityMonitoringRule platform=Windows]
# Detects uncommon or suspicious child processes spawning from a WSL process. This could indicate an attempt to evade parent/child relationship detections or persistence attempts via cron using WSL
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleId = 2267fe65-0681-42ad-9a6d-46553d3f3480
RuleName = WSL Child Process Anomaly
EventType = Process.Start
Tag = proc-start-wsl-child-process-anomaly
RiskScore = 50
Annotation = {"mitre_attack": ["T1218", "T1202"]}
Query = (iendswith(Parent.Path, "\\wsl.exe") or iendswith(Parent.Path, "\\wslhost.exe")) and (iendswith(Process.Path, "\\calc.exe") or iendswith(Process.Path, "\\cmd.exe") or iendswith(Process.Path, "\\cscript.exe") or iendswith(Process.Path, "\\mshta.exe") or iendswith(Process.Path, "\\powershell.exe") or iendswith(Process.Path, "\\pwsh.exe") or iendswith(Process.Path, "\\regsvr32.exe") or iendswith(Process.Path, "\\rundll32.exe") or iendswith(Process.Path, "\\wscript.exe") or icontains(Process.Path, "\\AppData\\Local\\Temp\\") or icontains(Process.Path, "C:\\Users\\Public\\") or icontains(Process.Path, "C:\\Windows\\Temp\\") or icontains(Process.Path, "C:\\Temp\\") or icontains(Process.Path, "\\Downloads\\") or icontains(Process.Path, "\\Desktop\\"))
GenericProperty1 = Parent.Path


[ActivityMonitoringRule platform=Windows]
# Download and compress a remote file and store it in a cab file on local machine.
# Author: frack113
RuleId = 185d7418-f250-42d0-b72e-0c8b70661e93
RuleName = Suspicious Diantz Download and Compress Into a CAB File
EventType = Process.Start
Tag = proc-start-suspicious-diantz-download-and-compress-into-a-cab-file
RiskScore = 50
Annotation = {"mitre_attack": ["T1105"]}
Query = icontains(Process.CommandLine, "diantz.exe") and icontains(Process.CommandLine, " \\\\") and icontains(Process.CommandLine, ".cab")


[ActivityMonitoringRule platform=Windows]
# Detects the usage of "mstsc.exe" with the "/v" flag to initiate a connection to a remote server.
# Adversaries may use valid accounts to log into a computer using the Remote Desktop Protocol (RDP). The adversary may then perform actions as the logged-on user.
# Author: frack113
RuleId = 954f0af7-62dd-418f-b3df-a84bc2c7a774
RuleName = New Remote Desktop Connection Initiated Via Mstsc.EXE
EventType = Process.Start
Tag = proc-start-new-remote-desktop-connection-initiated-via-mstsc.exe
RiskScore = 50
Annotation = {"mitre_attack": ["T1021.001"]}
Query = (iendswith(Process.Path, "\\mstsc.exe") or Process.Name == "mstsc.exe") and icontains(Process.CommandLine, " /v:") and not (Parent.Path == "C:\\Windows\\System32\\lxss\\wslhost.exe" and icontains(Process.CommandLine, "C:\\ProgramData\\Microsoft\\WSL\\wslg.rdp"))
GenericProperty1 = Parent.Path


[ActivityMonitoringRule platform=Windows]
# Detects the execution of a renamed "ftp.exe" binary based on the PE metadata fields
# Author: Victor Sergeev, oscd.community
RuleId = 277a4393-446c-449a-b0ed-7fdc7795244c
RuleName = Renamed FTP.EXE Execution
EventType = Process.Start
Tag = proc-start-renamed-ftp.exe-execution
RiskScore = 50
Annotation = {"mitre_attack": ["T1059", "T1202"]}
Query = Process.Name == "ftp.exe" and not iendswith(Process.Path, "\\ftp.exe")


[ActivityMonitoringRule platform=Windows]
# Detects suspicious reconnaissance command line activity on Windows systems using the PowerShell Get-LocalGroupMember Cmdlet
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleId = c8a180d6-47a3-4345-a609-53f9c3d834fc
RuleName = Suspicious Reconnaissance Activity Using Get-LocalGroupMember Cmdlet
EventType = Process.Start
Tag = proc-start-suspicious-reconnaissance-activity-using-get-localgroupmember-cmdlet
RiskScore = 50
Annotation = {"mitre_attack": ["T1087.001"]}
Query = icontains(Process.CommandLine, "Get-LocalGroupMember ") and (icontains(Process.CommandLine, "domain admins") or icontains(Process.CommandLine, " administrator") or icontains(Process.CommandLine, " administrateur") or icontains(Process.CommandLine, "enterprise admins") or icontains(Process.CommandLine, "Exchange Trusted Subsystem") or icontains(Process.CommandLine, "Remote Desktop Users") or icontains(Process.CommandLine, "Utilisateurs du Bureau à distance") or icontains(Process.CommandLine, "Usuarios de escritorio remoto"))


[ActivityMonitoringRule platform=Windows]
# Detects usage of OpenConsole binary as a LOLBIN to launch other binaries to bypass application Whitelisting
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleId = 814c95cc-8192-4378-a70a-f1aafd877af1
RuleName = Use of OpenConsole
EventType = Process.Start
Tag = proc-start-use-of-openconsole
RiskScore = 50
Annotation = {"mitre_attack": ["T1059"]}
Query = (Process.Name == "OpenConsole.exe" or iendswith(Process.Path, "\\OpenConsole.exe")) and not istartswith(Process.Path, "C:\\Program Files\\WindowsApps\\Microsoft.WindowsTerminal")


[ActivityMonitoringRule platform=Windows]
# Detects uncommon child processes of Appvlp.EXE
# Appvlp or the Application Virtualization Utility is included with Microsoft Office. Attackers are able to abuse "AppVLP" to execute shell commands.
# Normally, this binary is used for Application Virtualization, but it can also be abused to circumvent the ASR file path rule folder
# or to mark a file as a system file.
# Author: Sreeman
RuleId = 9c7e131a-0f2c-4ae0-9d43-b04f4e266d43
RuleName = Uncommon Child Process Of Appvlp.EXE
EventType = Process.Start
Tag = proc-start-uncommon-child-process-of-appvlp.exe
RiskScore = 50
Annotation = {"mitre_attack": ["T1218"]}
Query = iendswith(Parent.Path, "\\appvlp.exe") and not (iendswith(Process.Path, ":\\Windows\\SysWOW64\\rundll32.exe") or iendswith(Process.Path, ":\\Windows\\System32\\rundll32.exe")) and not (icontains(Process.Path, ":\\Program Files\\Microsoft Office") and iendswith(Process.Path, "\\msoasb.exe") or icontains(Process.Path, ":\\Program Files\\Microsoft Office") and icontains(Process.Path, "\\SkypeSrv\\") and iendswith(Process.Path, "\\SKYPESERVER.EXE") or icontains(Process.Path, ":\\Program Files\\Microsoft Office") and iendswith(Process.Path, "\\MSOUC.EXE"))
GenericProperty1 = Parent.Path


[ActivityMonitoringRule platform=Windows]
# Detects DNS queries initiated by "Regsvr32.exe"
# Author: Dmitriy Lifanov, oscd.community
RuleId = 36e037c4-c228-4866-b6a3-48eb292b9955
RuleName = DNS Query Request By Regsvr32.EXE
EventType = Dns.Query
Tag = dns-query-request-by-regsvr32.exe
RiskScore = 50
Annotation = {"mitre_attack": ["T1559.001", "T1218.010"]}
Query = iendswith(Process.Path, "\\regsvr32.exe")


[ActivityMonitoringRule platform=Windows]
# Adversaries may establish persistence by executing malicious content triggered by user inactivity.
# Screensavers are programs that execute after a configurable time of user inactivity and consist of Portable Executable (PE) files with a .scr file extension
# Author: frack113
RuleId = 0fc35fc3-efe6-4898-8a37-0b233339524f
RuleName = Suspicious ScreenSave Change by Reg.exe
EventType = Process.Start
Tag = proc-start-suspicious-screensave-change-by-reg.exe
RiskScore = 50
Annotation = {"mitre_attack": ["T1546.002"]}
Query = iendswith(Process.Path, "\\reg.exe") and (icontains(Process.CommandLine, "HKEY_CURRENT_USER\\Control Panel\\Desktop") or icontains(Process.CommandLine, "HKCU\\Control Panel\\Desktop")) and (icontains(Process.CommandLine, "/v ScreenSaveActive") and icontains(Process.CommandLine, "/t REG_SZ") and icontains(Process.CommandLine, "/d 1") and icontains(Process.CommandLine, "/f") or icontains(Process.CommandLine, "/v ScreenSaveTimeout") and icontains(Process.CommandLine, "/t REG_SZ") and icontains(Process.CommandLine, "/d ") and icontains(Process.CommandLine, "/f") or icontains(Process.CommandLine, "/v ScreenSaverIsSecure") and icontains(Process.CommandLine, "/t REG_SZ") and icontains(Process.CommandLine, "/d 0") and icontains(Process.CommandLine, "/f") or icontains(Process.CommandLine, "/v SCRNSAVE.EXE") and icontains(Process.CommandLine, "/t REG_SZ") and icontains(Process.CommandLine, "/d ") and icontains(Process.CommandLine, ".scr") and icontains(Process.CommandLine, "/f"))


[ActivityMonitoringRule platform=Windows]
# Detects potential commandline obfuscation using known escape characters
# Author: juju4
RuleId = f0cdd048-82dc-4f7a-8a7a-b87a52b6d0fd
RuleName = Potential Commandline Obfuscation Using Escape Characters
EventType = Process.Start
Tag = proc-start-potential-commandline-obfuscation-using-escape-characters
RiskScore = 50
Annotation = {"mitre_attack": ["T1140"]}
Query = icontains(Process.CommandLine, "h^t^t^p") or icontains(Process.CommandLine, "h\"t\"t\"p")


[ActivityMonitoringRule platform=Windows]
# Detects the execution of wmic with the "qfe" flag in order to obtain information about installed hotfix updates on the system. This is often used by pentester and attacker enumeration scripts
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleId = dfd2fcb7-8bd5-4daa-b132-5adb61d6ad45
RuleName = Windows Hotfix Updates Reconnaissance Via Wmic.EXE
EventType = Process.Start
Tag = proc-start-windows-hotfix-updates-reconnaissance-via-wmic.exe
RiskScore = 50
Annotation = {"mitre_attack": ["T1047"]}
Query = (Process.Name == "wmic.exe" or iendswith(Process.Path, "\\WMIC.exe")) and icontains(Process.CommandLine, " qfe")


[ActivityMonitoringRule platform=Windows]
# Detects an a non-browser process interacting with the Reddit API which could indicate use of a covert C2 such as RedditC2
# Author: Gavin Knapp
RuleId = d7b09985-95a3-44be-8450-b6eadf49833e
RuleName = Suspicious Non-Browser Network Communication With Reddit API
EventType = Net.Any
Tag = suspicious-non-browser-network-communication-with-reddit-api
RiskScore = 50
Annotation = {"mitre_attack": ["T1102"]}
Query = icontains(Net.Target.Name, "reddit.com") and not (iendswith(Process.Path, "\\brave.exe") or Process.Path in ["C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe", "C:\\Program Files (x86)\\Google\\Chrome\\Application\\chrome.exe"] or Process.Path in ["C:\\Program Files\\Mozilla Firefox\\firefox.exe", "C:\\Program Files (x86)\\Mozilla Firefox\\firefox.exe"] or Process.Path in ["C:\\Program Files (x86)\\Internet Explorer\\iexplore.exe", "C:\\Program Files\\Internet Explorer\\iexplore.exe"] or iendswith(Process.Path, "\\maxthon.exe") or istartswith(Process.Path, "C:\\Program Files (x86)\\Microsoft\\EdgeWebView\\Application\\") or iendswith(Process.Path, "\\WindowsApps\\MicrosoftEdge.exe") or Process.Path in ["C:\\Program Files (x86)\\Microsoft\\Edge\\Application\\msedge.exe", "C:\\Program Files\\Microsoft\\Edge\\Application\\msedge.exe"] or (istartswith(Process.Path, "C:\\Program Files (x86)\\Microsoft\\EdgeCore\\") or istartswith(Process.Path, "C:\\Program Files\\Microsoft\\EdgeCore\\")) and (iendswith(Process.Path, "\\msedge.exe") or iendswith(Process.Path, "\\msedgewebview2.exe")) or iendswith(Process.Path, "\\opera.exe") or iendswith(Process.Path, "\\safari.exe") or iendswith(Process.Path, "\\seamonkey.exe") or iendswith(Process.Path, "\\vivaldi.exe") or iendswith(Process.Path, "\\whale.exe"))
GenericProperty1 = Net.Target.Name


[ActivityMonitoringRule platform=Windows]
# Detects Windows Installer service (msiexec.exe) spawning "cmd" or "powershell"
# Author: Teymur Kheirkhabarov (idea), Mangatas Tondang (rule), oscd.community
RuleId = 1e53dd56-8d83-4eb4-a43e-b790a05510aa
RuleName = Always Install Elevated MSI Spawned Cmd And Powershell
EventType = Process.Start
Tag = proc-start-always-install-elevated-msi-spawned-cmd-and-powershell
RiskScore = 50
Annotation = {"mitre_attack": ["T1548.002"]}
Query = (iendswith(Process.Path, "\\cmd.exe") or iendswith(Process.Path, "\\powershell.exe") or iendswith(Process.Path, "\\pwsh.exe") or Process.Name in ["Cmd.Exe", "PowerShell.EXE", "pwsh.dll"]) and icontains(Parent.Path, "\\Windows\\Installer\\") and icontains(Parent.Path, "msi") and iendswith(Parent.Path, "tmp")
GenericProperty1 = Parent.Path


[ActivityMonitoringRule platform=Windows]
# Detects usage of Sysinternals PsService which can be abused for service reconnaissance and tampering
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleId = 3371f518-5fe3-4cf6-a14b-2a0ae3fd8a4f
RuleName = Sysinternals PsService Execution
EventType = Process.Start
Tag = proc-start-sysinternals-psservice-execution
RiskScore = 50
Annotation = {"mitre_attack": ["T1543.003"]}
Query = Process.Name == "psservice.exe" or iendswith(Process.Path, "\\PsService.exe") or iendswith(Process.Path, "\\PsService64.exe")


[ActivityMonitoringRule platform=Windows]
# Detects the execution of "Ldifde.exe" with the import flag "-i". The can be abused to include HTTP-based arguments which will allow the arbitrary download of files from a remote server.
# Author: @gott_cyber
RuleId = 6f535e01-ca1f-40be-ab8d-45b19c0c8b7f
RuleName = Import LDAP Data Interchange Format File Via Ldifde.EXE
EventType = Process.Start
Tag = proc-start-import-ldap-data-interchange-format-file-via-ldifde.exe
RiskScore = 50
Annotation = {"mitre_attack": ["T1218", "T1105"]}
Query = (iendswith(Process.Path, "\\ldifde.exe") or Process.Name == "ldifde.exe") and icontains(Process.CommandLine, "-i") and icontains(Process.CommandLine, "-f")


[ActivityMonitoringRule platform=Windows]
# Detects execution of the Add-In deployment cache updating utility (AddInutil.exe) from a non-standard directory.
# Author: Michael McKinley (@McKinleyMike), Tony Latteri (@TheLatteri)
RuleId = 6120ac2a-a34b-42c0-a9bd-1fb9f459f348
RuleName = AddinUtil.EXE Execution From Uncommon Directory
EventType = Process.Start
Tag = proc-start-addinutil.exe-execution-from-uncommon-directory
RiskScore = 50
Annotation = {"mitre_attack": ["T1218"]}
Query = (iendswith(Process.Path, "\\addinutil.exe") or Process.Name == "AddInUtil.exe") and not (icontains(Process.Path, ":\\Windows\\Microsoft.NET\\Framework\\") or icontains(Process.Path, ":\\Windows\\Microsoft.NET\\Framework64\\") or icontains(Process.Path, ":\\Windows\\WinSxS\\"))


[ActivityMonitoringRule platform=Windows]
# Detects user accept agreement execution in psexec commandline
# Author: omkar72
RuleId = 730fc21b-eaff-474b-ad23-90fd265d4988
RuleName = Psexec Execution
EventType = Process.Start
Tag = proc-start-psexec-execution
RiskScore = 50
Annotation = {"mitre_attack": ["T1569", "T1021"]}
Query = iendswith(Process.Path, "\\psexec.exe") or Process.Name == "psexec.c"


[ActivityMonitoringRule platform=Windows]
# Executes arbitrary PowerShell code using SyncAppvPublishingServer.exe.
# Author: frack113
RuleId = fbd7c32d-db2a-4418-b92c-566eb8911133
RuleName = SyncAppvPublishingServer Execute Arbitrary PowerShell Code
EventType = Process.Start
Tag = proc-start-syncappvpublishingserver-execute-arbitrary-powershell-code
RiskScore = 50
Annotation = {"mitre_attack": ["T1218"]}
Query = (iendswith(Process.Path, "\\SyncAppvPublishingServer.exe") or Process.Name == "syncappvpublishingserver.exe") and icontains(Process.CommandLine, "\"n; ")


[ActivityMonitoringRule platform=Windows]
# An attacker may execute an application as a SCR File using rundll32.exe desk.cpl,InstallScreenSaver
# Author: Christopher Peacock @securepeacock, SCYTHE @scythe_io, TactiKoolSec
RuleId = 15bd98ea-55f4-4d37-b09a-e7caa0fa2221
RuleName = Rundll32 InstallScreenSaver Execution
EventType = Process.Start
Tag = proc-start-rundll32-installscreensaver-execution
RiskScore = 50
Annotation = {"mitre_attack": ["T1218.011"]}
Query = (iendswith(Process.Path, "\\rundll32.exe") or Process.Name == "RUNDLL32.EXE") and icontains(Process.CommandLine, "InstallScreenSaver")


[ActivityMonitoringRule platform=Windows]
# A symbolic link is a type of file that contains a reference to another file.
# This is probably done to make sure that the ransomware is able to follow shortcuts on the machine in order to find the original file to encrypt
# Author: frack113
RuleId = c0b2768a-dd06-4671-8339-b16ca8d1f27f
RuleName = Fsutil Behavior Set SymlinkEvaluation
EventType = Process.Start
Tag = proc-start-fsutil-behavior-set-symlinkevaluation
RiskScore = 50
Annotation = {"mitre_attack": ["T1059"]}
Query = (iendswith(Process.Path, "\\fsutil.exe") or Process.Name == "fsutil.exe") and icontains(Process.CommandLine, "behavior ") and icontains(Process.CommandLine, "set ") and icontains(Process.CommandLine, "SymlinkEvaluation")


[ActivityMonitoringRule platform=Windows]
# Detects potential abuse of Windows Subsystem for Linux (WSL) binary as a LOLBIN to execute arbitrary Linux or Windows commands
# Author: oscd.community, Zach Stanford @svch0st, Nasreddine Bencherchali (Nextron Systems)
RuleId = dec44ca7-61ad-493c-bfd7-8819c5faa09b
RuleName = Arbitrary Command Execution Using WSL
EventType = Process.Start
Tag = proc-start-arbitrary-command-execution-using-wsl
RiskScore = 50
Annotation = {"mitre_attack": ["T1218", "T1202"]}
Query = (iendswith(Process.Path, "\\wsl.exe") or Process.Name == "wsl.exe") and (icontains(Process.CommandLine, " -e ") or icontains(Process.CommandLine, " --exec") or icontains(Process.CommandLine, " --system") or icontains(Process.CommandLine, " --shell-type ") or icontains(Process.CommandLine, " /mnt/c") or icontains(Process.CommandLine, " --user root") or icontains(Process.CommandLine, " -u root") or icontains(Process.CommandLine, "--debug-shell")) and not (iendswith(Parent.Path, "\\cmd.exe") and icontains(Process.CommandLine, " -d ") and icontains(Process.CommandLine, " -e kill "))
GenericProperty1 = Parent.Path


[ActivityMonitoringRule platform=Windows]
# Detects Powershell as a child of the WmiPrvSE process. Which could be a sign of lateral movement via WMI.
# Author: Markus Neis @Karneades
RuleId = 692f0bec-83ba-4d04-af7e-e884a96059b6
RuleName = Potential WMI Lateral Movement WmiPrvSE Spawned PowerShell
EventType = Process.Start
Tag = proc-start-potential-wmi-lateral-movement-wmiprvse-spawned-powershell
RiskScore = 50
Annotation = {"mitre_attack": ["T1047", "T1059.001"]}
Query = iendswith(Parent.Path, "\\WmiPrvSE.exe") and (iendswith(Process.Path, "\\powershell.exe") or iendswith(Process.Path, "\\pwsh.exe") or Process.Name in ["PowerShell.EXE", "pwsh.dll"])
GenericProperty1 = Parent.Path


[ActivityMonitoringRule platform=Windows]
# Detects potentially suspicious child processes of WinRAR.exe.
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleId = 146aace8-9bd6-42ba-be7a-0070d8027b76
RuleName = Potentially Suspicious Child Process Of WinRAR.EXE
EventType = Process.Start
Tag = proc-start-potentially-suspicious-child-process-of-winrar.exe
RiskScore = 50
Annotation = {"mitre_attack": ["T1203"]}
Query = iendswith(Parent.Path, "\\WinRAR.exe") and (iendswith(Process.Path, "\\cmd.exe") or iendswith(Process.Path, "\\cscript.exe") or iendswith(Process.Path, "\\mshta.exe") or iendswith(Process.Path, "\\powershell.exe") or iendswith(Process.Path, "\\pwsh.exe") or iendswith(Process.Path, "\\regsvr32.exe") or iendswith(Process.Path, "\\rundll32.exe") or iendswith(Process.Path, "\\wscript.exe") or Process.Name in ["Cmd.Exe", "cscript.exe", "mshta.exe", "PowerShell.EXE", "pwsh.dll", "regsvr32.exe", "RUNDLL32.EXE", "wscript.exe"])
GenericProperty1 = Parent.Path


[ActivityMonitoringRule platform=Windows]
# Detects a when net.exe is called with a password in the command line
# Author: Tim Shelton (HAWK.IO)
RuleId = d4498716-1d52-438f-8084-4a603157d131
RuleName = Password Provided In Command Line Of Net.EXE
EventType = Process.Start
Tag = proc-start-password-provided-in-command-line-of-net.exe
RiskScore = 50
Annotation = {"mitre_attack": ["T1021.002", "T1078"]}
Query = (iendswith(Process.Path, "\\net.exe") or iendswith(Process.Path, "\\net1.exe") or Process.Name in ["net.exe", "net1.exe"]) and icontains(Process.CommandLine, " use ") and Process.CommandLine like "*:*\\*" and Process.CommandLine like "*/USER:* *" and not iendswith(Process.CommandLine, " ")


[ActivityMonitoringRule platform=Windows]
# Detects potential DLL sideloading of "CCleanerDU.dll"
# Author: X__Junior (Nextron Systems)
RuleId = 1fbc0671-5596-4e17-8682-f020a0b995dc
RuleName = Potential CCleanerDU.DLL Sideloading
EventType = Image.Load
Tag = potential-ccleanerdu.dll-sideloading
RiskScore = 50
Annotation = {"mitre_attack": ["T1574.001", "T1574.002"]}
Query = iendswith(Image.Path, "\\CCleanerDU.dll") and not ((istartswith(Process.Path, "C:\\Program Files\\CCleaner\\") or istartswith(Process.Path, "C:\\Program Files (x86)\\CCleaner\\")) and (iendswith(Process.Path, "\\CCleaner.exe") or iendswith(Process.Path, "\\CCleaner64.exe")))
GenericProperty1 = Image.Path


[ActivityMonitoringRule platform=Windows]
# Detects weak passwords or often abused passwords (seen used by threat actors) via the CLI. An example would be a threat actor creating a new user via the net command and providing the password inline
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleId = 91edcfb1-2529-4ac2-9ecc-7617f895c7e4
RuleName = Weak or Abused Passwords In CLI
EventType = Process.Start
Tag = proc-start-weak-or-abused-passwords-in-cli
RiskScore = 50
Query = icontains(Process.CommandLine, "Asd123.aaaa") or icontains(Process.CommandLine, "password123") or icontains(Process.CommandLine, "123456789") or icontains(Process.CommandLine, "P@ssw0rd!") or icontains(Process.CommandLine, "Decryptme")


[ActivityMonitoringRule platform=Windows]
# Detects a certain command line flag combination used by "devinit.exe", which can be abused as a LOLBIN to download arbitrary MSI packages on a Windows system
# Author: Florian Roth (Nextron Systems)
RuleId = 90d50722-0483-4065-8e35-57efaadd354d
RuleName = Arbitrary MSI Download Via Devinit.EXE
EventType = Process.Start
Tag = proc-start-arbitrary-msi-download-via-devinit.exe
RiskScore = 50
Annotation = {"mitre_attack": ["T1218"]}
Query = icontains(Process.CommandLine, " -t msi-install ") and icontains(Process.CommandLine, " -i http")


[ActivityMonitoringRule platform=Windows]
# This rule detects suspicious files created by Microsoft Sync Center (mobsync)
# Author: elhoim
RuleId = 409f8a98-4496-4aaa-818a-c931c0a8b832
RuleName = Created Files by Microsoft Sync Center
EventType = File.Create
Tag = created-files-by-microsoft-sync-center
RiskScore = 50
Annotation = {"mitre_attack": ["T1055", "T1218"]}
Query = iendswith(Process.Path, "\\mobsync.exe") and (iendswith(File.Path, ".dll") or iendswith(File.Path, ".exe"))
GenericProperty1 = File.Path


[ActivityMonitoringRule platform=Windows]
# Detects execution of the Add-In deployment cache updating utility (AddInutil.exe) with uncommon Addinroot or Pipelineroot paths. An adversary may execute AddinUtil.exe with uncommon Addinroot/Pipelineroot paths that point to the adversaries Addins.Store payload.
# Author: Michael McKinley (@McKinleyMike), Tony Latteri (@TheLatteri)
RuleId = 4f2cd9b6-4a17-440f-bb2a-687abb65993a
RuleName = Uncommon AddinUtil.EXE CommandLine Execution
EventType = Process.Start
Tag = proc-start-uncommon-addinutil.exe-commandline-execution
RiskScore = 50
Annotation = {"mitre_attack": ["T1218"]}
Query = (iendswith(Process.Path, "\\addinutil.exe") or Process.Name == "AddInUtil.exe") and (icontains(Process.CommandLine, "-AddInRoot:") or icontains(Process.CommandLine, "-PipelineRoot:")) and not (icontains(Process.CommandLine, "-AddInRoot:\"C:\\Program Files (x86)\\Common Files\\Microsoft Shared\\VSTA") or icontains(Process.CommandLine, "-AddInRoot:C:\\Program Files (x86)\\Common Files\\Microsoft Shared\\VSTA") or icontains(Process.CommandLine, "-PipelineRoot:\"C:\\Program Files (x86)\\Common Files\\Microsoft Shared\\VSTA") or icontains(Process.CommandLine, "-PipelineRoot:C:\\Program Files (x86)\\Common Files\\Microsoft Shared\\VSTA"))


[ActivityMonitoringRule platform=Windows]
# Detects execution of Microsoft bash launcher with the "-c" flag. This can be used to potentially bypass defenses and execute Linux or Windows-based binaries directly via bash
# Author: frack113
RuleId = 5edc2273-c26f-406c-83f3-f4d948e740dd
RuleName = Indirect Inline Command Execution Via Bash.EXE
EventType = Process.Start
Tag = proc-start-indirect-inline-command-execution-via-bash.exe
RiskScore = 50
Annotation = {"mitre_attack": ["T1202"]}
Query = (iendswith(Process.Path, ":\\Windows\\System32\\bash.exe") or iendswith(Process.Path, ":\\Windows\\SysWOW64\\bash.exe") or Process.Name == "Bash.exe") and icontains(Process.CommandLine, " -c ")


[ActivityMonitoringRule platform=Windows]
# An adversary may use legitimate desktop support and remote access software, such as Team Viewer, Go2Assist, LogMein, AmmyyAdmin, etc, to establish an interactive command and control channel to target systems within networks.
# These services are commonly used as legitimate technical support software, and may be allowed by application control within a target environment.
# Remote access tools like VNC, Ammyy, and Teamviewer are used frequently when compared with other legitimate software commonly used by adversaries. (Citation: Symantec Living off the Land)
# Author: frack113
RuleId = 0b9ad457-2554-44c1-82c2-d56a99c42377
RuleName = Anydesk Temporary Artefact
EventType = File.Create
Tag = anydesk-temporary-artefact
RiskScore = 50
Annotation = {"mitre_attack": ["T1219"]}
Query = (icontains(File.Path, "\\AppData\\Roaming\\AnyDesk\\user.conf") or icontains(File.Path, "\\AppData\\Roaming\\AnyDesk\\system.conf")) and iendswith(File.Path, ".temp")
GenericProperty1 = File.Path


[ActivityMonitoringRule platform=Windows]
# Detects usage of "MSPUB" (Microsoft Publisher) to download arbitrary files
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleId = 3b3c7f55-f771-4dd6-8a6e-08d057a17caf
RuleName = Arbitrary File Download Via MSPUB.EXE
EventType = Process.Start
Tag = proc-start-arbitrary-file-download-via-mspub.exe
RiskScore = 50
Annotation = {"mitre_attack": ["T1218"]}
Query = (iendswith(Process.Path, "\\MSPUB.exe") or Process.Name == "MSPUB.exe") and (icontains(Process.CommandLine, "ftp://") or icontains(Process.CommandLine, "http://") or icontains(Process.CommandLine, "https://"))


[ActivityMonitoringRule platform=Windows]
# Detects remote PowerShell sections by monitoring for wsmprovhost (WinRM host process) as a parent or child process (sign of an active PowerShell remote session).
# Author: Roberto Rodriguez @Cyb3rWard0g
RuleId = 734f8d9b-42b8-41b2-bcf5-abaf49d5a3c8
RuleName = Remote PowerShell Session Host Process (WinRM)
EventType = Process.Start
Tag = proc-start-remote-powershell-session-host-process-(winrm)
RiskScore = 50
Annotation = {"mitre_attack": ["T1059.001", "T1021.006"]}
Query = iendswith(Process.Path, "\\wsmprovhost.exe") or iendswith(Parent.Path, "\\wsmprovhost.exe")
GenericProperty1 = Parent.Path


[ActivityMonitoringRule platform=Windows]
# Detects shell spawned from Java host process, which could be a sign of exploitation (e.g. log4j exploitation)
# Author: Andreas Hunkeler (@Karneades), Nasreddine Bencherchali
RuleId = dff1e1cc-d3fd-47c8-bfc2-aeb878a754c0
RuleName = Shell Process Spawned by Java.EXE
EventType = Process.Start
Tag = proc-start-shell-process-spawned-by-java.exe
RiskScore = 50
Query = iendswith(Parent.Path, "\\java.exe") and (iendswith(Process.Path, "\\cmd.exe") or iendswith(Process.Path, "\\powershell.exe") or iendswith(Process.Path, "\\pwsh.exe")) and not (icontains(Parent.Path, "build") and icontains(Process.CommandLine, "build"))
GenericProperty1 = Parent.Path


[ActivityMonitoringRule platform=Windows]
# Detects attempts of decoding encoded Gzip archives via PowerShell.
# Author: Hieu Tran
RuleId = 98767d61-b2e8-4d71-b661-e36783ee24c1
RuleName = Gzip Archive Decode Via PowerShell
EventType = Process.Start
Tag = proc-start-gzip-archive-decode-via-powershell
RiskScore = 50
Annotation = {"mitre_attack": ["T1132.001"]}
Query = icontains(Process.CommandLine, "GZipStream") and icontains(Process.CommandLine, "::Decompress")


[ActivityMonitoringRule platform=Windows]
# Detects use of Wlrmdr.exe in which the -u parameter is passed to ShellExecute
# Author: frack113, manasmbellani
RuleId = 9cfc00b6-bfb7-49ce-9781-ef78503154bb
RuleName = Wlrmdr Lolbin Use as Launcher
EventType = Process.Start
Tag = proc-start-wlrmdr-lolbin-use-as-launcher
RiskScore = 50
Annotation = {"mitre_attack": ["T1218"]}
Query = iendswith(Parent.Path, "\\wlrmdr.exe") or (iendswith(Process.Path, "\\wlrmdr.exe") or Process.Name == "WLRMNDR.EXE") and icontains(Process.CommandLine, "-s ") and icontains(Process.CommandLine, "-f ") and icontains(Process.CommandLine, "-t ") and icontains(Process.CommandLine, "-m ") and icontains(Process.CommandLine, "-a ") and icontains(Process.CommandLine, "-u ") and not (Parent.Path in ["C:\\Windows\\System32\\winlogon.exe", "-"])
GenericProperty1 = Parent.Path


[ActivityMonitoringRule platform=Windows]
# Detects launch of executable by calling the LaunchApplication function from pcwutl.dll library.
# Author: Julia Fomina, oscd.community
RuleId = 9386d78a-7207-4048-9c9f-a93a7c2d1c05
RuleName = Code Execution via Pcwutl.dll
EventType = Process.Start
Tag = proc-start-code-execution-via-pcwutl.dll
RiskScore = 50
Annotation = {"mitre_attack": ["T1218.011"]}
Query = (iendswith(Process.Path, "\\rundll32.exe") or Process.Name == "RUNDLL32.EXE") and icontains(Process.CommandLine, "pcwutl") and icontains(Process.CommandLine, "LaunchApplication")


[ActivityMonitoringRule platform=Windows]
# Detects creation of a scheduled task with a GUID like name
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleId = ff2fff64-4cd6-4a2b-ba7d-e28a30bbe66b
RuleName = Suspicious Scheduled Task Name As GUID
EventType = Process.Start
Tag = proc-start-suspicious-scheduled-task-name-as-guid
RiskScore = 50
Annotation = {"mitre_attack": ["T1053.005"]}
Query = iendswith(Process.Path, "\\schtasks.exe") and icontains(Process.CommandLine, "/Create ") and (icontains(Process.CommandLine, "/TN \"{") or icontains(Process.CommandLine, "/TN '{") or icontains(Process.CommandLine, "/TN {")) and (icontains(Process.CommandLine, "}\"") or icontains(Process.CommandLine, "}'") or icontains(Process.CommandLine, "} "))


[ActivityMonitoringRule platform=Windows]
# Detects execution of "Tpmvscmgr.exe" to create a new virtual smart card.
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleId = c633622e-cab9-4eaa-bb13-66a1d68b3e47
RuleName = New Virtual Smart Card Created Via TpmVscMgr.EXE
EventType = Process.Start
Tag = proc-start-new-virtual-smart-card-created-via-tpmvscmgr.exe
RiskScore = 50
Query = iendswith(Process.Path, "\\tpmvscmgr.exe") and Process.Name == "TpmVscMgr.exe" and icontains(Process.CommandLine, "create")


[ActivityMonitoringRule platform=Windows]
# This rule detects execution of a PowerShell code through the sqlps.exe utility, which is included in the standard set of utilities supplied with the MSSQL Server.
# Script blocks are not logged in this case, so this utility helps to bypass protection mechanisms based on the analysis of these logs.
# Author: Agro (@agro_sev) oscd.community
RuleId = 0152550d-3a26-4efd-9f0e-54a0b28ae2f3
RuleName = Detection of PowerShell Execution via Sqlps.exe
EventType = Process.Start
Tag = proc-start-detection-of-powershell-execution-via-sqlps.exe
RiskScore = 50
Annotation = {"mitre_attack": ["T1059.001", "T1127"]}
Query = iendswith(Parent.Path, "\\sqlps.exe") or (iendswith(Process.Path, "\\sqlps.exe") or Process.Name == "sqlps.exe") and not iendswith(Parent.Path, "\\sqlagent.exe")
GenericProperty1 = Parent.Path


[ActivityMonitoringRule platform=Windows]
# Detects binaries that use the same name as legitimate sysinternals tools to evade detection
# Author: frack113
RuleId = 7cce6fc8-a07f-4d84-a53e-96e1879843c9
RuleName = Potential Binary Impersonating Sysinternals Tools
EventType = Process.Start
Tag = proc-start-potential-binary-impersonating-sysinternals-tools
RiskScore = 50
Annotation = {"mitre_attack": ["T1218", "T1202"]}
Query = (iendswith(Process.Path, "\\accesschk.exe") or iendswith(Process.Path, "\\accesschk64.exe") or iendswith(Process.Path, "\\AccessEnum.exe") or iendswith(Process.Path, "\\ADExplorer.exe") or iendswith(Process.Path, "\\ADExplorer64.exe") or iendswith(Process.Path, "\\ADInsight.exe") or iendswith(Process.Path, "\\ADInsight64.exe") or iendswith(Process.Path, "\\adrestore.exe") or iendswith(Process.Path, "\\adrestore64.exe") or iendswith(Process.Path, "\\Autologon.exe") or iendswith(Process.Path, "\\Autologon64.exe") or iendswith(Process.Path, "\\Autoruns.exe") or iendswith(Process.Path, "\\Autoruns64.exe") or iendswith(Process.Path, "\\autorunsc.exe") or iendswith(Process.Path, "\\autorunsc64.exe") or iendswith(Process.Path, "\\Bginfo.exe") or iendswith(Process.Path, "\\Bginfo64.exe") or iendswith(Process.Path, "\\Cacheset.exe") or iendswith(Process.Path, "\\Cacheset64.exe") or iendswith(Process.Path, "\\Clockres.exe") or iendswith(Process.Path, "\\Clockres64.exe") or iendswith(Process.Path, "\\Contig.exe") or iendswith(Process.Path, "\\Contig64.exe") or iendswith(Process.Path, "\\Coreinfo.exe") or iendswith(Process.Path, "\\Coreinfo64.exe") or iendswith(Process.Path, "\\CPUSTRES.EXE") or iendswith(Process.Path, "\\CPUSTRES64.EXE") or iendswith(Process.Path, "\\ctrl2cap.exe") or iendswith(Process.Path, "\\Dbgview.exe") or iendswith(Process.Path, "\\dbgview64.exe") or iendswith(Process.Path, "\\Desktops.exe") or iendswith(Process.Path, "\\Desktops64.exe") or iendswith(Process.Path, "\\disk2vhd.exe") or iendswith(Process.Path, "\\disk2vhd64.exe") or iendswith(Process.Path, "\\diskext.exe") or iendswith(Process.Path, "\\diskext64.exe") or iendswith(Process.Path, "\\Diskmon.exe") or iendswith(Process.Path, "\\Diskmon64.exe") or iendswith(Process.Path, "\\DiskView.exe") or iendswith(Process.Path, "\\DiskView64.exe") or iendswith(Process.Path, "\\du.exe") or iendswith(Process.Path, "\\du64.exe") or iendswith(Process.Path, "\\efsdump.exe") or iendswith(Process.Path, "\\FindLinks.exe") or iendswith(Process.Path, "\\FindLinks64.exe") or iendswith(Process.Path, "\\handle.exe") or iendswith(Process.Path, "\\handle64.exe") or iendswith(Process.Path, "\\hex2dec.exe") or iendswith(Process.Path, "\\hex2dec64.exe") or iendswith(Process.Path, "\\junction.exe") or iendswith(Process.Path, "\\junction64.exe") or iendswith(Process.Path, "\\ldmdump.exe") or iendswith(Process.Path, "\\listdlls.exe") or iendswith(Process.Path, "\\listdlls64.exe") or iendswith(Process.Path, "\\livekd.exe") or iendswith(Process.Path, "\\livekd64.exe") or iendswith(Process.Path, "\\loadOrd.exe") or iendswith(Process.Path, "\\loadOrd64.exe") or iendswith(Process.Path, "\\loadOrdC.exe") or iendswith(Process.Path, "\\loadOrdC64.exe") or iendswith(Process.Path, "\\logonsessions.exe") or iendswith(Process.Path, "\\logonsessions64.exe") or iendswith(Process.Path, "\\movefile.exe") or iendswith(Process.Path, "\\movefile64.exe") or iendswith(Process.Path, "\\notmyfault.exe") or iendswith(Process.Path, "\\notmyfault64.exe") or iendswith(Process.Path, "\\notmyfaultc.exe") or iendswith(Process.Path, "\\notmyfaultc64.exe") or iendswith(Process.Path, "\\ntfsinfo.exe") or iendswith(Process.Path, "\\ntfsinfo64.exe") or iendswith(Process.Path, "\\pendmoves.exe") or iendswith(Process.Path, "\\pendmoves64.exe") or iendswith(Process.Path, "\\pipelist.exe") or iendswith(Process.Path, "\\pipelist64.exe") or iendswith(Process.Path, "\\portmon.exe") or iendswith(Process.Path, "\\procdump.exe") or iendswith(Process.Path, "\\procdump64.exe") or iendswith(Process.Path, "\\procexp.exe") or iendswith(Process.Path, "\\procexp64.exe") or iendswith(Process.Path, "\\Procmon.exe") or iendswith(Process.Path, "\\Procmon64.exe") or iendswith(Process.Path, "\\psExec.exe") or iendswith(Process.Path, "\\psExec64.exe") or iendswith(Process.Path, "\\psfile.exe") or iendswith(Process.Path, "\\psfile64.exe") or iendswith(Process.Path, "\\psGetsid.exe") or iendswith(Process.Path, "\\psGetsid64.exe") or iendswith(Process.Path, "\\psInfo.exe") or iendswith(Process.Path, "\\psInfo64.exe") or iendswith(Process.Path, "\\pskill.exe") or iendswith(Process.Path, "\\pskill64.exe") or iendswith(Process.Path, "\\pslist.exe") or iendswith(Process.Path, "\\pslist64.exe") or iendswith(Process.Path, "\\psLoggedon.exe") or iendswith(Process.Path, "\\psLoggedon64.exe") or iendswith(Process.Path, "\\psloglist.exe") or iendswith(Process.Path, "\\psloglist64.exe") or iendswith(Process.Path, "\\pspasswd.exe") or iendswith(Process.Path, "\\pspasswd64.exe") or iendswith(Process.Path, "\\psping.exe") or iendswith(Process.Path, "\\psping64.exe") or iendswith(Process.Path, "\\psService.exe") or iendswith(Process.Path, "\\psService64.exe") or iendswith(Process.Path, "\\psshutdown.exe") or iendswith(Process.Path, "\\psshutdown64.exe") or iendswith(Process.Path, "\\pssuspend.exe") or iendswith(Process.Path, "\\pssuspend64.exe") or iendswith(Process.Path, "\\RAMMap.exe") or iendswith(Process.Path, "\\RDCMan.exe") or iendswith(Process.Path, "\\RegDelNull.exe") or iendswith(Process.Path, "\\RegDelNull64.exe") or iendswith(Process.Path, "\\regjump.exe") or iendswith(Process.Path, "\\ru.exe") or iendswith(Process.Path, "\\ru64.exe") or iendswith(Process.Path, "\\sdelete.exe") or iendswith(Process.Path, "\\sdelete64.exe") or iendswith(Process.Path, "\\ShareEnum.exe") or iendswith(Process.Path, "\\ShareEnum64.exe") or iendswith(Process.Path, "\\shellRunas.exe") or iendswith(Process.Path, "\\sigcheck.exe") or iendswith(Process.Path, "\\sigcheck64.exe") or iendswith(Process.Path, "\\streams.exe") or iendswith(Process.Path, "\\streams64.exe") or iendswith(Process.Path, "\\strings.exe") or iendswith(Process.Path, "\\strings64.exe") or iendswith(Process.Path, "\\sync.exe") or iendswith(Process.Path, "\\sync64.exe") or iendswith(Process.Path, "\\Sysmon.exe") or iendswith(Process.Path, "\\Sysmon64.exe") or iendswith(Process.Path, "\\tcpvcon.exe") or iendswith(Process.Path, "\\tcpvcon64.exe") or iendswith(Process.Path, "\\tcpview.exe") or iendswith(Process.Path, "\\tcpview64.exe") or iendswith(Process.Path, "\\Testlimit.exe") or iendswith(Process.Path, "\\Testlimit64.exe") or iendswith(Process.Path, "\\vmmap.exe") or iendswith(Process.Path, "\\vmmap64.exe") or iendswith(Process.Path, "\\Volumeid.exe") or iendswith(Process.Path, "\\Volumeid64.exe") or iendswith(Process.Path, "\\whois.exe") or iendswith(Process.Path, "\\whois64.exe") or iendswith(Process.Path, "\\Winobj.exe") or iendswith(Process.Path, "\\Winobj64.exe") or iendswith(Process.Path, "\\ZoomIt.exe") or iendswith(Process.Path, "\\ZoomIt64.exe")) and not (Process.Company in ["Sysinternals - www.sysinternals.com", "Sysinternals"] or isnull(Process.Company))
GenericProperty1 = Process.Company


[ActivityMonitoringRule platform=Windows]
# Detects creation of files which are the results of executing the built-in reconnaissance script "C:\Windows\System32\gatherNetworkInfo.vbs".
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleId = f92a6f1e-a512-4a15-9735-da09e78d7273
RuleName = GatherNetworkInfo.VBS Reconnaissance Script Output
EventType = File.Create
Tag = gathernetworkinfo.vbs-reconnaissance-script-output
RiskScore = 50
Query = istartswith(File.Path, "C:\\Windows\\System32\\config") and (iendswith(File.Path, "\\Hotfixinfo.txt") or iendswith(File.Path, "\\netiostate.txt") or iendswith(File.Path, "\\sysportslog.txt") or iendswith(File.Path, "\\VmSwitchLog.evtx"))
GenericProperty1 = File.Path


[ActivityMonitoringRule platform=Windows]
# Detects execution of "odbcconf" with "INSTALLDRIVER" which installs a new ODBC driver. Attackers abuse this to install and run malicious DLLs.
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleId = 3f5491e2-8db8-496b-9e95-1029fce852d4
RuleName = Driver/DLL Installation Via Odbcconf.EXE
EventType = Process.Start
Tag = proc-start-driver/dll-installation-via-odbcconf.exe
RiskScore = 50
Annotation = {"mitre_attack": ["T1218.008"]}
Query = (iendswith(Process.Path, "\\odbcconf.exe") or Process.Name == "odbcconf.exe") and icontains(Process.CommandLine, "INSTALLDRIVER ") and icontains(Process.CommandLine, ".dll")


[ActivityMonitoringRule platform=Windows]
# Detects Microsoft Visual Studio vsls-agent.exe lolbin execution with a suspicious library load using the --agentExtensionPath parameter
# Author: bohops
RuleId = 43103702-5886-11ed-9b6a-0242ac120002
RuleName = Suspicious Vsls-Agent Command With AgentExtensionPath Load
EventType = Process.Start
Tag = proc-start-suspicious-vsls-agent-command-with-agentextensionpath-load
RiskScore = 50
Annotation = {"mitre_attack": ["T1218"]}
Query = iendswith(Process.Path, "\\vsls-agent.exe") and icontains(Process.CommandLine, "--agentExtensionPath") and not icontains(Process.CommandLine, "Microsoft.VisualStudio.LiveShare.Agent.")


[ActivityMonitoringRule platform=Windows]
# Detects use of chcp to look up the system locale value as part of host discovery
# Author: _pete_0, TheDFIRReport
RuleId = 7090adee-82e2-4269-bd59-80691e7c6338
RuleName = Console CodePage Lookup Via CHCP
EventType = Process.Start
Tag = proc-start-console-codepage-lookup-via-chcp
RiskScore = 50
Annotation = {"mitre_attack": ["T1614.001"]}
Query = iendswith(Parent.Path, "\\cmd.exe") and (icontains(Parent.CommandLine, " /c ") or icontains(Parent.CommandLine, " /r ") or icontains(Parent.CommandLine, " /k ")) and iendswith(Process.Path, "\\chcp.com") and (iendswith(Process.CommandLine, "chcp") or iendswith(Process.CommandLine, "chcp ") or iendswith(Process.CommandLine, "chcp  "))
GenericProperty1 = Parent.Path
GenericProperty2 = Parent.CommandLine


[ActivityMonitoringRule platform=Windows]
# Detects attempts of decoding a base64 Gzip archive via PowerShell. This technique is often used as a method to load malicious content into memory afterward.
# Author: frack113
RuleId = d75d6b6b-adb9-48f7-824b-ac2e786efe1f
RuleName = Suspicious FromBase64String Usage On Gzip Archive - Process Creation
EventType = Process.Start
Tag = proc-start-suspicious-frombase64string-usage-on-gzip-archive-process-creation
RiskScore = 50
Annotation = {"mitre_attack": ["T1132.001"]}
Query = icontains(Process.CommandLine, "FromBase64String") and icontains(Process.CommandLine, "MemoryStream") and icontains(Process.CommandLine, "H4sI")


[ActivityMonitoringRule platform=Windows]
# Detects execution of "curl.exe" with the "--insecure" flag.
# Author: X__Junior (Nextron Systems)
RuleId = cb9cc1d1-e84e-4bdc-b7ad-c31b1b7908ec
RuleName = Insecure Transfer Via Curl.EXE
EventType = Process.Start
Tag = proc-start-insecure-transfer-via-curl.exe
RiskScore = 50
Query = (iendswith(Process.Path, "\\curl.exe") or Process.Name == "curl.exe") and (regex_match(Process.CommandLine, r"\\s-k\\s") or icontains(Process.CommandLine, "--insecure"))

