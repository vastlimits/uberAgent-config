#
# The rules are generated from the Sigma GitHub repository at https://github.com/SigmaHQ/sigma
# Follow these steps to get the latest rules from the repository with Python
#    1. Clone the repository locally
#    2. Using a commandline, change working directory to the just cloned repository
#    3. Run sigmac -I --target uberagent -r rules/
#
# The rules in this file are marked with sigma-level: medium
#

[ActivityMonitoringRule]
# Detects abuse of the cron utility to perform task scheduling for initial or recurring execution of malicious code. Detection will focus on crontab jobs uploaded from the tmp folder.
# Author: Alejandro Ortuno, oscd.community
RuleName = Scheduled Cron Task/Job - MacOs
EventType = Process.Start
Tag = proc-start-scheduled-cron-task/job-macos
RiskScore = 50
Query = (Process.Path like r"%/crontab" and Process.CommandLine like r"%/tmp/%")

[ActivityMonitoringRule]
# Detects commandline operations on shell history files
# Author: Mikhail Larin, oscd.community
RuleName = Suspicious History File Operations
EventType = Process.Start
Tag = proc-start-suspicious-history-file-operations
RiskScore = 50
Query = (Process.CommandLine like r"%.bash\_history%" or Process.CommandLine like r"%.zsh\_history%" or Process.CommandLine like r"%.zhistory%" or Process.CommandLine like r"%.history%" or Process.CommandLine like r"%.sh\_history%" or Process.CommandLine like r"%fish\_history%")

[ActivityMonitoringRule]
# Detects usage of "find" binary in a suspicious manner to perform discovery
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleName = Potential Discovery Activity Using Find - MacOS
EventType = Process.Start
Tag = proc-start-potential-discovery-activity-using-find-macos
RiskScore = 50
Query = (Process.Path like r"%/find" and (Process.CommandLine like r"%-perm -4000%" or Process.CommandLine like r"%-perm -2000%" or Process.CommandLine like r"%-perm 0777%" or Process.CommandLine like r"%-perm -222%" or Process.CommandLine like r"%-perm -o w%" or Process.CommandLine like r"%-perm -o x%" or Process.CommandLine like r"%-perm -u=s%" or Process.CommandLine like r"%-perm -g=s%"))

[ActivityMonitoringRule]
# Detects deletion of local audit logs
# Author: remotephone, oscd.community
RuleName = Indicator Removal on Host - Clear Mac System Logs
EventType = Process.Start
Tag = proc-start-indicator-removal-on-host-clear-mac-system-logs
RiskScore = 50
Query = ((Process.Path like r"%/rm" or Process.Path like r"%/unlink" or Process.Path like r"%/shred") and (Process.CommandLine like r"%/var/log%" or (Process.CommandLine like r"%/Users/%" and Process.CommandLine like r"%/Library/Logs/%")))

[ActivityMonitoringRule]
# Detects usage of system utilities (only grep for now) to discover security software discovery
# Author: Daniil Yugoslavskiy, oscd.community
RuleName = Security Software Discovery - MacOs
EventType = Process.Start
Tag = proc-start-security-software-discovery-macos
RiskScore = 50
Query = (Process.Path == "/usr/bin/grep" and ((Process.CommandLine like r"%nessusd%" or Process.CommandLine like r"%santad%" or Process.CommandLine like r"%CbDefense%" or Process.CommandLine like r"%falcond%" or Process.CommandLine like r"%td-agent%" or Process.CommandLine like r"%packetbeat%" or Process.CommandLine like r"%filebeat%" or Process.CommandLine like r"%auditbeat%" or Process.CommandLine like r"%osqueryd%" or Process.CommandLine like r"%BlockBlock%" or Process.CommandLine like r"%LuLu%") or (Process.CommandLine like r"%Little%" and Process.CommandLine like r"%Snitch%")))

[ActivityMonitoringRule]
# Detects the execution of suspicious child processes from macOS installer package parent process. This includes osascript, JXA, curl and wget amongst other interpreters
# Author: Sohan G (D4rkCiph3r)
RuleName = Suspicious Installer Package Child Process
EventType = Process.Start
Tag = proc-start-suspicious-installer-package-child-process
RiskScore = 50
Query = ((Parent.Path like r"%/package\_script\_service" or Parent.Path like r"%/installer") and (Process.Path like r"%/sh" or Process.Path like r"%/bash" or Process.Path like r"%/dash" or Process.Path like r"%/python" or Process.Path like r"%/ruby" or Process.Path like r"%/perl" or Process.Path like r"%/php" or Process.Path like r"%/javascript" or Process.Path like r"%/osascript" or Process.Path like r"%/tclsh" or Process.Path like r"%/curl" or Process.Path like r"%/wget") and (Process.CommandLine like r"%preinstall%" or Process.CommandLine like r"%postinstall%"))
GenericProperty1 = Parent.Path

[ActivityMonitoringRule]
# Detects when the macOS Script Editor utility spawns an unusual child process.
# Author: Tim Rauch (rule), Elastic (idea)
RuleName = Suspicious Execution via macOS Script Editor
EventType = Process.Start
Tag = proc-start-suspicious-execution-via-macos-script-editor
RiskScore = 50
Query = (Parent.Path like r"%/Script Editor" and ((Process.Path like r"%/curl" or Process.Path like r"%/bash" or Process.Path like r"%/sh" or Process.Path like r"%/zsh" or Process.Path like r"%/dash" or Process.Path like r"%/fish" or Process.Path like r"%/osascript" or Process.Path like r"%/mktemp" or Process.Path like r"%/chmod" or Process.Path like r"%/php" or Process.Path like r"%/nohup" or Process.Path like r"%/openssl" or Process.Path like r"%/plutil" or Process.Path like r"%/PlistBuddy" or Process.Path like r"%/xattr" or Process.Path like r"%/sqlite" or Process.Path like r"%/funzip" or Process.Path like r"%/popen") or (Process.Path like r"%python%" or Process.Path like r"%perl%")))
GenericProperty1 = Parent.Path

[ActivityMonitoringRule]
# Detects disabling security tools
# Author: Daniil Yugoslavskiy, oscd.community
RuleName = Disable Security Tools
EventType = Process.Start
Tag = proc-start-disable-security-tools
RiskScore = 50
Query = ((Process.Path == "/bin/launchctl" and Process.CommandLine like r"%unload%" and (Process.CommandLine like r"%com.objective-see.lulu.plist%" or Process.CommandLine like r"%com.objective-see.blockblock.plist%" or Process.CommandLine like r"%com.google.santad.plist%" or Process.CommandLine like r"%com.carbonblack.defense.daemon.plist%" or Process.CommandLine like r"%com.carbonblack.daemon.plist%" or Process.CommandLine like r"%at.obdev.littlesnitchd.plist%" or Process.CommandLine like r"%com.tenablesecurity.nessusagent.plist%" or Process.CommandLine like r"%com.opendns.osx.RoamingClientConfigUpdater.plist%" or Process.CommandLine like r"%com.crowdstrike.falcond.plist%" or Process.CommandLine like r"%com.crowdstrike.userdaemon.plist%" or Process.CommandLine like r"%osquery%" or Process.CommandLine like r"%filebeat%" or Process.CommandLine like r"%auditbeat%" or Process.CommandLine like r"%packetbeat%" or Process.CommandLine like r"%td-agent%")) or (Process.Path == "/usr/sbin/spctl" and Process.CommandLine like r"%disable%"))

[ActivityMonitoringRule]
# Detects attempts to create and/or add an account to the admin group, thus granting admin privileges.
# Author: Sohan G (D4rkCiph3r)
RuleName = User Added To Admin Group - MacOS
EventType = Process.Start
Tag = proc-start-user-added-to-admin-group-macos
RiskScore = 50
Query = ((Process.Path like r"%/sysadminctl" and Process.CommandLine like r"% -addUser %" and Process.CommandLine like r"% -admin %") or (Process.Path like r"%/dscl" and Process.CommandLine like r"% -append %" and Process.CommandLine like r"% /Groups/admin %" and Process.CommandLine like r"% GroupMembership %"))

[ActivityMonitoringRule]
# Detects potential suspicious applet or osascript executing "osacompile".
# Author: Sohan G (D4rkCiph3r), Red Canary (Idea)
RuleName = Osacompile Execution By Potentially Suspicious Applet/Osascript
EventType = Process.Start
Tag = proc-start-osacompile-execution-by-potentially-suspicious-applet/osascript
RiskScore = 50
Query = ((Parent.Path like r"%/applet" or Parent.Path like r"%/osascript") and Process.CommandLine like r"%osacompile%")
GenericProperty1 = Parent.Path

[ActivityMonitoringRule]
# Identifies the execution traces of the XCSSET malware. XCSSET is a macOS trojan that primarily spreads via Xcode projects and maliciously modifies applications. Infected users are also vulnerable to having their credentials, accounts, and other vital data stolen.
# Author: Tim Rauch (rule), Elastic (idea)
RuleName = Potential XCSSET Malware Infection
EventType = Process.Start
Tag = proc-start-potential-xcsset-malware-infection
RiskScore = 50
Query = ((Parent.Path like r"%/bash" and Process.Path like r"%/curl" and (Process.CommandLine like r"%/sys/log.php%" or Process.CommandLine like r"%/sys/prepod.php%" or Process.CommandLine like r"%/sys/bin/Pods%") and Process.CommandLine like r"%https://%") or ((Parent.Path like r"%/bash" and Process.Path like r"%/osacompile" and Process.CommandLine like r"%/Users/%" and Process.CommandLine like r"%/Library/Group Containers/%") or (Parent.Path like r"%/bash" and Process.Path like r"%/plutil" and Process.CommandLine like r"%LSUIElement%" and Process.CommandLine like r"%/Users/%" and Process.CommandLine like r"%/Library/Group Containers/%") or (Process.Path like r"%/zip" and Process.CommandLine like r"%-r%" and Process.CommandLine like r"%/Users/%" and Process.CommandLine like r"%/Library/Group Containers/%")))
GenericProperty1 = Parent.Path

[ActivityMonitoringRule]
# Detects passwords dumps from Keychain
# Author: Tim Ismilyaev, oscd.community, Florian Roth (Nextron Systems)
RuleName = Credentials from Password Stores - Keychain
EventType = Process.Start
Tag = proc-start-credentials-from-password-stores-keychain
RiskScore = 50
Query = ((Process.Path == "/usr/bin/security" and (Process.CommandLine like r"%find-certificate%" or Process.CommandLine like r"% export %")) or (Process.CommandLine like r"% dump-keychain %" or Process.CommandLine like r"% login-keychain %"))

[ActivityMonitoringRule]
# Detects when a user manipulates with Firmward Password on MacOS. NOTE - this command has been disabled on silicon-based apple computers.
# Author: Austin Songer @austinsonger
RuleName = Suspicious MacOS Firmware Activity
EventType = Process.Start
Tag = proc-start-suspicious-macos-firmware-activity
RiskScore = 50
Query = (Process.Path == "/usr/sbin/firmwarepasswd" and (Process.CommandLine like r"%setpasswd%" or Process.CommandLine like r"%full%" or Process.CommandLine like r"%delete%" or Process.CommandLine like r"%check%"))

[ActivityMonitoringRule]
# Detects when a built-in utility is used to decode and decrypt a payload after a macOS disk image (DMG) is executed. Malware authors may attempt to evade detection and trick users into executing malicious code by encoding and encrypting their payload and placing it in a disk image file. This behavior is consistent with adware or malware families such as Bundlore and Shlayer.
# Author: Tim Rauch (rule), Elastic (idea)
RuleName = Payload Decoded and Decrypted via Built-in Utilities
EventType = Process.Start
Tag = proc-start-payload-decoded-and-decrypted-via-built-in-utilities
RiskScore = 50
Query = (Process.Path like r"%/openssl" and Process.CommandLine like r"%/Volumes/%" and Process.CommandLine like r"%enc%" and Process.CommandLine like r"%-base64%" and Process.CommandLine like r"% -d %")

[ActivityMonitoringRule]
# Detect file time attribute change to hide new or changes to existing files
# Author: Igor Fits, Mikhail Larin, oscd.community
RuleName = File Time Attribute Change
EventType = Process.Start
Tag = proc-start-file-time-attribute-change
RiskScore = 50
Query = (Process.Path like r"%/touch" and (Process.CommandLine like r"%-t%" or Process.CommandLine like r"%-acmr%" or Process.CommandLine like r"%-d%" or Process.CommandLine like r"%-r%"))

[ActivityMonitoringRule]
# Detects execution of AppleScript of the macOS scripting language AppleScript.
# Author: Alejandro Ortuno, oscd.community
RuleName = MacOS Scripting Interpreter AppleScript
EventType = Process.Start
Tag = proc-start-macos-scripting-interpreter-applescript
RiskScore = 50
Query = (Process.Path like r"%/osascript" and (Process.CommandLine like r"% -e %" or Process.CommandLine like r"%.scpt%" or Process.CommandLine like r"%.js%"))

[ActivityMonitoringRule]
# Detects suspicious child processes spawned from browsers. This could be a result of a potential web browser exploitation.
# Author: Sohan G (D4rkCiph3r)
RuleName = Suspicious Browser Child Process - MacOS
EventType = Process.Start
Tag = proc-start-suspicious-browser-child-process-macos
RiskScore = 50
Query = ((((Parent.Path like r"%com.apple.WebKit.WebContent%" or Parent.Path like r"%firefox%" or Parent.Path like r"%Google Chrome Helper%" or Parent.Path like r"%Google Chrome%" or Parent.Path like r"%Microsoft Edge%" or Parent.Path like r"%Opera%" or Parent.Path like r"%Safari%" or Parent.Path like r"%Tor Browser%") and (Process.Path like r"%/bash" or Process.Path like r"%/curl" or Process.Path like r"%/dash" or Process.Path like r"%/ksh" or Process.Path like r"%/osascript" or Process.Path like r"%/perl" or Process.Path like r"%/php" or Process.Path like r"%/pwsh" or Process.Path like r"%/python" or Process.Path like r"%/sh" or Process.Path like r"%/tcsh" or Process.Path like r"%/wget" or Process.Path like r"%/zsh")) and not ((Process.CommandLine like r"%--defaults-torrc%") or (Process.CommandLine like r"%/Library/Application Support/Microsoft/MAU%/Microsoft AutoUpdate.app/Contents/MacOS/msupdate%") or ((Parent.Path like r"%Google Chrome Helper%" or Parent.Path like r"%Google Chrome%") and (Process.CommandLine like r"%/Volumes/Google Chrome/Google Chrome.app/Contents/Frameworks/%/Resources/install.sh%" or Process.CommandLine like r"%/Applications/Google Chrome.app/Contents/Frameworks/Google Chrome Framework.framework/%/Resources/keystone\_promote\_preflight.sh%" or Process.CommandLine like r"%/Applications/Google Chrome.app/Contents/Frameworks/Google Chrome Framework.framework/%/Resources/keystone\_promote\_postflight.sh%")) or (Parent.Path like r"%Microsoft Edge%" and (Process.CommandLine like r"%IOPlatformExpertDevice%" or Process.CommandLine like r"%hw.model%")) or ((Parent.Path like r"%Google Chrome Helper%" or Parent.Path like r"%Google Chrome%") and Process.CommandLine like r"%/Users/%" and Process.CommandLine like r"%/Library/Application Support/Google/Chrome/recovery/%" and Process.CommandLine like r"%/ChromeRecovery%"))) and not ((Process.CommandLine == '') or (Process.CommandLine == "")))
GenericProperty1 = Parent.Path

[ActivityMonitoringRule]
# Detects the addition of office test registry that allows a user to specify an arbitrary DLL that will be executed every time an Office application is started
# Author: omkar72
RuleName = Office Application Startup - Office Test
EventType = Reg.Any
Tag = office-application-startup-office-test
RiskScore = 50
Query = (Reg.Key.Target like r"HKCU\\Software\\Microsoft\\Office test\\Special\\Perf" or Reg.Key.Target like r"HKLM\\Software\\Microsoft\\Office test\\Special\\Perf")
Hive = HKLM,HKU
GenericProperty1 = Reg.Key.Target

[ActivityMonitoringRule]
# Dynamic-link libraries (DLLs) that are specified in the AppCertDLLs value in the Registry key can be abused to obtain persistence and privilege escalation
# by causing a malicious DLL to be loaded and run in the context of separate processes on the computer.
# Author: Ilyas Ochkov, oscd.community
RuleName = New DLL Added to AppCertDlls Registry Key
EventType = Reg.Any
Tag = new-dll-added-to-appcertdlls-registry-key
RiskScore = 50
Query = (Reg.Key.Target like r"HKLM\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\AppCertDlls" or Reg.Key.Path.New like r"HKLM\\SYSTEM\\CurentControlSet\\Control\\Session Manager\\AppCertDlls")
Hive = HKLM,HKU
GenericProperty1 = Reg.Key.Target
GenericProperty2 = Reg.Key.Path.New

[ActivityMonitoringRule]
# Detects value modification of registry key containing path to binary used as screensaver.
# Author: Bartlomiej Czyz @bczyz1, oscd.community
RuleName = Path To Screensaver Binary Modified
EventType = Reg.Any
Tag = path-to-screensaver-binary-modified
RiskScore = 50
Query = (Reg.Key.Target like r"%\\Control Panel\\Desktop\\SCRNSAVE.EXE" and not ((Process.Path like r"%\\rundll32.exe" or Process.Path like r"%\\explorer.exe")))
Hive = HKLM,HKU
GenericProperty1 = Reg.Key.Target

[ActivityMonitoringRule]
# Detects the modification of PortProxy registry key which is used for port forwarding. For command execution see rule win_netsh_port_fwd.yml.
# Author: Andreas Hunkeler (@Karneades)
RuleName = PortProxy Registry Key
EventType = Reg.Any
Tag = portproxy-registry-key
RiskScore = 50
Query = Reg.Key.Target like r"HKLM\\SYSTEM\\CurrentControlSet\\Services\\PortProxy\\v4tov4\\tcp"
Hive = HKLM,HKU
GenericProperty1 = Reg.Key.Target

[ActivityMonitoringRule]
# Detects potential DLL sideloading of "goopdate.dll", a DLL used by googleupdate.exe
# Author: X__Junior (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)
RuleName = Potential Goopdate.DLL Sideloading
EventType = Image.Load
Tag = potential-goopdate.dll-sideloading
RiskScore = 50
Query = ((Image.Path like r"%\\goopdate.dll" and not (((Image.Path like r"C:\\Program Files (x86)\\%" or Image.Path like r"C:\\Program Files\\%")))) and not ((Process.Path like r"%\\AppData\\Local\\Temp\\GUM%" and Process.Path like r"%.tmp\\Dropbox%" and Image.Path like r"%\\AppData\\Local\\Temp\\GUM%" and Image.Path like r"%.tmp\\goopdate.dll%")))
GenericProperty1 = Image.Path

[ActivityMonitoringRule]
# Detects potential DLL sideloading of "libcurl.dll" by the "gup.exe" process from an uncommon location
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleName = Potential DLL Sideloading Of Libcurl.DLL Via GUP.EXE
EventType = Image.Load
Tag = potential-dll-sideloading-of-libcurl.dll-via-gup.exe
RiskScore = 50
Query = ((Process.Path like r"%\\gup.exe" and Image.Path like r"%\\libcurl.dll") and not ((Process.Path like r"%\\Notepad++\\updater\\GUP.exe")))
GenericProperty1 = Image.Path

[ActivityMonitoringRule]
# Detects DLL sideloading of DLLs that are part of third party software (zoom, discord....etc)
# Author: Nasreddine Bencherchali (Nextron Systems), Wietze Beukema (project and research)
RuleName = Third Party Software DLL Sideloading
EventType = Image.Load
Tag = third-party-software-dll-sideloading
RiskScore = 50
Query = ((Image.Path like r"%\\commfunc.dll" and not (Image.Path like r"%\\AppData\\local\\Google\\Chrome\\Application\\%" or (Image.Path like r"C:\\Program Files\\Lenovo\\Communications Utility\\%" or Image.Path like r"C:\\Program Files (x86)\\Lenovo\\Communications Utility\\%"))) or (Image.Path like r"%\\tosbtkbd.dll" and not ((Image.Path like r"C:\\Program Files\\Toshiba\\Bluetooth Toshiba Stack\\%" or Image.Path like r"C:\\Program Files (x86)\\Toshiba\\Bluetooth Toshiba Stack\\%"))))
GenericProperty1 = Image.Path

[ActivityMonitoringRule]
# Detects potential DLL sideloading using ClassicExplorer32.dll from the Classic Shell software
# Author: frack113
RuleName = Potential DLL Sideloading Via ClassicExplorer32.dll
EventType = Image.Load
Tag = potential-dll-sideloading-via-classicexplorer32.dll
RiskScore = 50
Query = (Image.Path like r"%\\ClassicExplorer32.dll" and not (Image.Path like r"C:\\Program Files\\Classic Shell\\%"))
GenericProperty1 = Image.Path

[ActivityMonitoringRule]
# Detects DLL sideloading of "dbgcore.dll"
# Author: Nasreddine Bencherchali (Nextron Systems), Wietze Beukema (project and research)
RuleName = Potential DLL Sideloading Of DBGCORE.DLL
EventType = Image.Load
Tag = potential-dll-sideloading-of-dbgcore.dll
RiskScore = 50
Query = ((Image.Path like r"%\\dbgcore.dll" and not (((Image.Path like r"C:\\Program Files (x86)\\%" or Image.Path like r"C:\\Program Files\\%" or Image.Path like r"C:\\Windows\\SoftwareDistribution\\%" or Image.Path like r"C:\\Windows\\System32\\%" or Image.Path like r"C:\\Windows\\SystemTemp\\%" or Image.Path like r"C:\\Windows\\SysWOW64\\%" or Image.Path like r"C:\\Windows\\WinSxS\\%")))) and not ((Image.Path like r"%\\Steam\\bin\\cef\\cef.win7x64\\dbgcore.dll")))
GenericProperty1 = Image.Path

[ActivityMonitoringRule]
# Detects potential DLL side loading of DLLs that are part of the Wazuh security platform
# Author: X__Junior (Nextron Systems)
RuleName = Potential Wazuh Security Platform DLL Sideloading
EventType = Image.Load
Tag = potential-wazuh-security-platform-dll-sideloading
RiskScore = 50
Query = (((Image.Path like r"%\\libwazuhshared.dll" or Image.Path like r"%\\libwinpthread-1.dll") and not (((Image.Path like r"C:\\Program Files\\%" or Image.Path like r"C:\\Program Files (x86)\\%")))) and not (((Image.Path like r"%\\AppData\\Local\\%" or Image.Path like r"%\\ProgramData\\%") and Image.Path like r"%\\mingw64\\bin\\libwinpthread-1.dll")))
GenericProperty1 = Image.Path

[ActivityMonitoringRule]
# Detects loading of essential DLLs used by PowerShell, but not by the process powershell.exe. Detects behaviour similar to meterpreter's "load powershell" extension.
# Author: Tom Kern, oscd.community, Natalia Shornikova, Tim Shelton
RuleName = PowerShell Core DLL Loaded By Non PowerShell Process
EventType = Image.Load
Tag = powershell-core-dll-loaded-by-non-powershell-process
RiskScore = 50
Query = ((Image.Path like r"%\\System.Management.Automation.Dll" or Image.Path like r"%\\System.Management.Automation.ni.Dll") and not (((Process.Path like r"C:\\Windows\\System32\\dsac.exe" or Process.Path like r"C:\\Program Files\\PowerShell\\7\\pwsh.exe") or (Process.Path like r"%\\powershell.exe" or Process.Path like r"%\\powershell\_ise.exe" or Process.Path like r"%\\WINDOWS\\System32\\sdiagnhost.exe" or Process.Path like r"%\\mscorsvw.exe" or Process.Path like r"%\\WINDOWS\\System32\\RemoteFXvGPUDisablement.exe" or Process.Path like r"%\\sqlps.exe" or Process.Path like r"%\\wsmprovhost.exe" or Process.Path like r"%\\winrshost.exe" or Process.Path like r"%\\syncappvpublishingserver.exe" or Process.Path like r"%\\runscripthelper.exe" or Process.Path like r"%\\ServerManager.exe" or Process.Path like r"%\\Microsoft SQL Server Management Studio %\\Common%\\IDE\\Ssms.exe" or Process.Path like r"%\\IDE\\devenv.exe" or Process.Path like r"%\\ServiceHub.VSDetouredHost.exe" or Process.Path like r"%\\ServiceHub.SettingsHost.exe" or Process.Path like r"%\\ServiceHub.Host.CLR.x86.exe" or Process.Path like r"%\\Citrix\\ConfigSync\\ConfigSyncRun.exe") or (Process.Path like r"C:\\Program Files (x86)\\Microsoft Visual Studio\\%" or Process.Path like r"C:\\Program Files\\Microsoft Visual Studio\\%")) or (Process.Path like r"C:\\Windows\\Temp\\asgard2-agent\\%" and (Process.Path like r"%\\thor64.exe" or Process.Path like r"%\\thor.exe")) or (Process.Path == '')))
GenericProperty1 = Image.Path

[ActivityMonitoringRule]
# Loading unsigned image (DLL, EXE) into LSASS process
# Author: Teymur Kheirkhabarov, oscd.community
RuleName = Unsigned Image Loaded Into LSASS Process
EventType = Image.Load
Tag = unsigned-image-loaded-into-lsass-process
RiskScore = 50
Query = (Process.Path like r"%\\lsass.exe" and Image.IsSigned == "false")
GenericProperty1 = Image.IsSigned

[ActivityMonitoringRule]
# Detects potential DLL sideloading of "libvlc.dll", a DLL that is legitimately used by "VLC.exe"
# Author: X__Junior
RuleName = Potential Libvlc.DLL Sideloading
EventType = Image.Load
Tag = potential-libvlc.dll-sideloading
RiskScore = 50
Query = (Image.Path like r"%\\libvlc.dll" and not (((Image.Path like r"C:\\Program Files (x86)\\VideoLAN\\VLC\\%" or Image.Path like r"C:\\Program Files\\VideoLAN\\VLC\\%"))))
GenericProperty1 = Image.Path

[ActivityMonitoringRule]
# Detects signs of the WMI script host process "scrcons.exe" loading scripting DLLs which could indciates WMI ActiveScriptEventConsumers EventConsumers activity.
# Author: Roberto Rodriguez (Cyb3rWard0g), OTR (Open Threat Research)
RuleName = WMI ActiveScriptEventConsumers Activity Via Scrcons.EXE DLL Load
EventType = Image.Load
Tag = wmi-activescripteventconsumers-activity-via-scrcons.exe-dll-load
RiskScore = 50
Query = (Process.Path like r"%\\scrcons.exe" and (Image.Path like r"%\\vbscript.dll" or Image.Path like r"%\\wbemdisp.dll" or Image.Path like r"%\\wshom.ocx" or Image.Path like r"%\\scrrun.dll"))
GenericProperty1 = Image.Path

[ActivityMonitoringRule]
# Detects DLL sideloading of VMGuestLib.dll by the WmiApSrv service.
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleName = VMGuestLib DLL Sideload
EventType = Image.Load
Tag = vmguestlib-dll-sideload
RiskScore = 50
Query = ((Image.Path like r"%\\VMware\\VMware Tools\\vmStatsProvider\\win32%" and Image.Path like r"%\\vmGuestLib.dll%" and Process.Path like r"%\\Windows\\System32\\wbem\\WmiApSrv.exe") and not (Image.IsSigned == "true"))
GenericProperty1 = Image.Path
GenericProperty2 = Image.IsSigned

[ActivityMonitoringRule]
# Detects signs of potential use of the WSMAN provider from uncommon processes locally and remote execution.
# Author: Roberto Rodriguez (Cyb3rWard0g), OTR (Open Threat Research)
RuleName = Suspicious WSMAN Provider Image Loads
EventType = Image.Load
Tag = suspicious-wsman-provider-image-loads
RiskScore = 50
Query = (((((Image.Path like r"%\\WsmSvc.dll" or Image.Path like r"%\\WsmAuto.dll" or Image.Path like r"%\\Microsoft.WSMan.Management.ni.dll") or Process.Name in ["WsmSvc.dll", "WSMANAUTOMATION.DLL", "Microsoft.WSMan.Management.dll"]) or (Process.Path like r"%\\svchost.exe" and Process.Name == "WsmWmiPl.dll")) and not (((Process.Path like r"%\\powershell.exe" or Process.Path like r"%C:\\Windows\\System32\\sdiagnhost.exe" or Process.Path like r"%C:\\Windows\\System32\\services.exe")) or ((Process.CommandLine like r"%svchost.exe -k netsvcs -p -s BITS%" or Process.CommandLine like r"%svchost.exe -k GraphicsPerfSvcGroup -s GraphicsPerfSvc%" or Process.CommandLine like r"%svchost.exe -k NetworkService -p -s Wecsvc%" or Process.CommandLine like r"%svchost.exe -k netsvcs%")) or ((Process.Path like r"C:\\Windows\\Microsoft.NET\\Framework64\\v%" or Process.Path like r"C:\\Windows\\Microsoft.NET\\Framework\\v%") and Process.Path like r"%\\mscorsvw.exe") or ((Process.Path like r"C:\\Windows\\System32\\Configure-SMRemoting.exe" or Process.Path like r"C:\\Windows\\System32\\ServerManager.exe")) or (Process.Path like r"C:\\Windows\\Temp\\asgard2-agent\\%") or (Process.Path like r"C:\\Program Files\\Citrix\\%") or (Process.Path like r"%\\powershell\_ise.exe") or (Process.Path like r"C:\\$WINDOWS.~BT\\Sources\\%"))) and not ((Process.Path like r"%\\svchost.exe" and Process.CommandLine == '')))
GenericProperty1 = Image.Path

[ActivityMonitoringRule]
# Detects potential DLL sideloading of "chrome_frame_helper.dll"
# Author: Nasreddine Bencherchali (Nextron Systems), Wietze Beukema (project and research)
RuleName = Potential Chrome Frame Helper DLL Sideloading
EventType = Image.Load
Tag = potential-chrome-frame-helper-dll-sideloading
RiskScore = 50
Query = ((Image.Path like r"%\\chrome\_frame\_helper.dll" and not (((Image.Path like r"C:\\Program Files\\Google\\Chrome\\Application\\%" or Image.Path like r"C:\\Program Files (x86)\\Google\\Chrome\\Application\\%")))) and not ((Image.Path like r"%\\AppData\\local\\Google\\Chrome\\Application\\%")))
GenericProperty1 = Image.Path

[ActivityMonitoringRule]
# Detects potential DLL sideloading using JUSTSYSTEMS Japanese word processor
# Author: frack113
RuleName = Potential DLL Sideloading Via JsSchHlp
EventType = Image.Load
Tag = potential-dll-sideloading-via-jsschhlp
RiskScore = 50
Query = (Image.Path like r"%\\JSESPR.dll" and not (Image.Path like r"C:\\Program Files\\Common Files\\Justsystem\\JsSchHlp\\%"))
GenericProperty1 = Image.Path

[ActivityMonitoringRule]
# Detects Microsoft Excel loading an Add-In (.xll) file from an uncommon location
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleName = Microsoft Excel Add-In Loaded From Uncommon Location
EventType = Image.Load
Tag = microsoft-excel-add-in-loaded-from-uncommon-location
RiskScore = 50
Query = (Process.Path like r"%\\excel.exe" and (Image.Path like r"%\\Desktop\\%" or Image.Path like r"%\\Downloads\\%" or Image.Path like r"%\\Perflogs\\%" or Image.Path like r"%\\Temp\\%" or Image.Path like r"%\\Users\\Public\\%" or Image.Path like r"%\\Windows\\Tasks\\%") and Image.Path like r"%.xll")
GenericProperty1 = Image.Path

[ActivityMonitoringRule]
# Detects CLR DLL being loaded by an Office Product
# Author: Antonlovesdnb
RuleName = CLR DLL Loaded Via Office Applications
EventType = Image.Load
Tag = clr-dll-loaded-via-office-applications
RiskScore = 50
Query = ((Process.Path like r"%\\excel.exe" or Process.Path like r"%\\mspub.exe" or Process.Path like r"%\\outlook.exe" or Process.Path like r"%\\onenote.exe" or Process.Path like r"%\\onenoteim.exe" or Process.Path like r"%\\powerpnt.exe" or Process.Path like r"%\\winword.exe") and Image.Path like r"%\\clr.dll%")
GenericProperty1 = Image.Path

[ActivityMonitoringRule]
# Detects DLL sideloading of "dbghelp.dll"
# Author: Nasreddine Bencherchali (Nextron Systems), Wietze Beukema (project and research)
RuleName = Potential DLL Sideloading Of DBGHELP.DLL
EventType = Image.Load
Tag = potential-dll-sideloading-of-dbghelp.dll
RiskScore = 50
Query = ((Image.Path like r"%\\dbghelp.dll" and not (((Image.Path like r"C:\\Program Files (x86)\\%" or Image.Path like r"C:\\Program Files\\%" or Image.Path like r"C:\\Windows\\SoftwareDistribution\\%" or Image.Path like r"C:\\Windows\\System32\\%" or Image.Path like r"C:\\Windows\\SystemTemp\\%" or Image.Path like r"C:\\Windows\\SysWOW64\\%" or Image.Path like r"C:\\Windows\\WinSxS\\%")))) and not (((Image.Path like r"%\\Anaconda3\\Lib\\site-packages\\vtrace\\platforms\\windll\\amd64\\dbghelp.dll" or Image.Path like r"%\\Anaconda3\\Lib\\site-packages\\vtrace\\platforms\\windll\\i386\\dbghelp.dll")) or ((Image.Path like r"%\\Epic Games\\Launcher\\Engine\\Binaries\\ThirdParty\\DbgHelp\\dbghelp.dll" or Image.Path like r"%\\Epic Games\\MagicLegends\\x86\\dbghelp.dll"))))
GenericProperty1 = Image.Path

[ActivityMonitoringRule]
# Detects potential DLL sideloading of "SolidPDFCreator.dll"
# Author: X__Junior (Nextron Systems)
RuleName = Potential SolidPDFCreator.DLL Sideloading
EventType = Image.Load
Tag = potential-solidpdfcreator.dll-sideloading
RiskScore = 50
Query = (Image.Path like r"%\\SolidPDFCreator.dll" and not ((Process.Path like r"%\\SolidPDFCreator.exe" and (Image.Path like r"C:\\Program Files (x86)\\SolidDocuments\\SolidPDFCreator\\%" or Image.Path like r"C:\\Program Files\\SolidDocuments\\SolidPDFCreator\\%"))))
GenericProperty1 = Image.Path

[ActivityMonitoringRule]
# Detects threat actors proxy executing code and bypassing application controls by leveraging wmic and the `/FORMAT` argument switch to download and execute an XSL file (i.e js, vbs, etc).
# Author: Roberto Rodriguez (Cyb3rWard0g), OTR (Open Threat Research)
RuleName = WMIC Loading Scripting Libraries
EventType = Image.Load
Tag = wmic-loading-scripting-libraries
RiskScore = 50
Query = (Process.Path like r"%\\wmic.exe" and (Image.Path like r"%\\jscript.dll" or Image.Path like r"%\\vbscript.dll"))
GenericProperty1 = Image.Path

[ActivityMonitoringRule]
# Detects potential DLL sideloading of "wwlib.dll"
# Author: X__Junior (Nextron Systems)
RuleName = Potential WWlib.DLL Sideloading
EventType = Image.Load
Tag = potential-wwlib.dll-sideloading
RiskScore = 50
Query = (Image.Path like r"%\\wwlib.dll" and not (((Process.Path like r"C:\\Program Files (x86)\\Microsoft Office\\%" or Process.Path like r"C:\\Program Files\\Microsoft Office\\%") and Process.Path like r"%\\winword.exe" and (Image.Path like r"C:\\Program Files (x86)\\Microsoft Office\\%" or Image.Path like r"C:\\Program Files\\Microsoft Office\\%"))))
GenericProperty1 = Image.Path

[ActivityMonitoringRule]
# Detects DSParse DLL being loaded by an Office Product
# Author: Antonlovesdnb
RuleName = Active Directory Parsing DLL Loaded Via Office Application
EventType = Image.Load
Tag = active-directory-parsing-dll-loaded-via-office-application
RiskScore = 50
Query = ((Process.Path like r"%\\excel.exe" or Process.Path like r"%\\mspub.exe" or Process.Path like r"%\\onenote.exe" or Process.Path like r"%\\onenoteim.exe" or Process.Path like r"%\\outlook.exe" or Process.Path like r"%\\powerpnt.exe" or Process.Path like r"%\\winword.exe") and Image.Path like r"%\\dsparse.dll%")
GenericProperty1 = Image.Path

[ActivityMonitoringRule]
# Detect usage of DLL "coregen.exe" (Microsoft CoreCLR Native Image Generator) binary to sideload arbitrary DLLs.
# Author: frack113
RuleName = Potential DLL Sideloading Using Coregen.exe
EventType = Image.Load
Tag = potential-dll-sideloading-using-coregen.exe
RiskScore = 50
Query = (Process.Path like r"%\\coregen.exe" and not ((Image.Path like r"C:\\Windows\\System32\\%" or Image.Path like r"C:\\Windows\\SysWOW64\\%" or Image.Path like r"C:\\Program Files\\Microsoft Silverlight\\%" or Image.Path like r"C:\\Program Files (x86)\\Microsoft Silverlight\\%")))
GenericProperty1 = Image.Path

[ActivityMonitoringRule]
# Detects any assembly DLL being loaded by an Office Product
# Author: Antonlovesdnb
RuleName = DotNET Assembly DLL Loaded Via Office Application
EventType = Image.Load
Tag = dotnet-assembly-dll-loaded-via-office-application
RiskScore = 50
Query = ((Process.Path like r"%\\excel.exe" or Process.Path like r"%\\mspub.exe" or Process.Path like r"%\\onenote.exe" or Process.Path like r"%\\onenoteim.exe" or Process.Path like r"%\\outlook.exe" or Process.Path like r"%\\powerpnt.exe" or Process.Path like r"%\\winword.exe") and Image.Path like r"C:\\Windows\\assembly\\%")
GenericProperty1 = Image.Path

[ActivityMonitoringRule]
# Detects potential DLL sideloading of DLLs that are part of antivirus software suchas McAfee, Symantec...etc
# Author: Nasreddine Bencherchali (Nextron Systems), Wietze Beukema (project and research)
RuleName = Potential Antivirus Software DLL Sideloading
EventType = Image.Load
Tag = potential-antivirus-software-dll-sideloading
RiskScore = 50
Query = (((((((Image.Path like r"%\\log.dll" and not (((Image.Path like r"C:\\Program Files\\Bitdefender Antivirus Free\\%" or Image.Path like r"C:\\Program Files (x86)\\Bitdefender Antivirus Free\\%")) or (Process.Path like r"C:\\Program Files\\Dell\\SARemediation\\audit\\TelemetryUtility.exe" and (Image.Path like r"C:\\Program Files\\Dell\\SARemediation\\plugin\\log.dll" or Image.Path like r"C:\\Program Files\\Dell\\SARemediation\\audit\\log.dll")) or (Image.Path like r"C:\\Program Files\\Canon\\MyPrinter\\%"))) or (Image.Path like r"%\\qrt.dll" and not ((Image.Path like r"C:\\Program Files\\F-Secure\\Anti-Virus\\%" or Image.Path like r"C:\\Program Files (x86)\\F-Secure\\Anti-Virus\\%")))) or ((Image.Path like r"%\\ashldres.dll" or Image.Path like r"%\\lockdown.dll" or Image.Path like r"%\\vsodscpl.dll") and not ((Image.Path like r"C:\\Program Files\\McAfee\\%" or Image.Path like r"C:\\Program Files (x86)\\McAfee\\%")))) or (Image.Path like r"%\\vftrace.dll" and not ((Image.Path like r"C:\\Program Files\\CyberArk\\Endpoint Privilege Manager\\Agent\\x32\\%" or Image.Path like r"C:\\Program Files (x86)\\CyberArk\\Endpoint Privilege Manager\\Agent\\x32\\%")))) or (Image.Path like r"%\\wsc.dll" and not ((Image.Path like r"C:\\program Files\\AVAST Software\\Avast\\%" or Image.Path like r"C:\\program Files (x86)\\AVAST Software\\Avast\\%")))) or (Image.Path like r"%\\tmdbglog.dll" and not ((Image.Path like r"C:\\program Files\\Trend Micro\\Titanium\\%" or Image.Path like r"C:\\program Files (x86)\\Trend Micro\\Titanium\\%")))) or (Image.Path like r"%\\DLPPREM32.dll" and not ((Image.Path like r"C:\\program Files\\ESET%" or Image.Path like r"C:\\program Files (x86)\\ESET%"))))
GenericProperty1 = Image.Path

[ActivityMonitoringRule]
# Detects potential DLL sideloading of "roboform.dll", a DLL used by RoboForm Password Manager
# Author: X__Junior (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)
RuleName = Potential RoboForm.DLL Sideloading
EventType = Image.Load
Tag = potential-roboform.dll-sideloading
RiskScore = 50
Query = ((Image.Path like r"%\\roboform.dll" or Image.Path like r"%\\roboform-x64.dll") and not (((Process.Path like r" C:\\Program Files (x86)\\Siber Systems\\AI RoboForm\\%" or Process.Path like r" C:\\Program Files\\Siber Systems\\AI RoboForm\\%") and (Process.Path like r"%\\robotaskbaricon.exe" or Process.Path like r"%\\robotaskbaricon-x64.exe"))))
GenericProperty1 = Image.Path

[ActivityMonitoringRule]
# Detects Kerberos DLL being loaded by an Office Product
# Author: Antonlovesdnb
RuleName = Active Directory Kerberos DLL Loaded Via Office Application
EventType = Image.Load
Tag = active-directory-kerberos-dll-loaded-via-office-application
RiskScore = 50
Query = ((Process.Path like r"%\\excel.exe" or Process.Path like r"%\\mspub.exe" or Process.Path like r"%\\onenote.exe" or Process.Path like r"%\\onenoteim.exe" or Process.Path like r"%\\outlook.exe" or Process.Path like r"%\\powerpnt.exe" or Process.Path like r"%\\winword.exe") and Image.Path like r"%\\kerberos.dll")
GenericProperty1 = Image.Path

[ActivityMonitoringRule]
# Detects usage of COM objects that can be abused to download files in PowerShell by CLSID
# Author: frack113
RuleName = Potential COM Objects Download Cradles Usage - Process Creation
EventType = Process.Start
Tag = proc-start-potential-com-objects-download-cradles-usage-process-creation
RiskScore = 50
Query = (Process.CommandLine like r"%[Type]::GetTypeFromCLSID(%" and (Process.CommandLine like r"%0002DF01-0000-0000-C000-000000000046%" or Process.CommandLine like r"%F6D90F16-9C73-11D3-B32E-00C04F990BB4%" or Process.CommandLine like r"%F5078F35-C551-11D3-89B9-0000F81FE221%" or Process.CommandLine like r"%88d96a0a-f192-11d4-a65f-0040963251e5%" or Process.CommandLine like r"%AFBA6B42-5692-48EA-8141-DC517DCF0EF1%" or Process.CommandLine like r"%AFB40FFD-B609-40A3-9828-F88BBE11E4E3%" or Process.CommandLine like r"%88d96a0b-f192-11d4-a65f-0040963251e5%" or Process.CommandLine like r"%2087c2f4-2cef-4953-a8ab-66779b670495%" or Process.CommandLine like r"%000209FF-0000-0000-C000-000000000046%" or Process.CommandLine like r"%00024500-0000-0000-C000-000000000046%"))

[ActivityMonitoringRule]
# Detects usage of "MSOHTMED" to download arbitrary files
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleName = Download Arbitrary Files Via MSOHTMED.EXE
EventType = Process.Start
Tag = proc-start-download-arbitrary-files-via-msohtmed.exe
RiskScore = 50
Query = ((Process.Path like r"%\\MSOHTMED.exe" or Process.Name == "MsoHtmEd.exe") and (Process.CommandLine like r"%http://%" or Process.CommandLine like r"%https://%" or Process.CommandLine like r"%ftp://%"))

[ActivityMonitoringRule]
# Detects the usage of "reg.exe" in order to query reconnaissance information from the registry. Adversaries may interact with the Windows registry to gather information about credentials, the system, configuration, and installed software.
# Author: Timur Zinniatullin, oscd.community
RuleName = Potential Configuration And Service Reconnaissance Via Reg.EXE
EventType = Process.Start
Tag = proc-start-potential-configuration-and-service-reconnaissance-via-reg.exe
RiskScore = 50
Query = ((Process.Path like r"%\\reg.exe" or Process.Name == "reg.exe") and Process.CommandLine like r"%query%" and (Process.CommandLine like r"%currentVersion\\windows%" or Process.CommandLine like r"%winlogon\\%" or Process.CommandLine like r"%currentVersion\\shellServiceObjectDelayLoad%" or Process.CommandLine like r"%currentVersion\\run%" or Process.CommandLine like r"%currentVersion\\policies\\explorer\\run%" or Process.CommandLine like r"%currentcontrolset\\services%"))

[ActivityMonitoringRule]
# Detects execution of the "cloudflared" tool with the tunnel "cleanup" flag in order to cleanup tunnel connections.
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleName = Cloudflared Tunnel Connections Cleanup
EventType = Process.Start
Tag = proc-start-cloudflared-tunnel-connections-cleanup
RiskScore = 50
Query = (Process.CommandLine like r"% tunnel %" and Process.CommandLine like r"%cleanup %" and (Process.CommandLine like r"% --config %" or Process.CommandLine like r"% --connector-id %"))

[ActivityMonitoringRule]
# Detects usage of Msiexec.exe to install packages hosted remotely quietly
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleName = Suspicious Msiexec Quiet Install From Remote Location
EventType = Process.Start
Tag = proc-start-suspicious-msiexec-quiet-install-from-remote-location
RiskScore = 50
Query = ((Process.Path like r"%\\msiexec.exe" or Process.Name == "msiexec.exe") and (Process.CommandLine like r"%/i%" or Process.CommandLine like r"%-i%" or Process.CommandLine like r"%/package%" or Process.CommandLine like r"%-package%" or Process.CommandLine like r"%/a%" or Process.CommandLine like r"%-a%" or Process.CommandLine like r"%/j%" or Process.CommandLine like r"%-j%") and (Process.CommandLine like r"%/q%" or Process.CommandLine like r"%-q%") and (Process.CommandLine like r"%http%" or Process.CommandLine like r"%\\\\\*"))

[ActivityMonitoringRule]
# Detects potential suspicious execution of a GUID like folder name located in a suspicious location such as %TEMP% as seen being used in IcedID attacks
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleName = Suspicious Execution From GUID Like Folder Names
EventType = Process.Start
Tag = proc-start-suspicious-execution-from-guid-like-folder-names
RiskScore = 50
Query = (((Process.CommandLine like r"%\\AppData\\Roaming\\%" or Process.CommandLine like r"%\\AppData\\Local\\Temp\\%") and Process.CommandLine like r"%\\{%" and Process.CommandLine like r"%}\\%") and not ((Process.Path like r"%\\{%" and Process.Path like r"%}\\%") or (Process.Path == '') or (Process.Path like r"C:\\Windows\\System32\\drvinst.exe")))

[ActivityMonitoringRule]
# Detects the execution of netsh commands that configure a new port forwarding (PortProxy) rule
# Author: Florian Roth (Nextron Systems), omkar72, oscd.community, Swachchhanda Shrawan Poudel
RuleName = New Port Forwarding Rule Added Via Netsh.EXX
EventType = Process.Start
Tag = proc-start-new-port-forwarding-rule-added-via-netsh.exx
RiskScore = 50
Query = ((Process.Path like r"%\\netsh.exe" or Process.Name == "netsh.exe") and ((Process.CommandLine like r"%interface%" and Process.CommandLine like r"%portproxy%" and Process.CommandLine like r"%add%" and Process.CommandLine like r"%v4tov4%") or (Process.CommandLine like r"%i %" and Process.CommandLine like r"%p %" and Process.CommandLine like r"%a %" and Process.CommandLine like r"%v %") or (Process.CommandLine like r"%connectp%" and Process.CommandLine like r"%listena%" and Process.CommandLine like r"%c=%")))

[ActivityMonitoringRule]
# VisualUiaVerifyNative.exe is a Windows SDK that can be used for AWL bypass and is listed in Microsoft's recommended block rules.
# Author: Christopher Peacock @SecurePeacock, SCYTHE @scythe_io
RuleName = Use of VisualUiaVerifyNative.exe
EventType = Process.Start
Tag = proc-start-use-of-visualuiaverifynative.exe
RiskScore = 50
Query = (Process.Path like r"%\\VisualUiaVerifyNative.exe" or Process.Name == "VisualUiaVerifyNative.exe")

[ActivityMonitoringRule]
# Detects a Powershell process that contains download commands in its command line string
# Author: Florian Roth (Nextron Systems), oscd.community, Jonhnathan Ribeiro
RuleName = PowerShell Download Pattern
EventType = Process.Start
Tag = proc-start-powershell-download-pattern
RiskScore = 50
Query = (((Process.Path like r"%\\powershell.exe" or Process.Path like r"%\\pwsh.exe") or Process.Name in ["PowerShell.EXE", "pwsh.dll"]) and (Process.CommandLine like r"%new-object%" and Process.CommandLine like r"%net.webclient).%" and Process.CommandLine like r"%download%" and (Process.CommandLine like r"%string(%" or Process.CommandLine like r"%file(%")))

[ActivityMonitoringRule]
# Detects usage of the wevtutil utility to perform reconnaissance
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleName = Potential Recon Activity Using Wevtutil
EventType = Process.Start
Tag = proc-start-potential-recon-activity-using-wevtutil
RiskScore = 50
Query = (Process.Path like r"%\\wevtutil.exe" and (Process.CommandLine like r"% qe %" or Process.CommandLine like r"% query-events %") and (Process.CommandLine like r"%Microsoft-Windows-TerminalServices-LocalSessionManager/Operational%" or Process.CommandLine like r"%Microsoft-Windows-Terminal-Services-RemoteConnectionManager/Operational%" or Process.CommandLine like r"%Security%"))

[ActivityMonitoringRule]
# Detects usage of "query.exe" a system binary to exfil information such as "sessions" and "processes" for later use
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleName = Query Usage To Exfil Data
EventType = Process.Start
Tag = proc-start-query-usage-to-exfil-data
RiskScore = 50
Query = (Process.Path like r"%:\\Windows\\System32\\query.exe" and (Process.CommandLine like r"%session >%" or Process.CommandLine like r"%process >%"))

[ActivityMonitoringRule]
# Detects when a user performs data exfiltration by using DataSvcUtil.exe
# Author: Ialle Teixeira @teixeira0xfffff, Austin Songer @austinsonger
RuleName = LOLBAS Data Exfiltration by DataSvcUtil.exe
EventType = Process.Start
Tag = proc-start-lolbas-data-exfiltration-by-datasvcutil.exe
RiskScore = 50
Query = ((Process.CommandLine like r"%/in:%" or Process.CommandLine like r"%/out:%" or Process.CommandLine like r"%/uri:%") and (Process.Path like r"%\\DataSvcUtil.exe" or Process.Name == "DataSvcUtil.exe"))

[ActivityMonitoringRule]
# Detects use of an encoded/obfuscated version of an IP address (hex, octal...) in an URL combined with a download command
# Author: Florian Roth (Nextron Systems)
RuleName = Obfuscated IP Download
EventType = Process.Start
Tag = proc-start-obfuscated-ip-download
RiskScore = 50
Query = ((Process.CommandLine like r"%Invoke-WebRequest%" or Process.CommandLine like r"%iwr %" or Process.CommandLine like r"%wget %" or Process.CommandLine like r"%curl %" or Process.CommandLine like r"%DownloadFile%" or Process.CommandLine like r"%DownloadString%") and ((Process.CommandLine like r"%//0x%" or Process.CommandLine like r"%.0x%" or Process.CommandLine like r"%.00x%") or (Process.CommandLine like r"%http://\%%" and Process.CommandLine like r"%\%2e%")))

[ActivityMonitoringRule]
# Detects execution of LiveKD based on PE metadata or image name
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleName = Potential Memory Dumping Activity Via LiveKD
EventType = Process.Start
Tag = proc-start-potential-memory-dumping-activity-via-livekd
RiskScore = 50
Query = ((Process.Path like r"%\\livekd.exe" or Process.Path like r"%\\livekd64.exe") or Process.Name == "livekd.exe")

[ActivityMonitoringRule]
# Detects code execution via Pester.bat (Pester - Powershell Modulte for testing)
# Author: frack113, Nasreddine Bencherchali
RuleName = Execute Code with Pester.bat as Parent
EventType = Process.Start
Tag = proc-start-execute-code-with-pester.bat-as-parent
RiskScore = 50
Query = ((Parent.Path like r"%\\powershell.exe" or Parent.Path like r"%\\pwsh.exe") and Parent.CommandLine like r"%\\WindowsPowerShell\\Modules\\Pester\\%" and (Parent.CommandLine like r"%{ Invoke-Pester -EnableExit ;%" or Parent.CommandLine like r"%{ Get-Help \"%"))
GenericProperty1 = Parent.Path
GenericProperty2 = Parent.CommandLine

[ActivityMonitoringRule]
# Execute C# code located in the consoleapp folder
# Author: Beyu Denis, oscd.community
RuleName = Application Whitelisting Bypass via Dnx.exe
EventType = Process.Start
Tag = proc-start-application-whitelisting-bypass-via-dnx.exe
RiskScore = 50
Query = Process.Path like r"%\\dnx.exe"

[ActivityMonitoringRule]
# Detect malicious GPO modifications can be used to implement many other malicious behaviors.
# Author: frack113
RuleName = Modify Group Policy Settings
EventType = Process.Start
Tag = proc-start-modify-group-policy-settings
RiskScore = 50
Query = ((Process.Path like r"%\\reg.exe" or Process.Name == "reg.exe") and Process.CommandLine like r"%\\SOFTWARE\\Policies\\Microsoft\\Windows\\System%" and (Process.CommandLine like r"%GroupPolicyRefreshTimeDC%" or Process.CommandLine like r"%GroupPolicyRefreshTimeOffsetDC%" or Process.CommandLine like r"%GroupPolicyRefreshTime%" or Process.CommandLine like r"%GroupPolicyRefreshTimeOffset%" or Process.CommandLine like r"%EnableSmartScreen%" or Process.CommandLine like r"%ShellSmartScreenLevel%"))

[ActivityMonitoringRule]
# Detects usage of "PresentationHost" which is a utility that runs ".xbap" (Browser Applications) files. It can be abused to run malicious ".xbap" files any bypass AWL
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleName = Application Whitelisting Bypass via PresentationHost.exe
EventType = Process.Start
Tag = proc-start-application-whitelisting-bypass-via-presentationhost.exe
RiskScore = 50
Query = (((Process.Path like r"%\\presentationhost.exe" or Process.Name == "PresentationHost.exe") and Process.CommandLine like r"%.xbap%") and not ((Process.CommandLine like r"%C:\\Windows\\%" or Process.CommandLine like r"%C:\\Program Files%")))

[ActivityMonitoringRule]
# Adversaries can interact with the DACLs using built-in Windows commands takeown which can grant adversaries higher permissions on specific files and folders
# Author: frack113
RuleName = Suspicious Recursive Takeown
EventType = Process.Start
Tag = proc-start-suspicious-recursive-takeown
RiskScore = 50
Query = (Process.Path like r"%\\takeown.exe" and Process.CommandLine like r"%/f %" and Process.CommandLine like r"%/r%")

[ActivityMonitoringRule]
# Detects a code page switch in command line or batch scripts to a rare language
# Author: Florian Roth (Nextron Systems), Jonhnathan Ribeiro, oscd.community
RuleName = Suspicious CodePage Switch Via CHCP
EventType = Process.Start
Tag = proc-start-suspicious-codepage-switch-via-chcp
RiskScore = 50
Query = (Process.Path like r"%\\chcp.com" and (Process.CommandLine like r"% 936" or Process.CommandLine like r"% 1258"))

[ActivityMonitoringRule]
# The "Trace log generation tool for Media Foundation Tools" (Mftrace.exe) can be used to execute arbitrary binaries
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleName = Use of Mftrace.exe
EventType = Process.Start
Tag = proc-start-use-of-mftrace.exe
RiskScore = 50
Query = (((Process.Path like r"%\\mftrace.exe" or Process.Name == "mftrace.exe") and (Process.CommandLine like r"%.exe %" and Process.CommandLine like r"%.exe")) or Parent.Path like r"%\\mftrace.exe")
GenericProperty1 = Parent.Path

[ActivityMonitoringRule]
# Detects suspicious child processes of electron apps (teams, discord, slack...).
# This could be a potential sign of ".asar" file tampering (See reference section for more information)
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleName = Suspicious Electron Application Child Processes
EventType = Process.Start
Tag = proc-start-suspicious-electron-application-child-processes
RiskScore = 50
Query = (((Parent.Path like r"%\\Teams.exe" or Parent.Path like r"%\\slack.exe" or Parent.Path like r"%\\discord.exe") and (Process.Path like r"%\\cmd.exe" or Process.Path like r"%\\powershell.exe" or Process.Path like r"%\\pwsh.exe" or Process.Path like r"%\\cscript.exe" or Process.Path like r"%\\wscript.exe" or Process.Path like r"%\\mshta.exe")) and not (Parent.Path like r"%\\Discord.exe" and Process.CommandLine like r"%\\NVSMI\\nvidia-smi.exe%"))
GenericProperty1 = Parent.Path

[ActivityMonitoringRule]
# Executes SCT script using scrobj.dll from a command in entered into a specially prepared INF file.
# Author: frack113
RuleName = InfDefaultInstall.exe .inf Execution
EventType = Process.Start
Tag = proc-start-infdefaultinstall.exe-.inf-execution
RiskScore = 50
Query = (Process.CommandLine like r"%InfDefaultInstall.exe %" and Process.CommandLine like r"%.inf%")

[ActivityMonitoringRule]
# Detect VBoxDrvInst.exe run with parameters allowing processing INF file.
# This allows to create values in the registry and install drivers.
# For example one could use this technique to obtain persistence via modifying one of Run or RunOnce registry keys
# Author: Konstantin Grishchenko, oscd.community
RuleName = Suspicious VBoxDrvInst.exe Parameters
EventType = Process.Start
Tag = proc-start-suspicious-vboxdrvinst.exe-parameters
RiskScore = 50
Query = (Process.Path like r"%\\VBoxDrvInst.exe" and Process.CommandLine like r"%driver%" and Process.CommandLine like r"%executeinf%")

[ActivityMonitoringRule]
# Detects the execution of "wmic" with the "process" flag, which adversary might use to list processes running on the compromised host or list installed software hotfixes and patches.
# Author: frack113
RuleName = Process Reconnaissance Via Wmic.EXE
EventType = Process.Start
Tag = proc-start-process-reconnaissance-via-wmic.exe
RiskScore = 50
Query = (((Process.Path like r"%\\WMIC.exe" or Process.Name == "wmic.exe") and Process.CommandLine like r"%process%") and not (Process.CommandLine like r"%call%" and Process.CommandLine like r"%create%"))

[ActivityMonitoringRule]
# Ntvdm.exe allows the execution of 16-bit Windows applications on 32-bit Windows operating systems, as well as the execution of both 16-bit and 32-bit DOS applications
# Author: frack113
RuleName = Start of NT Virtual DOS Machine
EventType = Process.Start
Tag = proc-start-start-of-nt-virtual-dos-machine
RiskScore = 50
Query = (Process.Path like r"%\\ntvdm.exe" or Process.Path like r"%\\csrstub.exe")

[ActivityMonitoringRule]
# Monitors for the hiding possible malicious files in the C:\Windows\Fonts\ location. This folder doesn't require admin privillege to be written and executed from.
# Author: Sreeman
RuleName = Writing Of Malicious Files To The Fonts Folder
EventType = Process.Start
Tag = proc-start-writing-of-malicious-files-to-the-fonts-folder
RiskScore = 50
Query = ((Process.CommandLine like r"%echo%" or Process.CommandLine like r"%copy%" or Process.CommandLine like r"%type%" or Process.CommandLine like r"%file createnew%" or Process.CommandLine like r"%cacls%") and Process.CommandLine like r"%C:\\Windows\\Fonts\\%" and (Process.CommandLine like r"%.sh%" or Process.CommandLine like r"%.exe%" or Process.CommandLine like r"%.dll%" or Process.CommandLine like r"%.bin%" or Process.CommandLine like r"%.bat%" or Process.CommandLine like r"%.cmd%" or Process.CommandLine like r"%.js%" or Process.CommandLine like r"%.msh%" or Process.CommandLine like r"%.reg%" or Process.CommandLine like r"%.scr%" or Process.CommandLine like r"%.ps%" or Process.CommandLine like r"%.vb%" or Process.CommandLine like r"%.jar%" or Process.CommandLine like r"%.pl%" or Process.CommandLine like r"%.inf%" or Process.CommandLine like r"%.cpl%" or Process.CommandLine like r"%.hta%" or Process.CommandLine like r"%.msi%" or Process.CommandLine like r"%.vbs%"))

[ActivityMonitoringRule]
# Detects inline execution of PowerShell code from a file
# Author: frack113
RuleName = Powershell Inline Execution From A File
EventType = Process.Start
Tag = proc-start-powershell-inline-execution-from-a-file
RiskScore = 50
Query = ((Process.CommandLine like r"%iex %" or Process.CommandLine like r"%Invoke-Expression %" or Process.CommandLine like r"%Invoke-Command %" or Process.CommandLine like r"%icm %") and (Process.CommandLine like r"%cat %" or Process.CommandLine like r"%get-content %" or Process.CommandLine like r"%type %") and Process.CommandLine like r"% -raw%")

[ActivityMonitoringRule]
# Detects usage of wmic to start or stop a service
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleName = Service Started/Stopped Via Wmic.EXE
EventType = Process.Start
Tag = proc-start-service-started/stopped-via-wmic.exe
RiskScore = 50
Query = ((Process.Name == "wmic.exe" or Process.Path like r"%\\WMIC.exe") and (Process.CommandLine like r"% service %" and Process.CommandLine like r"% call %" and (Process.CommandLine like r"%stopservice%" or Process.CommandLine like r"%startservice%")))

[ActivityMonitoringRule]
# Detects the execution utitilies often found in Visual Studio tools that hardcode the call to the binary "link.exe". They can be abused to sideload any binary with the same name
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleName = Sideloading Link.EXE
EventType = Process.Start
Tag = proc-start-sideloading-link.exe
RiskScore = 50
Query = ((Process.Path like r"%\\link.exe" and Process.CommandLine like r"%LINK /%") and not (((Parent.Path like r"C:\\Program Files\\Microsoft Visual Studio\\%" or Parent.Path like r"C:\\Program Files (x86)\\Microsoft Visual Studio\\%") and Parent.Path like r"%\\VC\\Tools\\MSVC\\%")))
GenericProperty1 = Parent.Path

[ActivityMonitoringRule]
# Detects audio capture via PowerShell Cmdlet.
# Author: E.M. Anhaus (originally from Atomic Blue Detections, Endgame), oscd.community, Nasreddine Bencherchali (Nextron Systems)
RuleName = Audio Capture via PowerShell
EventType = Process.Start
Tag = proc-start-audio-capture-via-powershell
RiskScore = 50
Query = (Process.CommandLine like r"%WindowsAudioDevice-Powershell-Cmdlet%" or Process.CommandLine like r"%Toggle-AudioDevice%" or Process.CommandLine like r"%Get-AudioDevice %" or Process.CommandLine like r"%Set-AudioDevice %" or Process.CommandLine like r"%Write-AudioDevice %")

[ActivityMonitoringRule]
# Detects password change for the computer's domain account or host principal via "ksetup.exe"
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleName = Computer Password Change Via Ksetup.EXE
EventType = Process.Start
Tag = proc-start-computer-password-change-via-ksetup.exe
RiskScore = 50
Query = ((Process.Path like r"%\\ksetup.exe" or Process.Name == "ksetup.exe") and Process.CommandLine like r"% /setcomputerpassword %")

[ActivityMonitoringRule]
# Detects execution of ntdsutil.exe to perform different actions such as restoring snapshots...etc.
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleName = Suspicious Usage Of Active Directory Diagnostic Tool (ntdsutil.exe)
EventType = Process.Start
Tag = proc-start-suspicious-usage-of-active-directory-diagnostic-tool-(ntdsutil.exe)
RiskScore = 50
Query = ((Process.Path like r"%\\ntdsutil.exe" or Process.Name == "ntdsutil.exe") and ((Process.CommandLine like r"%snapshot%" and Process.CommandLine like r"%mount %") or (Process.CommandLine like r"%ac%" and Process.CommandLine like r"% i%" and Process.CommandLine like r"% ntds%")))

[ActivityMonitoringRule]
# Detects use of executionpolicy option to set insecure policies
# Author: frack113
RuleName = Change PowerShell Policies to an Insecure Level
EventType = Process.Start
Tag = proc-start-change-powershell-policies-to-an-insecure-level
RiskScore = 50
Query = (((Process.CommandLine like r"% -executionpolicy %" or Process.CommandLine like r"% -ep %" or Process.CommandLine like r"% -exec %") and (Process.CommandLine like r"%Unrestricted%" or Process.CommandLine like r"%bypass%" or Process.CommandLine like r"%RemoteSigned%")) and not ((Process.CommandLine like r"%C:\\Program Files%" or Process.CommandLine like r"%C:\\ProgramData%" or Process.CommandLine like r"%\\AppData\\Roaming\\Code\\%")))

[ActivityMonitoringRule]
# Detects an svchost process spawning an instance of an office application. This happens when the initial word application creates an instance of one of the Office COM objects such as 'Word.Application', 'Excel.Application', etc.
# This can be used by malicious actors to create malicious Office documents with macros on the fly. (See vba2clr project in the references)
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleName = Suspicious New Instance Of An Office COM Object
EventType = Process.Start
Tag = proc-start-suspicious-new-instance-of-an-office-com-object
RiskScore = 50
Query = (Parent.Path like r"%\\svchost.exe" and (Process.Path like r"%\\winword.exe" or Process.Path like r"%\\excel.exe" or Process.Path like r"%\\powerpnt.exe" or Process.Path like r"%\\msaccess.exe" or Process.Path like r"%\\mspub.exe" or Process.Path like r"%\\eqnedt32.exe" or Process.Path like r"%\\visio.exe"))
GenericProperty1 = Parent.Path

[ActivityMonitoringRule]
# Detects the use of Replace.exe which can be used to replace file with another file
# Author: frack113
RuleName = Replace.exe Usage
EventType = Process.Start
Tag = proc-start-replace.exe-usage
RiskScore = 50
Query = (Process.Path like r"%\\replace.exe" and (Process.CommandLine like r"%/a%" or Process.CommandLine like r"%-a%"))

[ActivityMonitoringRule]
# Detects "svchost.exe" spawning "rundll32.exe" with command arguments like C:\windows\system32\davclnt.dll,DavSetCookie.
# This could be an indicator of exfiltration or use of WebDav to launch code (hosted on WebDav Server).
# Author: Roberto Rodriguez (Cyb3rWard0g), OTR (Open Threat Research)
RuleName = WebDav Client Execution
EventType = Process.Start
Tag = proc-start-webdav-client-execution
RiskScore = 50
Query = ((Process.Path like r"%\\rundll32.exe" or Process.Name == "RUNDLL32.EXE") and Process.CommandLine like r"%C:\\windows\\system32\\davclnt.dll,DavSetCookie%")

[ActivityMonitoringRule]
# Executes arbitrary PowerShell code using SyncAppvPublishingServer.exe.
# Author: frack113
RuleName = SyncAppvPublishingServer Execute Arbitrary PowerShell Code
EventType = Process.Start
Tag = proc-start-syncappvpublishingserver-execute-arbitrary-powershell-code
RiskScore = 50
Query = ((Process.Path like r"%\\SyncAppvPublishingServer.exe" or Process.Name == "syncappvpublishingserver.exe") and Process.CommandLine like r"%\"n; %")

[ActivityMonitoringRule]
# Detect the use of "<" to read and potentially execute a file via cmd.exe
# Author: frack113, Nasreddine Bencherchali (Nextron Systems)
RuleName = Read Contents From Stdin Via Cmd.EXE
EventType = Process.Start
Tag = proc-start-read-contents-from-stdin-via-cmd.exe
RiskScore = 50
Query = ((Process.Name == "Cmd.Exe" or Process.Path like r"%\\cmd.exe") and Process.CommandLine like r"%<%")

[ActivityMonitoringRule]
# Detects the execution of whoami, which is often used by attackers after exploitation / privilege escalation
# Author: Florian Roth (Nextron Systems)
RuleName = Whoami Utility Execution
EventType = Process.Start
Tag = proc-start-whoami-utility-execution
RiskScore = 50
Query = (Process.Path like r"%\\whoami.exe" or Process.Name == "whoami.exe")

[ActivityMonitoringRule]
# Attackers can use print.exe for remote file copy
# Author: Furkan CALISKAN, @caliskanfurkan_, @oscd_initiative
RuleName = Abusing Print Executable
EventType = Process.Start
Tag = proc-start-abusing-print-executable
RiskScore = 50
Query = ((Process.Path like r"%\\print.exe" and Process.CommandLine like r"print%" and Process.CommandLine like r"%/D%" and Process.CommandLine like r"%.exe%") and not (Process.CommandLine like r"%print.exe%"))

[ActivityMonitoringRule]
# Detects the use of the PhoneDeepLink parameter to potentially sideload a DLL file that does not exist. This non-existent DLL file is named "ShellChromeAPI.dll".
# Adversaries can drop their own renamed DLL and execute it via DeviceEnroller.exe using this parameter
# Author: @gott_cyber
RuleName = Potential DLL Sideloading Via DeviceEnroller.EXE
EventType = Process.Start
Tag = proc-start-potential-dll-sideloading-via-deviceenroller.exe
RiskScore = 50
Query = ((Process.Path like r"%\\deviceenroller.exe" or Process.Name == "deviceenroller.exe") and Process.CommandLine like r"%/PhoneDeepLink%")

[ActivityMonitoringRule]
# Detects usage of the 'Get-Clipboard' cmdlet via CLI
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleName = PowerShell Get-Clipboard Cmdlet Via CLI
EventType = Process.Start
Tag = proc-start-powershell-get-clipboard-cmdlet-via-cli
RiskScore = 50
Query = Process.CommandLine like r"%Get-Clipboard%"

[ActivityMonitoringRule]
# Detects potential suspicious behaviour using secedit.exe. Such as exporting or modifying the security policy
# Author: Janantha Marasinghe
RuleName = Potential Suspicious Activity Using SeCEdit
EventType = Process.Start
Tag = proc-start-potential-suspicious-activity-using-secedit
RiskScore = 50
Query = ((Process.Path like r"%\\secedit.exe" or Process.Name == "SeCEdit") and ((Process.CommandLine like r"%/export%" and Process.CommandLine like r"%/cfg%") or (Process.CommandLine like r"%/configure%" and Process.CommandLine like r"%/db%")))

[ActivityMonitoringRule]
# BITS will allow you to schedule a command to execute after a successful download to notify you that the job is finished. When the job runs on the system the command specified in the BITS job will be executed. This can be abused by actors to create a backdoor within the system and for persistence. It will be chained in a BITS job to schedule the download of malware/additional binaries and execute the program after being downloaded
# Author: Sreeman
RuleName = Monitoring For Persistence Via BITS
EventType = Process.Start
Tag = proc-start-monitoring-for-persistence-via-bits
RiskScore = 50
Query = ((Process.CommandLine like r"%bitsadmin%" and Process.CommandLine like r"%/SetNotifyCmdLine%" and (Process.CommandLine like r"%\%COMSPEC\%%" or Process.CommandLine like r"%cmd.exe%" or Process.CommandLine like r"%regsvr32.exe%")) or (Process.CommandLine like r"%bitsadmin%" and Process.CommandLine like r"%/Addfile%" and (Process.CommandLine like r"%http:%" or Process.CommandLine like r"%https:%" or Process.CommandLine like r"%ftp:%" or Process.CommandLine like r"%ftps:%")))

[ActivityMonitoringRule]
# Detects usage of "PresentationHost" which is a utility that runs ".xbap" (Browser Applications) files to download arbitrary files
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleName = Download Arbitrary Files Via PresentationHost.exe
EventType = Process.Start
Tag = proc-start-download-arbitrary-files-via-presentationhost.exe
RiskScore = 50
Query = ((Process.Path like r"%\\presentationhost.exe" or Process.Name == "PresentationHost.exe") and (Process.CommandLine like r"%http://%" or Process.CommandLine like r"%https://%" or Process.CommandLine like r"%ftp://%"))

[ActivityMonitoringRule]
# Extexport.exe loads dll and is execute from other folder the original path
# Author: frack113
RuleName = Suspicious Extexport Execution
EventType = Process.Start
Tag = proc-start-suspicious-extexport-execution
RiskScore = 50
Query = (Process.CommandLine like r"%Extexport.exe%" or Process.Path like r"%\\Extexport.exe" or Process.Name == "extexport.exe")

[ActivityMonitoringRule]
# Detect the use of "sc.exe" to change the startup type of a service to "disabled" or "demand"
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleName = Service StartupType Change Via Sc.EXE
EventType = Process.Start
Tag = proc-start-service-startuptype-change-via-sc.exe
RiskScore = 50
Query = ((Process.Path like r"%\\sc.exe" or Process.Name == "sc.exe") and (Process.CommandLine like r"% config %" and Process.CommandLine like r"%start%" and (Process.CommandLine like r"%disabled%" or Process.CommandLine like r"%demand%")))

[ActivityMonitoringRule]
# Detects a command line process that uses explorer.exe to launch arbitrary commands or binaries,
# which is similar to cmd.exe /c, only it breaks the process tree and makes its parent a new instance of explorer spawning from "svchost"
# Author: Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems), @gott_cyber
RuleName = Explorer Process Tree Break
EventType = Process.Start
Tag = proc-start-explorer-process-tree-break
RiskScore = 50
Query = (Process.CommandLine like r"%/factory,{75dff2b7-6936-4c06-a8bb-676a7b00b24b}%" or (Process.CommandLine like r"%explorer.exe%" and Process.CommandLine like r"% /root,%"))

[ActivityMonitoringRule]
# Detects the usage of the "sftp.exe" binary as a LOLBIN by abusing the "-D" flag
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleName = Use Of The SFTP.EXE Binary As A LOLBIN
EventType = Process.Start
Tag = proc-start-use-of-the-sftp.exe-binary-as-a-lolbin
RiskScore = 50
Query = (Process.Path like r"%\\sftp.exe" and (Process.CommandLine like r"% -D ..%" or Process.CommandLine like r"% -D C:\\%"))

[ActivityMonitoringRule]
# Detects the use the .NET InstallUtil.exe application in order to download arbitrary files. The files will be written to %LOCALAPPDATA%\Microsoft\Windows\INetCache\IE\
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleName = Suspicious Execution of InstallUtil To Download
EventType = Process.Start
Tag = proc-start-suspicious-execution-of-installutil-to-download
RiskScore = 50
Query = ((Process.Path like r"%\\InstallUtil.exe" or Process.Name == "InstallUtil.exe") and (Process.CommandLine like r"%http://%" or Process.CommandLine like r"%https://%" or Process.CommandLine like r"%ftp://%"))

[ActivityMonitoringRule]
# Detect usage of the "unregmp2.exe" binary as a proxy to launch a custom version of "wmpnscfg.exe"
# Author: frack113
RuleName = Lolbin Unregmp2.exe Use As Proxy
EventType = Process.Start
Tag = proc-start-lolbin-unregmp2.exe-use-as-proxy
RiskScore = 50
Query = ((Process.Path like r"%\\unregmp2.exe" or Process.Name == "unregmp2.exe") and Process.CommandLine like r"% /HideWMP%")

[ActivityMonitoringRule]
# Detects usage of cmdkey to add generic credentials. As an example, this has to be used before connecting to an RDP session via command line interface.
# Author: frack113, Nasreddine Bencherchali (Nextron Systems)
RuleName = New Generic Credentials Added Via Cmdkey.EXE
EventType = Process.Start
Tag = proc-start-new-generic-credentials-added-via-cmdkey.exe
RiskScore = 50
Query = ((Process.Path like r"%\\cmdkey.exe" or Process.Name == "cmdkey.exe") and (Process.CommandLine like r"% /g%" and Process.CommandLine like r"% /u%" and Process.CommandLine like r"% /p%"))

[ActivityMonitoringRule]
# Detects the Installation of a Exchange Transport Agent
# Author: Tobias Michalski (Nextron Systems)
RuleName = MSExchange Transport Agent Installation
EventType = Process.Start
Tag = proc-start-msexchange-transport-agent-installation
RiskScore = 50
Query = Process.CommandLine like r"%Install-TransportAgent%"

[ActivityMonitoringRule]
# Detects WMI script event consumers
# Author: Thomas Patzke
RuleName = WMI Persistence - Script Event Consumer
EventType = Process.Start
Tag = proc-start-wmi-persistence-script-event-consumer
RiskScore = 50
Query = (Process.Path like r"C:\\WINDOWS\\system32\\wbem\\scrcons.exe" and Parent.Path like r"C:\\Windows\\System32\\svchost.exe")
GenericProperty1 = Parent.Path

[ActivityMonitoringRule]
# Detect the harvesting of wifi credentials using netsh.exe
# Author: Andreas Hunkeler (@Karneades), oscd.community
RuleName = Harvesting Of Wifi Credentials Via Netsh.EXE
EventType = Process.Start
Tag = proc-start-harvesting-of-wifi-credentials-via-netsh.exe
RiskScore = 50
Query = ((Process.Path like r"%\\netsh.exe" or Process.Name == "netsh.exe") and (Process.CommandLine like r"%wlan%" and Process.CommandLine like r"% s%" and Process.CommandLine like r"% p%" and Process.CommandLine like r"% k%" and Process.CommandLine like r"%=clear%"))

[ActivityMonitoringRule]
# Detects the execution of netsh with the "trace" flag in order to start a network capture
# Author: Kutepov Anton, oscd.community
RuleName = New Network Trace Capture Started Via Netsh.EXE
EventType = Process.Start
Tag = proc-start-new-network-trace-capture-started-via-netsh.exe
RiskScore = 50
Query = ((Process.Path like r"%\\netsh.exe" or Process.Name == "netsh.exe") and (Process.CommandLine like r"%trace%" and Process.CommandLine like r"%start%"))

[ActivityMonitoringRule]
# Detects when GfxDownloadWrapper.exe downloads file from non standard URL
# Author: Victor Sergeev, oscd.community
RuleName = GfxDownloadWrapper.exe Downloads File from Suspicious URL
EventType = Process.Start
Tag = proc-start-gfxdownloadwrapper.exe-downloads-file-from-suspicious-url
RiskScore = 50
Query = (Process.Path like r"%\\GfxDownloadWrapper.exe" and not (Process.CommandLine like r"%gameplayapi.intel.com%" and (Parent.Path like r"%\\GfxDownloadWrapper.exe" or Parent.Path like r"%\\igfxEM.exe")))
GenericProperty1 = Parent.Path

[ActivityMonitoringRule]
# Detects password change for the logged-on user's via "ksetup.exe"
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleName = Logged-On User Password Change Via Ksetup.EXE
EventType = Process.Start
Tag = proc-start-logged-on-user-password-change-via-ksetup.exe
RiskScore = 50
Query = ((Process.Path like r"%\\ksetup.exe" or Process.Name == "ksetup.exe") and Process.CommandLine like r"% /ChangePassword %")

[ActivityMonitoringRule]
# Detects usage of the PsLogList utility to dump event log in order to extract admin accounts and perform account discovery or delete events logs
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleName = Suspicious Use of PsLogList
EventType = Process.Start
Tag = proc-start-suspicious-use-of-psloglist
RiskScore = 50
Query = ((Process.Name == "psloglist.exe" or (Process.Path like r"%\\psloglist.exe" or Process.Path like r"%\\psloglist64.exe")) and (Process.CommandLine like r"% security%" or Process.CommandLine like r"% application%" or Process.CommandLine like r"% system%") and (Process.CommandLine like r"% -d%" or Process.CommandLine like r"% /d%" or Process.CommandLine like r"% -x%" or Process.CommandLine like r"% /x%" or Process.CommandLine like r"% -s%" or Process.CommandLine like r"% /s%" or Process.CommandLine like r"% -c%" or Process.CommandLine like r"% /c%" or Process.CommandLine like r"% -g%" or Process.CommandLine like r"% /g%"))

[ActivityMonitoringRule]
# Detects usage of the Get-ADUser cmdlet to collect user information and output it to a file
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleName = User Discovery And Export Via Get-ADUser Cmdlet
EventType = Process.Start
Tag = proc-start-user-discovery-and-export-via-get-aduser-cmdlet
RiskScore = 50
Query = (((Process.Path like r"%\\powershell.exe" or Process.Path like r"%\\pwsh.exe") or Process.Name in ["PowerShell.EXE", "pwsh.dll"]) and (Process.CommandLine like r"%Get-ADUser %" and Process.CommandLine like r"% -Filter \*" and (Process.CommandLine like r"% > %" or Process.CommandLine like r"% | Select %" or Process.CommandLine like r"%Out-File%" or Process.CommandLine like r"%Set-Content%" or Process.CommandLine like r"%Add-Content%")))

[ActivityMonitoringRule]
# Detects attempts to disable the Windows Firewall using PowerShell
# Author: Tim Rauch
RuleName = Windows Firewall Disabled via PowerShell
EventType = Process.Start
Tag = proc-start-windows-firewall-disabled-via-powershell
RiskScore = 50
Query = (((Process.Path like r"%\\powershell.exe" or Process.Path like r"%\\pwsh.exe" or Process.Path like r"%\\powershell\_ise.exe") or Process.Name in ["PowerShell.EXE", "pwsh.dll"]) and (Process.CommandLine like r"%Set-NetFirewallProfile %" and Process.CommandLine like r"% -Enabled %" and Process.CommandLine like r"% False%") and (Process.CommandLine like r"% -All %" or Process.CommandLine like r"%Public%" or Process.CommandLine like r"%Domain%" or Process.CommandLine like r"%Private%"))

[ActivityMonitoringRule]
# Detects inline windows shell commands redirecting output via the ">" symbol to a suspicious location
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleName = Suspicious CMD Shell Output Redirect
EventType = Process.Start
Tag = proc-start-suspicious-cmd-shell-output-redirect
RiskScore = 50
Query = ((Process.Path like r"%\\cmd.exe" or Process.Name == "Cmd.Exe") and ((Process.CommandLine like r"%> \\Users\\Public\\%" or Process.CommandLine like r"%> \%APPDATA\%\\%" or Process.CommandLine like r"%> \%TEMP\%\\%" or Process.CommandLine like r"%> \%TMP\%\\%" or Process.CommandLine like r"%> \%USERPROFILE\%\\%" or Process.CommandLine like r"%> C:\\Temp\\%" or Process.CommandLine like r"%> C:\\Users\\Public\\%" or Process.CommandLine like r"%> C:\\Windows\\Temp\\%" or Process.CommandLine like r"%>\\Users\\Public\\%" or Process.CommandLine like r"%>\%APPDATA\%\\%" or Process.CommandLine like r"%>\%TEMP\%\\%" or Process.CommandLine like r"%>\%TMP\%\\%" or Process.CommandLine like r"%>\%USERPROFILE\%\\%" or Process.CommandLine like r"%>C:\\Temp\\%" or Process.CommandLine like r"%>C:\\Users\\Public\\%" or Process.CommandLine like r"%>C:\\Windows\\Temp\\%") or ((Process.CommandLine like r"% >%" or Process.CommandLine like r"%\">%" or Process.CommandLine like r"%'>%") and Process.CommandLine like r"%C:\\Users\\%" and Process.CommandLine like r"%\\AppData\\Local\\%")))

[ActivityMonitoringRule]
# Detects usage of winget to install applications via manifest file. Adversaries can abuse winget to download payloads remotely and execute them.
# The manifest option enables you to install an application by passing in a YAML file directly to the client.
# Winget can be used to download and install exe, msi or msix files later.
# Author: Sreeman, Florian Roth (Nextron Systems), frack113
RuleName = Install New Package Via Winget Local Manifest
EventType = Process.Start
Tag = proc-start-install-new-package-via-winget-local-manifest
RiskScore = 50
Query = ((Process.Path like r"%\\winget.exe" or Process.Name == "winget.exe") and (Process.CommandLine like r"%install%" or Process.CommandLine like r"% add %") and (Process.CommandLine like r"%-m %" or Process.CommandLine like r"%--manifest%"))

[ActivityMonitoringRule]
# Execute C# code with the Build Provider and proper folder structure in place.
# Author: frack113
RuleName = Suspicious aspnet_compiler.exe Execution
EventType = Process.Start
Tag = proc-start-suspicious-aspnet_compiler.exe-execution
RiskScore = 50
Query = (Process.Path like r"%C:\\Windows\\Microsoft.NET\\Framework%" and Process.Path like r"%aspnet\_compiler.exe%")

[ActivityMonitoringRule]
# Detects the use of Setres.exe to set the screen resolution and then potentially launch a file named "choice" (with any executable extension such as ".cmd" or ".exe") from the current execution path
# Author: @gott_cyber
RuleName = Use of Setres.exe
EventType = Process.Start
Tag = proc-start-use-of-setres.exe
RiskScore = 50
Query = (Parent.Path like r"%\\setres.exe" and Process.Path like r"%\\choice")
GenericProperty1 = Parent.Path

[ActivityMonitoringRule]
# Detects attempts of decoding encoded Gzip archives via PowerShell.
# Author: Hieu Tran
RuleName = Gzip Archive Decode Via PowerShell
EventType = Process.Start
Tag = proc-start-gzip-archive-decode-via-powershell
RiskScore = 50
Query = (Process.CommandLine like r"%GZipStream%" and Process.CommandLine like r"%::Decompress%")

[ActivityMonitoringRule]
# Detects new process creation using WMIC via the "process call create" flag
# Author: Michael Haag, Florian Roth (Nextron Systems), juju4, oscd.community
RuleName = New Process Created Via Wmic.EXE
EventType = Process.Start
Tag = proc-start-new-process-created-via-wmic.exe
RiskScore = 50
Query = ((Process.Path like r"%\\wmic.exe" or Process.Name == "wmic.exe") and (Process.CommandLine like r"%process%" and Process.CommandLine like r"%call%" and Process.CommandLine like r"%create%"))

[ActivityMonitoringRule]
# Csi.exe is a signed binary from Microsoft that comes with Visual Studio and provides C# interactive capabilities. It can be used to run C# code from a file passed as a parameter in command line. Early version of this utility provided with Microsoft “Roslyn” Community Technology Preview was named 'rcsi.exe'
# Author: Konstantin Grishchenko, oscd.community
RuleName = Suspicious Csi.exe Usage
EventType = Process.Start
Tag = proc-start-suspicious-csi.exe-usage
RiskScore = 50
Query = (((Process.Path like r"%\\csi.exe" or Process.Path like r"%\\rcsi.exe") or Process.Name in ["csi.exe", "rcsi.exe"]) and Process.Company == "Microsoft Corporation")
GenericProperty1 = Process.Company

[ActivityMonitoringRule]
# Use of the commandline to shutdown or reboot windows
# Author: frack113
RuleName = Suspicious Execution of Shutdown
EventType = Process.Start
Tag = proc-start-suspicious-execution-of-shutdown
RiskScore = 50
Query = (Process.Path like r"%\\shutdown.exe" and (Process.CommandLine like r"%/r %" or Process.CommandLine like r"%/s %"))

[ActivityMonitoringRule]
# Detects execution of php using the "-r" flag. This is could be used as a way to launch a reverse shell or execute live php code.
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleName = Php Inline Command Execution
EventType = Process.Start
Tag = proc-start-php-inline-command-execution
RiskScore = 50
Query = ((Process.Path like r"%\\php.exe" or Process.Name == "php.exe") and Process.CommandLine like r"% -r%")

[ActivityMonitoringRule]
# Detects execution from an Alternate Data Stream (ADS). Adversaries may use NTFS file attributes to hide their malicious data in order to evade detection
# Author: frack113
RuleName = Execute From Alternate Data Streams
EventType = Process.Start
Tag = proc-start-execute-from-alternate-data-streams
RiskScore = 50
Query = (Process.CommandLine like r"%txt:%" and ((Process.CommandLine like r"%type %" and Process.CommandLine like r"% > %") or (Process.CommandLine like r"%makecab %" and Process.CommandLine like r"%.cab%") or (Process.CommandLine like r"%reg %" and Process.CommandLine like r"% export %") or (Process.CommandLine like r"%regedit %" and Process.CommandLine like r"% /E %") or (Process.CommandLine like r"%esentutl %" and Process.CommandLine like r"% /y %" and Process.CommandLine like r"% /d %" and Process.CommandLine like r"% /o %")))

[ActivityMonitoringRule]
# Detects Access to Domain Group Policies stored in SYSVOL
# Author: Markus Neis, Jonhnathan Ribeiro, oscd.community
RuleName = Suspicious SYSVOL Domain Group Policy Access
EventType = Process.Start
Tag = proc-start-suspicious-sysvol-domain-group-policy-access
RiskScore = 50
Query = (Process.CommandLine like r"%\\SYSVOL\\%" and Process.CommandLine like r"%\\policies\\%")

[ActivityMonitoringRule]
# The psr.exe captures desktop screenshots and saves them on the local machine
# Author: Beyu Denis, oscd.community
RuleName = Psr.exe Capture Screenshots
EventType = Process.Start
Tag = proc-start-psr.exe-capture-screenshots
RiskScore = 50
Query = (Process.Path like r"%\\Psr.exe" and Process.CommandLine like r"%/start%")

[ActivityMonitoringRule]
# Detects execution of the built-in script located in "C:\Windows\System32\gatherNetworkInfo.vbs". Which can be used to gather information about the target machine
# Author: blueteamer8699
RuleName = Potential Reconnaissance Activity Via GatherNetworkInfo.VBS
EventType = Process.Start
Tag = proc-start-potential-reconnaissance-activity-via-gathernetworkinfo.vbs
RiskScore = 50
Query = (((Process.Path like r"%\\cscript.exe" or Process.Path like r"%\\wscript.exe") or Process.Name in ["cscript.exe", "wscript.exe"]) and Process.CommandLine like r"%gatherNetworkInfo.vbs%")

[ActivityMonitoringRule]
# Detects execution of ruby using the "-e" flag. This is could be used as a way to launch a reverse shell or execute live ruby code.
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleName = Ruby Inline Command Execution
EventType = Process.Start
Tag = proc-start-ruby-inline-command-execution
RiskScore = 50
Query = ((Process.Path like r"%\\ruby.exe" or Process.Name == "ruby.exe") and Process.CommandLine like r"% -e%")

[ActivityMonitoringRule]
# Conti recommendation to its affiliates to use esentutl to access NTDS dumped file. Trickbot also uses this utilities to get MSEdge info via its module pwgrab.
# Author: sam0x90
RuleName = Esentutl Gather Credentials
EventType = Process.Start
Tag = proc-start-esentutl-gather-credentials
RiskScore = 50
Query = (Process.CommandLine like r"%esentutl%" and Process.CommandLine like r"% /p%")

[ActivityMonitoringRule]
# Detects when a user installs certificates by using CertOC.exe to loads the target DLL file.
# Author: Austin Songer @austinsonger
RuleName = DLL Loaded via CertOC.EXE
EventType = Process.Start
Tag = proc-start-dll-loaded-via-certoc.exe
RiskScore = 50
Query = ((Process.Path like r"%\\certoc.exe" or Process.Name == "CertOC.exe") and (Process.CommandLine like r"% -LoadDLL %" or Process.CommandLine like r"% /LoadDLL %"))

[ActivityMonitoringRule]
# lolbas Cmdl32 is use to download a payload to evade antivirus
# Author: frack113
RuleName = Suspicious Cmdl32 Execution
EventType = Process.Start
Tag = proc-start-suspicious-cmdl32-execution
RiskScore = 50
Query = ((Process.Path like r"%\\cmdl32.exe" or Process.Name == "CMDL32.EXE") and (Process.CommandLine like r"%/vpn %" and Process.CommandLine like r"%/lan %"))

[ActivityMonitoringRule]
# Detects the import of '.reg' files from suspicious paths using the 'reg.exe' utility
# Author: frack113, Nasreddine Bencherchali
RuleName = Potential Suspicious Registry File Imported Via Reg.EXE
EventType = Process.Start
Tag = proc-start-potential-suspicious-registry-file-imported-via-reg.exe
RiskScore = 50
Query = ((Process.Path like r"%\\reg.exe" or Process.Name == "reg.exe") and Process.CommandLine like r"% import %" and (Process.CommandLine like r"%C:\\Users\\%" or Process.CommandLine like r"%\%temp\%%" or Process.CommandLine like r"%\%tmp\%%" or Process.CommandLine like r"%\%appdata\%%" or Process.CommandLine like r"%\\AppData\\Local\\Temp\\%" or Process.CommandLine like r"%C:\\Windows\\Temp\\%" or Process.CommandLine like r"%C:\\ProgramData\\%"))

[ActivityMonitoringRule]
# Detects a suspicious child process of userinit
# Author: Florian Roth (Nextron Systems), Samir Bousseaden (idea)
RuleName = Suspicious Userinit Child Process
EventType = Process.Start
Tag = proc-start-suspicious-userinit-child-process
RiskScore = 50
Query = (Parent.Path like r"%\\userinit.exe" and not ((Process.CommandLine like r"%\\netlogon\\%") or (Process.Path like r"%\\explorer.exe" or Process.Name == "explorer.exe")))
GenericProperty1 = Parent.Path

[ActivityMonitoringRule]
# Adversaries may search for private key certificate files on compromised systems for insecurely stored credential
# Author: frack113, Nasreddine Bencherchali (Nextron Systems)
RuleName = Private Keys Reconnaissance Via CommandLine Tools
EventType = Process.Start
Tag = proc-start-private-keys-reconnaissance-via-commandline-tools
RiskScore = 50
Query = ((Process.CommandLine like r"%.key%" or Process.CommandLine like r"%.pgp%" or Process.CommandLine like r"%.gpg%" or Process.CommandLine like r"%.ppk%" or Process.CommandLine like r"%.p12%" or Process.CommandLine like r"%.pem%" or Process.CommandLine like r"%.pfx%" or Process.CommandLine like r"%.cer%" or Process.CommandLine like r"%.p7b%" or Process.CommandLine like r"%.asc%") and (((Process.Path like r"%\\cmd.exe" or Process.Name == "Cmd.Exe") and Process.CommandLine like r"%dir %") or (((Process.Path like r"%\\powershell.exe" or Process.Path like r"%\\pwsh.exe") or Process.Name in ["PowerShell.EXE", "pwsh.dll"]) and Process.CommandLine like r"%Get-ChildItem %") or Process.Path like r"%\\findstr.exe" or Process.Name == "FINDSTR.EXE"))

[ActivityMonitoringRule]
# Upload file, credentials or data exfiltration with Binary part of Windows Defender
# Author: frack113
RuleName = Suspicious ConfigSecurityPolicy Execution
EventType = Process.Start
Tag = proc-start-suspicious-configsecuritypolicy-execution
RiskScore = 50
Query = ((Process.CommandLine like r"%ConfigSecurityPolicy.exe%" or Process.Path like r"%\\ConfigSecurityPolicy.exe" or Process.Name == "ConfigSecurityPolicy.exe") and (Process.CommandLine like r"%https://%" or Process.CommandLine like r"%http://%" or Process.CommandLine like r"%ftp://%"))

[ActivityMonitoringRule]
# Detect use of the Windows 8.3 short name. Which could be used as a method to avoid command-line detection
# Author: frack113, Nasreddine Bencherchali (Nextron Systems)
RuleName = Use NTFS Short Name in Command Line
EventType = Process.Start
Tag = proc-start-use-ntfs-short-name-in-command-line
RiskScore = 50
Query = ((Process.CommandLine like r"%~1.exe%" or Process.CommandLine like r"%~1.bat%" or Process.CommandLine like r"%~1.msi%" or Process.CommandLine like r"%~1.vbe%" or Process.CommandLine like r"%~1.vbs%" or Process.CommandLine like r"%~1.dll%" or Process.CommandLine like r"%~1.ps1%" or Process.CommandLine like r"%~1.js%" or Process.CommandLine like r"%~1.hta%" or Process.CommandLine like r"%~2.exe%" or Process.CommandLine like r"%~2.bat%" or Process.CommandLine like r"%~2.msi%" or Process.CommandLine like r"%~2.vbe%" or Process.CommandLine like r"%~2.vbs%" or Process.CommandLine like r"%~2.dll%" or Process.CommandLine like r"%~2.ps1%" or Process.CommandLine like r"%~2.js%" or Process.CommandLine like r"%~2.hta%") and not ((Parent.Path like r"%\\WebEx\\WebexHost.exe" or Parent.Path like r"%\\thor\\thor64.exe") or Process.CommandLine like r"%C:\\xampp\\vcredist\\VCREDI~1.EXE%"))
GenericProperty1 = Parent.Path

[ActivityMonitoringRule]
# Detects when an admin share is mounted using net.exe
# Author: oscd.community, Teymur Kheirkhabarov @HeirhabarovT, Zach Stanford @svch0st, wagga
RuleName = Windows Admin Share Mount Via Net.EXE
EventType = Process.Start
Tag = proc-start-windows-admin-share-mount-via-net.exe
RiskScore = 50
Query = (((Process.Path like r"%\\net.exe" or Process.Path like r"%\\net1.exe") or Process.Name in ["net.exe", "net1.exe"]) and (Process.CommandLine like r"% use %" and Process.CommandLine like r"% \\%\\%$%"))

[ActivityMonitoringRule]
# Detects the execution of WMIC in order to get a list of firewall and antivirus products
# Author: Nasreddine Bencherchali
RuleName = Potential Product Reconnaissance Via Wmic.EXE
EventType = Process.Start
Tag = proc-start-potential-product-reconnaissance-via-wmic.exe
RiskScore = 50
Query = ((Process.Path like r"%\\wmic.exe" or Process.Name == "wmic.exe") and Process.CommandLine like r"%Product%")

[ActivityMonitoringRule]
# setupapi.dll library provide InstallHinfSection function for processing INF files. INF file may contain instructions allowing to create values in the registry, modify files and install drivers. This technique could be used to obtain persistence via modifying one of Run or RunOnce registry keys, run process or use other DLLs chain calls (see references) InstallHinfSection function in setupapi.dll calls runonce.exe executable regardless of actual content of INF file.
# Author: Konstantin Grishchenko, oscd.community
RuleName = Suspicious Rundll32 Setupapi.dll Activity
EventType = Process.Start
Tag = proc-start-suspicious-rundll32-setupapi.dll-activity
RiskScore = 50
Query = (Process.Path like r"%\\runonce.exe" and Parent.Path like r"%\\rundll32.exe" and Parent.CommandLine like r"%setupapi.dll%" and Parent.CommandLine like r"%InstallHinfSection%")
GenericProperty1 = Parent.Path
GenericProperty2 = Parent.CommandLine

[ActivityMonitoringRule]
# Detects a certain command line flag combination used by "devinit.exe", which can be abused as a LOLBIN to download arbitrary MSI packages on a Windows system
# Author: Florian Roth (Nextron Systems)
RuleName = Arbitrary MSI Download Via Devinit.EXE
EventType = Process.Start
Tag = proc-start-arbitrary-msi-download-via-devinit.exe
RiskScore = 50
Query = (Process.CommandLine like r"% -t msi-install %" and Process.CommandLine like r"% -i http%")

[ActivityMonitoringRule]
# Detects netsh commands that turns off the Windows firewall
# Author: Fatih Sirin
RuleName = Firewall Disabled via Netsh.EXE
EventType = Process.Start
Tag = proc-start-firewall-disabled-via-netsh.exe
RiskScore = 50
Query = ((Process.Path like r"%\\netsh.exe" or Process.Name == "netsh.exe") and ((Process.CommandLine like r"%firewall%" and Process.CommandLine like r"%set%" and Process.CommandLine like r"%opmode%" and Process.CommandLine like r"%disable%") or (Process.CommandLine like r"%advfirewall%" and Process.CommandLine like r"%set%" and Process.CommandLine like r"%state%" and Process.CommandLine like r"%off%")))

[ActivityMonitoringRule]
# Detects execution of the "cloudflared" tool to connect back to a tunnel. This was seen used by threat actors to maintain persistence and remote access to compromised networks.
# Author: Janantha Marasinghe, Nasreddine Bencherchali (Nextron Systems)
RuleName = Cloudflared Tunnel Execution
EventType = Process.Start
Tag = proc-start-cloudflared-tunnel-execution
RiskScore = 50
Query = (Process.CommandLine like r"% tunnel %" and Process.CommandLine like r"% run %" and (Process.CommandLine like r"% --config %" or Process.CommandLine like r"% --credentials-contents %" or Process.CommandLine like r"% --credentials-file %" or Process.CommandLine like r"% --token %"))

[ActivityMonitoringRule]
# Detects the addition of a new rule to the Windows firewall via netsh
# Author: Markus Neis, Sander Wiebing
RuleName = New Firewall Rule Added Via Netsh.EXE
EventType = Process.Start
Tag = proc-start-new-firewall-rule-added-via-netsh.exe
RiskScore = 50
Query = (((Process.Path like r"%\\netsh.exe" or Process.Name == "netsh.exe") and (Process.CommandLine like r"% firewall %" and Process.CommandLine like r"% add %")) and not (((Process.CommandLine like r"%\\netsh.exe advfirewall firewall add rule name=Dropbox dir=in action=allow \"program=C:\\Program Files (x86)\\Dropbox\\Client\\Dropbox.exe\" enable=yes profile=Any%" or Process.CommandLine like r"%\\netsh.exe advfirewall firewall add rule name=Dropbox dir=in action=allow \"program=C:\\Program Files\\Dropbox\\Client\\Dropbox.exe\" enable=yes profile=Any%")) or (Parent.Path like r"C:\\Windows\\Temp\\asgard2-agent\\%" and Parent.Path like r"%\\thor64.exe" and Process.CommandLine like r"%advfirewall firewall show rule name=all%")))
GenericProperty1 = Parent.Path

[ActivityMonitoringRule]
# Detect use of X509Enrollment
# Author: frack113
RuleName = Suspicious X509Enrollment - Process Creation
EventType = Process.Start
Tag = proc-start-suspicious-x509enrollment-process-creation
RiskScore = 50
Query = (Process.CommandLine like r"%X509Enrollment.CBinaryConverter%" or Process.CommandLine like r"%884e2002-217d-11da-b2a4-000e7bbb2b09%")

[ActivityMonitoringRule]
# Detects usage of bitsadmin downloading a file
# Author: Michael Haag, FPT.EagleEye
RuleName = File Download Via Bitsadmin
EventType = Process.Start
Tag = proc-start-file-download-via-bitsadmin
RiskScore = 50
Query = ((Process.Path like r"%\\bitsadmin.exe" or Process.Name == "bitsadmin.exe") and (Process.CommandLine like r"% /transfer %" or ((Process.CommandLine like r"% /create %" or Process.CommandLine like r"% /addfile %") and Process.CommandLine like r"%http%")))

[ActivityMonitoringRule]
# Detects a suspicious call to the user32.dll function that locks the user workstation
# Author: frack113
RuleName = Suspicious Workstation Locking via Rundll32
EventType = Process.Start
Tag = proc-start-suspicious-workstation-locking-via-rundll32
RiskScore = 50
Query = ((Process.Path like r"%\\rundll32.exe" or Process.Name == "RUNDLL32.EXE") and Parent.Path like r"%\\cmd.exe" and Process.CommandLine like r"%user32.dll,%" and Process.CommandLine like r"%LockWorkStation%")
GenericProperty1 = Parent.Path

[ActivityMonitoringRule]
# Detects the executiob of TTDInject.exe, which is used by Windows 10 v1809 and newer to debug time travel (underlying call of tttracer.exe)
# Author: frack113
RuleName = Use of TTDInject.exe
EventType = Process.Start
Tag = proc-start-use-of-ttdinject.exe
RiskScore = 50
Query = (Process.Path like r"%ttdinject.exe" or Process.Name == "TTDInject.EXE")

[ActivityMonitoringRule]
# Detects the usage of the "Squirrel.exe" binary as a LOLBIN. This binary is part of multiple software installations (Slack, Teams, Discord, etc.)
# Author: Nasreddine Bencherchali (Nextron Systems), Karneades / Markus Neis, Jonhnathan Ribeiro, oscd.community
RuleName = Use of Squirrel.exe
EventType = Process.Start
Tag = proc-start-use-of-squirrel.exe
RiskScore = 50
Query = (((Process.Path like r"%\\squirrel.exe" or Process.Path like r"%\\update.exe") and (((Process.CommandLine like r"% --download %" or Process.CommandLine like r"% --update %" or Process.CommandLine like r"% --updateRollback=%") and Process.CommandLine like r"%http%") or (Process.CommandLine like r"%--processStart%" or Process.CommandLine like r"%--processStartAndWait%" or Process.CommandLine like r"%--createShortcut%"))) and not ((Process.CommandLine like r"%C:\\Users\\%" and Process.CommandLine like r"%\\AppData\\Local\\Discord\\Update.exe%" and Process.CommandLine like r"% --processStart%" and Process.CommandLine like r"%Discord.exe%") or (Process.CommandLine like r"%C:\\Users\\%" and Process.CommandLine like r"%\\AppData\\Local\\GitHubDesktop\\Update.exe%" and Process.CommandLine like r"%GitHubDesktop.exe%" and (Process.CommandLine like r"%--createShortcut%" or Process.CommandLine like r"%--processStartAndWait%")) or (Process.CommandLine like r"%C:\\Users\\%" and Process.CommandLine like r"%\\AppData\\Local\\Microsoft\\Teams\\Update.exe%" and Process.CommandLine like r"%Teams.exe%" and (Process.CommandLine like r"%--processStart%" or Process.CommandLine like r"%--createShortcut%")) or (Process.CommandLine like r"%C:\\Users\\%" and Process.CommandLine like r"%\\AppData\\Local\\yammerdesktop\\Update.exe%" and Process.CommandLine like r"%Yammer.exe%" and (Process.CommandLine like r"%--processStart%" or Process.CommandLine like r"%--createShortcut%"))))

[ActivityMonitoringRule]
# Detects execution of the AgentExecutor.exe binary. Which can be abused as a LOLBIN to execute powershell scripts with the ExecutionPolicy "Bypass" or any binary named "powershell.exe" located in the path provided by 6th positional argument
# Author: Nasreddine Bencherchali (Nextron Systems), memory-shards
RuleName = AgentExecutor PowerShell Execution
EventType = Process.Start
Tag = proc-start-agentexecutor-powershell-execution
RiskScore = 50
Query = ((Process.Path like r"\\AgentExecutor.exe" or Process.Name == "AgentExecutor.exe") and (Process.CommandLine like r"% -powershell%" or Process.CommandLine like r"% -remediationScript%"))

[ActivityMonitoringRule]
# Detects a suspicious program execution in a web service root folder (filter out false positives)
# Author: Florian Roth (Nextron Systems)
RuleName = Execution in Webserver Root Folder
EventType = Process.Start
Tag = proc-start-execution-in-webserver-root-folder
RiskScore = 50
Query = ((Process.Path like r"%\\wwwroot\\%" or Process.Path like r"%\\wmpub\\%" or Process.Path like r"%\\htdocs\\%") and not ((Process.Path like r"%bin\\%" or Process.Path like r"%\\Tools\\%" or Process.Path like r"%\\SMSComponent\\%") and Parent.Path like r"%\\services.exe"))
GenericProperty1 = Parent.Path

[ActivityMonitoringRule]
# Shadow Copies creation using operating systems utilities, possible credential access
# Author: Teymur Kheirkhabarov, Daniil Yugoslavskiy, oscd.community
RuleName = Shadow Copies Creation Using Operating Systems Utilities
EventType = Process.Start
Tag = proc-start-shadow-copies-creation-using-operating-systems-utilities
RiskScore = 50
Query = (((Process.Path like r"%\\powershell.exe" or Process.Path like r"%\\pwsh.exe" or Process.Path like r"%\\wmic.exe" or Process.Path like r"%\\vssadmin.exe") or Process.Name in ["PowerShell.EXE", "pwsh.dll", "wmic.exe", "VSSADMIN.EXE"]) and (Process.CommandLine like r"%shadow%" and Process.CommandLine like r"%create%"))

[ActivityMonitoringRule]
# Detects dropping of dll files in system32 that may be used to retrieve user credentials from LSASS
# Author: Sreeman
RuleName = Dropping Of Password Filter DLL
EventType = Process.Start
Tag = proc-start-dropping-of-password-filter-dll
RiskScore = 50
Query = (Process.CommandLine like r"%HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa%" and Process.CommandLine like r"%scecli\\0%" and Process.CommandLine like r"%reg add%")

[ActivityMonitoringRule]
# Detects the use of a Microsoft signed script to execute commands
# Author: oscd.community, Natalia Shornikova, frack113
RuleName = CL_Mutexverifiers.ps1 Proxy Execution
EventType = Process.Start
Tag = proc-start-cl_mutexverifiers.ps1-proxy-execution
RiskScore = 50
Query = (Process.CommandLine like r"%\\CL\_Mutexverifiers.ps1%" and Process.CommandLine like r"%runAfterCancelProcess %")

[ActivityMonitoringRule]
# Detects the execution of other scripts using the Node executable packaged with Adobe Creative Cloud
# Author: Max Altgelt (Nextron Systems)
RuleName = Node Process Executions
EventType = Process.Start
Tag = proc-start-node-process-executions
RiskScore = 50
Query = (Process.Path like r"%\\Adobe Creative Cloud Experience\\libs\\node.exe" and not (Process.CommandLine like r"%Adobe Creative Cloud Experience\\js%"))

[ActivityMonitoringRule]
# Detects when a possible suspicious driver is being installed via pnputil.exe lolbin
# Author: Hai Vaknin @LuxNoBulIshit, Avihay eldad  @aloneliassaf, Austin Songer @austinsonger
RuleName = Suspicious Driver Install by pnputil.exe
EventType = Process.Start
Tag = proc-start-suspicious-driver-install-by-pnputil.exe
RiskScore = 50
Query = ((Process.CommandLine like r"%-i%" or Process.CommandLine like r"%/install%" or Process.CommandLine like r"%-a%" or Process.CommandLine like r"%/add-driver%" or Process.CommandLine like r"%.inf%") and Process.Path like r"%\\pnputil.exe")

[ActivityMonitoringRule]
# Detects creation of a new service (kernel driver) with the type "kernel"
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleName = New Kernel Driver Via SC.EXE
EventType = Process.Start
Tag = proc-start-new-kernel-driver-via-sc.exe
RiskScore = 50
Query = (Process.Path like r"%\\sc.exe" and (Process.CommandLine like r"%create%" or Process.CommandLine like r"%config%") and Process.CommandLine like r"%binPath%" and Process.CommandLine like r"%type%" and Process.CommandLine like r"%kernel%")

[ActivityMonitoringRule]
# Detects possible password spraying attempts using Dsacls
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleName = Potential Password Spraying Attempt Using Dsacls.EXE
EventType = Process.Start
Tag = proc-start-potential-password-spraying-attempt-using-dsacls.exe
RiskScore = 50
Query = ((Process.Path like r"%\\dsacls.exe" or Process.Name == "DSACLS.EXE") and (Process.CommandLine like r"%/user:%" and Process.CommandLine like r"%/passwd:%"))

[ActivityMonitoringRule]
# Detects suspicious reconnaissance command line activity on Windows systems using Net.EXE
# Author: Florian Roth (Nextron Systems), omkar72, @svch0st, Nasreddine Bencherchali (Nextron Systems)
RuleName = Suspicious Group And Account Reconnaissance Activity Using Net.EXE
EventType = Process.Start
Tag = proc-start-suspicious-group-and-account-reconnaissance-activity-using-net.exe
RiskScore = 50
Query = (((Process.Path like r"%\\net.exe" or Process.Path like r"%\\net1.exe") or Process.Name in ["net.exe", "net1.exe"]) and ((((Process.CommandLine like r"% group %" or Process.CommandLine like r"% localgroup %") and (Process.CommandLine like r"%domain admins%" or Process.CommandLine like r"% administrator%" or Process.CommandLine like r"% administrateur%" or Process.CommandLine like r"%enterprise admins%" or Process.CommandLine like r"%Exchange Trusted Subsystem%" or Process.CommandLine like r"%Remote Desktop Users%" or Process.CommandLine like r"%Utilisateurs du Bureau à distance%" or Process.CommandLine like r"%Usuarios de escritorio remoto%" or Process.CommandLine like r"% /do%")) and not (Process.CommandLine like r"% /add%")) or (Process.CommandLine like r"% accounts %" and Process.CommandLine like r"% /do%")))

[ActivityMonitoringRule]
# Execute VBscript code that is referenced within the *.bgi file.
# Author: Beyu Denis, oscd.community
RuleName = Application Whitelisting Bypass via Bginfo
EventType = Process.Start
Tag = proc-start-application-whitelisting-bypass-via-bginfo
RiskScore = 50
Query = (Process.Path like r"%\\bginfo.exe" and Process.CommandLine like r"%/popup%" and Process.CommandLine like r"%/nolicprompt%")

[ActivityMonitoringRule]
# Detects attempts of decoding a base64 Gzip archive via PowerShell. This technique is often used as a method to load malicious content into memory afterward.
# Author: frack113
RuleName = Suspicious FromBase64String Usage On Gzip Archive - Process Creation
EventType = Process.Start
Tag = proc-start-suspicious-frombase64string-usage-on-gzip-archive-process-creation
RiskScore = 50
Query = (Process.CommandLine like r"%FromBase64String%" and Process.CommandLine like r"%MemoryStream%" and Process.CommandLine like r"%H4sI%")

[ActivityMonitoringRule]
# Detects attempts to bypass User Account Control (UAC) by hijacking the Microsoft Management Console (MMC) Windows Firewall snap-in
# Author: Tim Rauch
RuleName = UAC Bypass via Windows Firewall Snap-In Hijack
EventType = Process.Start
Tag = proc-start-uac-bypass-via-windows-firewall-snap-in-hijack
RiskScore = 50
Query = ((Parent.Path like r"%\\mmc.exe" and Parent.CommandLine like r"%WF.msc%") and not (Process.Path like r"%\\WerFault.exe"))
GenericProperty1 = Parent.Path
GenericProperty2 = Parent.CommandLine

[ActivityMonitoringRule]
# Detects uncommon or suspicious child processes spawning from a WSL process. This could indicate an attempt to evade parent/child relationship detections or persistence attempts via cron using WSL
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleName = WSL Child Process Anomaly
EventType = Process.Start
Tag = proc-start-wsl-child-process-anomaly
RiskScore = 50
Query = ((Parent.Path like r"%\\wsl.exe" or Parent.Path like r"%\\wslhost.exe") and ((Process.Path like r"%\\powershell.exe" or Process.Path like r"%\\pwsh.exe" or Process.Path like r"%\\cmd.exe" or Process.Path like r"%\\calc.exe") or (Process.Path like r"%\\AppData\\Local\\Temp\\%" or Process.Path like r"%C:\\Users\\Public\\%" or Process.Path like r"%C:\\Windows\\Temp\\%" or Process.Path like r"%C:\\Temp\\%" or Process.Path like r"%\\Downloads\\%" or Process.Path like r"%\\Desktop\\%")))
GenericProperty1 = Parent.Path

[ActivityMonitoringRule]
# Detects process dump via legitimate sqldumper.exe binary
# Author: Kirill Kiryanov, oscd.community
RuleName = Dumping Process via Sqldumper.exe
EventType = Process.Start
Tag = proc-start-dumping-process-via-sqldumper.exe
RiskScore = 50
Query = (Process.Path like r"%\\sqldumper.exe" and (Process.CommandLine like r"%0x0110%" or Process.CommandLine like r"%0x01100:40%"))

[ActivityMonitoringRule]
# Detects usage of the "msedge.exe" binary as a LOLBIN to download arbitrary file via the CLI
# Author: Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)
RuleName = Potential Arbitrary File Download Via MSEdge.EXE
EventType = Process.Start
Tag = proc-start-potential-arbitrary-file-download-via-msedge.exe
RiskScore = 50
Query = ((Process.Path like r"%\\msedge.exe" or Process.Name == "msedge.exe") and (Process.CommandLine like r"%.exe http%" or Process.CommandLine like r"%msedge http%"))

[ActivityMonitoringRule]
# Once established within a system or network, an adversary may use automated techniques for collecting internal data.
# Author: frack113
RuleName = Automated Collection Command Prompt
EventType = Process.Start
Tag = proc-start-automated-collection-command-prompt
RiskScore = 50
Query = ((Process.CommandLine like r"%.doc%" or Process.CommandLine like r"%.docx%" or Process.CommandLine like r"%.xls%" or Process.CommandLine like r"%.xlsx%" or Process.CommandLine like r"%.ppt%" or Process.CommandLine like r"%.pptx%" or Process.CommandLine like r"%.rtf%" or Process.CommandLine like r"%.pdf%" or Process.CommandLine like r"%.txt%") and ((Process.CommandLine like r"%dir %" and Process.CommandLine like r"% /b %" and Process.CommandLine like r"% /s %") or (Process.Name == "FINDSTR.EXE" and (Process.CommandLine like r"% /e %" or Process.CommandLine like r"% /si %"))))

[ActivityMonitoringRule]
# Detects using register-cimprovider.exe to execute arbitrary dll file.
# Author: Ivan Dyachkov, Yulia Fomina, oscd.community
RuleName = DLL Execution Via Register-cimprovider.exe
EventType = Process.Start
Tag = proc-start-dll-execution-via-register-cimprovider.exe
RiskScore = 50
Query = (Process.Path like r"%\\register-cimprovider.exe" and Process.CommandLine like r"%-path%" and Process.CommandLine like r"%dll%")

[ActivityMonitoringRule]
# Detects use of Wlrmdr.exe in which the -u parameter is passed to ShellExecute
# Author: frack113, manasmbellani
RuleName = Wlrmdr Lolbin Use as Launcher
EventType = Process.Start
Tag = proc-start-wlrmdr-lolbin-use-as-launcher
RiskScore = 50
Query = (Parent.Path like r"%\\wlrmdr.exe" or (((Process.Path like r"%\\wlrmdr.exe" or Process.Name == "WLRMNDR.EXE") and (Process.CommandLine like r"%-s %" and Process.CommandLine like r"%-f %" and Process.CommandLine like r"%-t %" and Process.CommandLine like r"%-m %" and Process.CommandLine like r"%-a %" and Process.CommandLine like r"%-u %")) and not ((Parent.Path like r"C:\\Windows\\System32\\winlogon.exe") or (Parent.Path == "-"))))
GenericProperty1 = Parent.Path

[ActivityMonitoringRule]
# Detects child processes of Microsoft.NodejsTools.PressAnyKey.exe that can be used to execute any other binary
# Author: Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)
RuleName = Visual Studio NodejsTools PressAnyKey Arbitrary Binary Execution
EventType = Process.Start
Tag = proc-start-visual-studio-nodejstools-pressanykey-arbitrary-binary-execution
RiskScore = 50
Query = Parent.Path like r"%\\Microsoft.NodejsTools.PressAnyKey.exe"
GenericProperty1 = Parent.Path

[ActivityMonitoringRule]
# Detects usage of special strings/null bits in order to potentially bypass AMSI functionalities
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleName = Potential AMSI Bypass Using NULL Bits
EventType = Process.Start
Tag = proc-start-potential-amsi-bypass-using-null-bits
RiskScore = 50
Query = (Process.CommandLine like r"%if(0){{{0}}}' -f $(0 -as [char]) +%" or Process.CommandLine like r"%#<NULL>%")

[ActivityMonitoringRule]
# Detects PowerShell downgrade attack by comparing the host versions with the actually used engine version 2.0
# Author: Harish Segar (rule)
RuleName = Potential PowerShell Downgrade Attack
EventType = Process.Start
Tag = proc-start-potential-powershell-downgrade-attack
RiskScore = 50
Query = (Process.Path like r"%\\powershell.exe" and (Process.CommandLine like r"% -version 2 %" or Process.CommandLine like r"% -versio 2 %" or Process.CommandLine like r"% -versi 2 %" or Process.CommandLine like r"% -vers 2 %" or Process.CommandLine like r"% -ver 2 %" or Process.CommandLine like r"% -ve 2 %" or Process.CommandLine like r"% -v 2 %"))

[ActivityMonitoringRule]
# One way Qbot steals sensitive information is by extracting browser data from Internet Explorer and Microsoft Edge by using the built-in utility esentutl.exe
# Author: frack113
RuleName = Esentutl Steals Browser Information
EventType = Process.Start
Tag = proc-start-esentutl-steals-browser-information
RiskScore = 50
Query = ((Process.Path like r"%\\esentutl.exe" or Process.Name == "esentutl.exe") and (Process.CommandLine like r"%/r%" or Process.CommandLine like r"%-r%") and Process.CommandLine like r"%\\Windows\\WebCache%")

[ActivityMonitoringRule]
# Detects execution of attacker-controlled WsmPty.xsl or WsmTxt.xsl via winrm.vbs and copied cscript.exe (can be renamed)
# Author: Julia Fomina, oscd.community
RuleName = AWL Bypass with Winrm.vbs and Malicious WsmPty.xsl/WsmTxt.xsl
EventType = Process.Start
Tag = proc-start-awl-bypass-with-winrm.vbs-and-malicious-wsmpty.xsl/wsmtxt.xsl
RiskScore = 50
Query = (Process.CommandLine like r"%winrm%" and (Process.CommandLine like r"%format:pretty%" or Process.CommandLine like r"%format:\"pretty\"%" or Process.CommandLine like r"%format:\"text\"%" or Process.CommandLine like r"%format:text%") and not ((Process.Path like r"C:\\Windows\\System32\\%" or Process.Path like r"C:\\Windows\\SysWOW64\\%")))

[ActivityMonitoringRule]
# Detect use of Ilasm.exe to compile c# code into dll or exe.
# Author: frack113
RuleName = Ilasm Lolbin Use Compile C-Sharp
EventType = Process.Start
Tag = proc-start-ilasm-lolbin-use-compile-c-sharp
RiskScore = 50
Query = (Process.Path like r"%\\ilasm.exe" or Process.Name == "ilasm.exe")

[ActivityMonitoringRule]
# Detects potential commandline obfuscation using known escape characters
# Author: juju4
RuleName = Potential Commandline Obfuscation Using Escape Characters
EventType = Process.Start
Tag = proc-start-potential-commandline-obfuscation-using-escape-characters
RiskScore = 50
Query = (Process.CommandLine like r"%h^t^t^p%" or Process.CommandLine like r"%h\"t\"t\"p%")

[ActivityMonitoringRule]
# Adversaries may disable security tools to avoid possible detection of their tools and activities by removing Windows Defender Definition Files
# Author: frack113
RuleName = Windows Defender Definition Files Removed
EventType = Process.Start
Tag = proc-start-windows-defender-definition-files-removed
RiskScore = 50
Query = ((Process.Path like r"%\\MpCmdRun.exe" or Process.Name == "MpCmdRun.exe") and (Process.CommandLine like r"% -RemoveDefinitions%" and Process.CommandLine like r"% -All%"))

[ActivityMonitoringRule]
# Detects usage of the "ConvertTo-SecureString" cmdlet via the commandline. Which is fairly uncommon and could indicate potential suspicious activity
# Author: Teymur Kheirkhabarov (idea), Vasiliy Burov (rule), oscd.community, Tim Shelton
RuleName = ConvertTo-SecureString Cmdlet Usage Via CommandLine
EventType = Process.Start
Tag = proc-start-convertto-securestring-cmdlet-usage-via-commandline
RiskScore = 50
Query = (((Process.Path like r"%\\powershell.exe" or Process.Path like r"%\\pwsh.exe") or Process.Name in ["PowerShell.EXE", "pwsh.dll"]) and Process.CommandLine like r"%ConvertTo-SecureString%")

[ActivityMonitoringRule]
# The .SettingContent-ms file type was introduced in Windows 10 and allows a user to create "shortcuts" to various Windows 10 setting pages. These files are simply XML and contain paths to various Windows 10 settings binaries.
# Author: Sreeman
RuleName = Arbitrary Shell Command Execution Via Settingcontent-Ms
EventType = Process.Start
Tag = proc-start-arbitrary-shell-command-execution-via-settingcontent-ms
RiskScore = 50
Query = (Process.CommandLine like r"%.SettingContent-ms%" and not (Process.CommandLine like r"%immersivecontrolpanel%"))

[ActivityMonitoringRule]
# Detects suspicious reconnaissance command line activity on Windows systems using the PowerShell Get-LocalGroupMember Cmdlet
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleName = Suspicious Reconnaissance Activity Using Get-LocalGroupMember Cmdlet
EventType = Process.Start
Tag = proc-start-suspicious-reconnaissance-activity-using-get-localgroupmember-cmdlet
RiskScore = 50
Query = (Process.CommandLine like r"%Get-LocalGroupMember %" and (Process.CommandLine like r"%domain admins%" or Process.CommandLine like r"% administrator%" or Process.CommandLine like r"% administrateur%" or Process.CommandLine like r"%enterprise admins%" or Process.CommandLine like r"%Exchange Trusted Subsystem%" or Process.CommandLine like r"%Remote Desktop Users%" or Process.CommandLine like r"%Utilisateurs du Bureau à distance%" or Process.CommandLine like r"%Usuarios de escritorio remoto%"))

[ActivityMonitoringRule]
# A General detection for sdclt spawning new processes. This could be an indicator of sdclt being used for bypass UAC techniques.
# Author: Roberto Rodriguez (Cyb3rWard0g), OTR (Open Threat Research)
RuleName = Sdclt Child Processes
EventType = Process.Start
Tag = proc-start-sdclt-child-processes
RiskScore = 50
Query = Parent.Path like r"%\\sdclt.exe"
GenericProperty1 = Parent.Path

[ActivityMonitoringRule]
# Adversaries may abuse msiexec.exe to proxy execution of malicious payloads.
# Msiexec.exe is the command-line utility for the Windows Installer and is thus commonly associated with executing installation packages (.msi)
# Author: frack113
RuleName = Suspicious Msiexec Execute Arbitrary DLL
EventType = Process.Start
Tag = proc-start-suspicious-msiexec-execute-arbitrary-dll
RiskScore = 50
Query = ((Process.Path like r"%\\msiexec.exe" and (Process.CommandLine like r"% /y%" or Process.CommandLine like r"% -y%")) and not (((Process.CommandLine like r"%\\MsiExec.exe\" /Y \"C:\\Program Files\\Bonjour\\mdnsNSP.dll%" or Process.CommandLine like r"%\\MsiExec.exe\" /Y \"C:\\Program Files (x86)\\Bonjour\\mdnsNSP.dll%" or Process.CommandLine like r"%\\MsiExec.exe\" /Y \"C:\\Program Files (x86)\\Apple Software Update\\ScriptingObjectModel.dll%" or Process.CommandLine like r"%\\MsiExec.exe\" /Y \"C:\\Program Files (x86)\\Apple Software Update\\SoftwareUpdateAdmin.dll%" or Process.CommandLine like r"%\\MsiExec.exe\" /Y \"C:\\Windows\\CCM\\%" or Process.CommandLine like r"%\\MsiExec.exe\" /Y C:\\Windows\\CCM\\%" or Process.CommandLine like r"%\\MsiExec.exe\" -Y \"C:\\Program Files\\Bonjour\\mdnsNSP.dll%" or Process.CommandLine like r"%\\MsiExec.exe\" -Y \"C:\\Program Files (x86)\\Bonjour\\mdnsNSP.dll%" or Process.CommandLine like r"%\\MsiExec.exe\" -Y \"C:\\Program Files (x86)\\Apple Software Update\\ScriptingObjectModel.dll%" or Process.CommandLine like r"%\\MsiExec.exe\" -Y \"C:\\Program Files (x86)\\Apple Software Update\\SoftwareUpdateAdmin.dll%" or Process.CommandLine like r"%\\MsiExec.exe\" -Y \"C:\\Windows\\CCM\\%" or Process.CommandLine like r"%\\MsiExec.exe\" -Y C:\\Windows\\CCM\\%"))))

[ActivityMonitoringRule]
# Adversaries may use Valid Accounts to log into a computer using the Remote Desktop Protocol (RDP). The adversary may then perform actions as the logged-on user.
# Author: frack113
RuleName = HackTool - WinRM Access Via Evil-WinRM
EventType = Process.Start
Tag = proc-start-hacktool-winrm-access-via-evil-winrm
RiskScore = 50
Query = (Process.Path like r"%\\ruby.exe" and Process.CommandLine like r"%-i %" and Process.CommandLine like r"%-u %" and Process.CommandLine like r"%-p %")

[ActivityMonitoringRule]
# Adversaries may attempt to enumerate software for a variety of reasons, such as figuring out what security measures are present or if the compromised system has a version of software that is vulnerable.
# Author: Nikita Nazarov, oscd.community
RuleName = Detected Windows Software Discovery
EventType = Process.Start
Tag = proc-start-detected-windows-software-discovery
RiskScore = 50
Query = (Process.Path like r"%\\reg.exe" and Process.CommandLine like r"%query%" and Process.CommandLine like r"%\\software\\%" and Process.CommandLine like r"%/v%" and Process.CommandLine like r"%svcversion%")

[ActivityMonitoringRule]
# Remote.exe is part of WinDbg in the Windows SDK and can be used for AWL bypass and running remote files.
# Author: Christopher Peacock @SecurePeacock, SCYTHE @scythe_io
RuleName = Use of Remote.exe
EventType = Process.Start
Tag = proc-start-use-of-remote.exe
RiskScore = 50
Query = (Process.Path like r"%\\remote.exe" or Process.Name == "remote.exe")

[ActivityMonitoringRule]
# Detects the execution of the LOLBIN gpscript, which executes logon or startup scripts configured in Group Policy
# Author: frack113
RuleName = Gpscript Execution
EventType = Process.Start
Tag = proc-start-gpscript-execution
RiskScore = 50
Query = ((Process.Path like r"%\\gpscript.exe" or Process.Name == "GPSCRIPT.EXE") and (Process.CommandLine like r"% /logon%" or Process.CommandLine like r"% /startup%"))

[ActivityMonitoringRule]
# Detects usage of winget to add new additional download sources
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleName = Add New Download Source To Winget
EventType = Process.Start
Tag = proc-start-add-new-download-source-to-winget
RiskScore = 50
Query = ((Process.Path like r"%\\winget.exe" or Process.Name == "winget.exe") and (Process.CommandLine like r"%source %" and Process.CommandLine like r"%add %"))

[ActivityMonitoringRule]
# Identifies the creation of local users via the net.exe command.
# Author: Endgame, JHasenbusch (adapted to Sigma for oscd.community)
RuleName = New User Created Via Net.EXE
EventType = Process.Start
Tag = proc-start-new-user-created-via-net.exe
RiskScore = 50
Query = (((Process.Path like r"%\\net.exe" or Process.Path like r"%\\net1.exe") or Process.Name in ["net.exe", "net1.exe"]) and (Process.CommandLine like r"%user%" and Process.CommandLine like r"%add%"))

[ActivityMonitoringRule]
# Detects usage of OpenConsole binary as a LOLBIN to launch other binaries to bypass application Whitelisting
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleName = Use of OpenConsole
EventType = Process.Start
Tag = proc-start-use-of-openconsole
RiskScore = 50
Query = ((Process.Name == "OpenConsole.exe" or Process.Path like r"%\\OpenConsole.exe") and not (Process.Path like r"C:\\Program Files\\WindowsApps\\Microsoft.WindowsTerminal%"))

[ActivityMonitoringRule]
# Detects potential arbitrary file download using a Microsoft Office application
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleName = Potential Arbitrary File Download Using Office Application
EventType = Process.Start
Tag = proc-start-potential-arbitrary-file-download-using-office-application
RiskScore = 50
Query = (((Process.Path like r"%\\EXCEL.EXE" or Process.Path like r"%\\POWERPNT.EXE" or Process.Path like r"%\\WINWORD.exe") or Process.Name in ["Excel.exe", "POWERPNT.EXE", "WinWord.exe"]) and (Process.CommandLine like r"%http://%" or Process.CommandLine like r"%https://%"))

[ActivityMonitoringRule]
# Detects usage of "MSPUB" (Microsoft Publisher) to download arbitrary files
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleName = Arbitrary File Download Via MSPUB.EXE
EventType = Process.Start
Tag = proc-start-arbitrary-file-download-via-mspub.exe
RiskScore = 50
Query = ((Process.Path like r"%\\MSPUB.exe" or Process.Name == "MSPUB.exe") and (Process.CommandLine like r"%http://%" or Process.CommandLine like r"%https://%" or Process.CommandLine like r"%ftp://%"))

[ActivityMonitoringRule]
# Detects Wscript/Cscript executing a file with an uncommon (i.e. non-script) extension
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleName = Cscript/Wscript Uncommon Script Extension Execution
EventType = Process.Start
Tag = proc-start-cscript/wscript-uncommon-script-extension-execution
RiskScore = 50
Query = ((Process.Name in ["wscript.exe", "cscript.exe"] or (Process.Path like r"%\\wscript.exe" or Process.Path like r"%\\cscript.exe")) and (Process.CommandLine like r"%.csv%" or Process.CommandLine like r"%.dat%" or Process.CommandLine like r"%.doc%" or Process.CommandLine like r"%.gif%" or Process.CommandLine like r"%.jpeg%" or Process.CommandLine like r"%.jpg%" or Process.CommandLine like r"%.png%" or Process.CommandLine like r"%.ppt%" or Process.CommandLine like r"%.txt%" or Process.CommandLine like r"%.xls%" or Process.CommandLine like r"%.xml%"))

[ActivityMonitoringRule]
# Detects suspicious scheduled task creations from a parent stored in a temporary folder
# Author: Florian Roth (Nextron Systems)
RuleName = Suspicious Add Scheduled Task Parent
EventType = Process.Start
Tag = proc-start-suspicious-add-scheduled-task-parent
RiskScore = 50
Query = ((Process.Path like r"%\\schtasks.exe" and Process.CommandLine like r"%/Create %" and (Parent.Path like r"%\\AppData\\Local\\%" or Parent.Path like r"%\\AppData\\Roaming\\%" or Parent.Path like r"%\\Temporary Internet%" or Parent.Path like r"%\\Users\\Public\\%")) and not (((Process.CommandLine like r"%update\_task.xml%" or Process.CommandLine like r"%unattended.ini%"))))
GenericProperty1 = Parent.Path

[ActivityMonitoringRule]
# Detects renamed execution of "Microsoft.NodejsTools.PressAnyKey.exe", which can be abused as a LOLBIN to execute arbitrary binaries
# Author: Nasreddine Bencherchali (Nextron Systems), Florian Roth (Nextron Systems)
RuleName = Visual Studio NodejsTools PressAnyKey Renamed Execution
EventType = Process.Start
Tag = proc-start-visual-studio-nodejstools-pressanykey-renamed-execution
RiskScore = 50
Query = (Process.Name == "Microsoft.NodejsTools.PressAnyKey.exe" and not ((Process.Path like r"%\\Microsoft.NodejsTools.PressAnyKey.exe")))

[ActivityMonitoringRule]
# Detects the execution of "csvde.exe" in order to export organizational Active Directory structure.
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleName = Active Directory Structure Export Via Csvde.EXE
EventType = Process.Start
Tag = proc-start-active-directory-structure-export-via-csvde.exe
RiskScore = 50
Query = (((Process.Path like r"%\\csvde.exe" or Process.Name == "csvde.exe") and Process.CommandLine like r"% -f%") and not ((Process.CommandLine like r"% -i%")))

[ActivityMonitoringRule]
# List credentials currently stored in Windows Credential Manager via the native Windows utility vaultcmd.exe
# Author: frack113
RuleName = Windows Credential Manager Access via VaultCmd
EventType = Process.Start
Tag = proc-start-windows-credential-manager-access-via-vaultcmd
RiskScore = 50
Query = ((Process.Path like r"%\\VaultCmd.exe" or Process.Name == "VAULTCMD.EXE") and Process.CommandLine like r"%/listcreds:%")

[ActivityMonitoringRule]
# Detects user accept agreement execution in psexec commandline
# Author: omkar72
RuleName = Psexec Execution
EventType = Process.Start
Tag = proc-start-psexec-execution
RiskScore = 50
Query = (Process.Path like r"%\\psexec.exe" or Process.Name == "psexec.c")

[ActivityMonitoringRule]
# Detects invocation of Microsoft Workflow Compiler, which may permit the execution of arbitrary unsigned code.
# Author: Nik Seetharaman, frack113
RuleName = Microsoft Workflow Compiler Execution
EventType = Process.Start
Tag = proc-start-microsoft-workflow-compiler-execution
RiskScore = 50
Query = (Process.Path like r"%\\Microsoft.Workflow.Compiler.exe" or Process.Name == "Microsoft.Workflow.Compiler.exe")

[ActivityMonitoringRule]
# Detects execution of the "del" builtin command to remove files using greedy/wildcard expression. This is often used by malware to delete content of folders that perhaps contains the initial malware infection or to delete evidence.
# Author: frack113
RuleName = Greedy File Deletion Using Del
EventType = Process.Start
Tag = proc-start-greedy-file-deletion-using-del
RiskScore = 50
Query = ((Process.Path like r"%\\cmd.exe" or Process.Name == "Cmd.Exe") and (Process.CommandLine like r"%del %" or Process.CommandLine like r"%erase %") and (Process.CommandLine like r"%\\\*.dll%" or Process.CommandLine like r"%\\\*.exe%"))

[ActivityMonitoringRule]
# Uses the .NET InstallUtil.exe application in order to execute image without log
# Author: frack113
RuleName = Suspicious Execution of InstallUtil Without Log
EventType = Process.Start
Tag = proc-start-suspicious-execution-of-installutil-without-log
RiskScore = 50
Query = (Process.Path like r"%\\InstallUtil.exe" and Process.Path like r"%Microsoft.NET\\Framework%" and Process.CommandLine like r"%/logfile= %" and Process.CommandLine like r"%/LogToConsole=false%")

[ActivityMonitoringRule]
# Detects usage of the "Add-WindowsCapability" cmdlet to add Windows capabilities. Notable capabilities could be "OpenSSH" and others.
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleName = Add Windows Capability Via PowerShell Cmdlet
EventType = Process.Start
Tag = proc-start-add-windows-capability-via-powershell-cmdlet
RiskScore = 50
Query = (((Process.Path like r"%\\powershell.exe" or Process.Path like r"%\\pwsh.exe") or Process.Name in ["PowerShell.EXE", "pwsh.dll"]) and Process.CommandLine like r"%Add-WindowsCapability%" and Process.CommandLine like r"%OpenSSH.%")

[ActivityMonitoringRule]
# Detects potential SquiblyTwo attack technique with possible renamed WMIC via Imphash and OriginalFileName fields
# Author: Markus Neis, Florian Roth
RuleName = Potential SquiblyTwo Technique Execution
EventType = Process.Start
Tag = proc-start-potential-squiblytwo-technique-execution
RiskScore = 50
Query = ((Process.Path like r"%\\wmic.exe" or Process.Name == "wmic.exe" or Process.Hash.IMP in ["1B1A3F43BF37B5BFE60751F2EE2F326E", "37777A96245A3C74EB217308F3546F4C", "9D87C9D67CE724033C0B40CC4CA1B206"] or (Process.Hashes like r"%IMPHASH=1B1A3F43BF37B5BFE60751F2EE2F326E%" or Process.Hashes like r"%IMPHASH=37777A96245A3C74EB217308F3546F4C%" or Process.Hashes like r"%IMPHASH=9D87C9D67CE724033C0B40CC4CA1B206%")) and (Process.CommandLine like r"%format:%" and Process.CommandLine like r"%http%"))
GenericProperty1 = Process.Hash.IMP
GenericProperty2 = Process.Hashes

[ActivityMonitoringRule]
# Tools to Capture Network Packets on the windows 10 with October 2018 Update or later.
# Author: frack113
RuleName = Use of PktMon.exe
EventType = Process.Start
Tag = proc-start-use-of-pktmon.exe
RiskScore = 50
Query = (Process.Path like r"%\\pktmon.exe" or Process.Name == "PktMon.exe")

[ActivityMonitoringRule]
# Detects suspicious children spawned via the Windows Terminal application which could be a sign of persistence via WindowsTerminal (see references section)
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleName = Suspicious WindowsTerminal Child Processes
EventType = Process.Start
Tag = proc-start-suspicious-windowsterminal-child-processes
RiskScore = 50
Query = (((Parent.Path like r"%\\WindowsTerminal.exe" or Parent.Path like r"%\\wt.exe") and ((Process.Path like r"%\\rundll32.exe" or Process.Path like r"%\\regsvr32.exe" or Process.Path like r"%\\certutil.exe" or Process.Path like r"%\\cscript.exe" or Process.Path like r"%\\wscript.exe" or Process.Path like r"%\\csc.exe") or (Process.Path like r"%C:\\Users\\Public\\%" or Process.Path like r"%\\Downloads\\%" or Process.Path like r"%\\Desktop\\%" or Process.Path like r"%\\AppData\\Local\\Temp\\%" or Process.Path like r"%\\Windows\\TEMP\\%") or (Process.CommandLine like r"% iex %" or Process.CommandLine like r"% icm%" or Process.CommandLine like r"%Invoke-%" or Process.CommandLine like r"%Import-Module %" or Process.CommandLine like r"%ipmo %" or Process.CommandLine like r"%DownloadString(%" or Process.CommandLine like r"% /c %" or Process.CommandLine like r"% /k %" or Process.CommandLine like r"% /r %"))) and not ((Process.CommandLine like r"%Import-Module%" and Process.CommandLine like r"%Microsoft.VisualStudio.DevShell.dll%" and Process.CommandLine like r"%Enter-VsDevShell%") or (Process.CommandLine like r"%\\AppData\\Local\\Packages\\Microsoft.WindowsTerminal\_%" and Process.CommandLine like r"%\\LocalState\\settings.json%") or (Process.CommandLine like r"%C:\\Program Files\\Microsoft Visual Studio\\%" and Process.CommandLine like r"%\\Common7\\Tools\\VsDevCmd.bat%")))
GenericProperty1 = Parent.Path

[ActivityMonitoringRule]
# Detects the use of NirCmd tool for command execution, which could be the result of legitimate administrative activity
# Author: Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)
RuleName = PUA - NirCmd Execution
EventType = Process.Start
Tag = proc-start-pua-nircmd-execution
RiskScore = 50
Query = ((Process.Path like r"%\\NirCmd.exe" or Process.Name == "NirCmd.exe" or (Process.CommandLine like r"% execmd %" or Process.CommandLine like r"%.exe script %" or Process.CommandLine like r"%.exe shexec %" or Process.CommandLine like r"% runinteractive %")) or ((Process.CommandLine like r"% exec %" or Process.CommandLine like r"% exec2 %") and (Process.CommandLine like r"% show %" or Process.CommandLine like r"% hide %")))

[ActivityMonitoringRule]
# Detects the execution of the LOLBIN jsc.exe used by .NET to compile javascript code to .exe or .dll format
# Author: frack113
RuleName = JSC Convert Javascript To Executable
EventType = Process.Start
Tag = proc-start-jsc-convert-javascript-to-executable
RiskScore = 50
Query = (Process.Path like r"%\\jsc.exe" and Process.CommandLine like r"%.js%")

[ActivityMonitoringRule]
# Detect use of icacls to deny access for everyone in Users folder sometimes used to hide malicious files
# Author: frack113
RuleName = Use Icacls to Hide File to Everyone
EventType = Process.Start
Tag = proc-start-use-icacls-to-hide-file-to-everyone
RiskScore = 50
Query = ((Process.Name == "iCACLS.EXE" or Process.Path like r"%\\icacls.exe") and (Process.CommandLine like r"%C:\\Users\\%" and Process.CommandLine like r"%/deny%" and Process.CommandLine like r"%S-1-1-0:%"))

[ActivityMonitoringRule]
# Detects suspicious command line flags that let the user set a target user and command as e.g. seen in PsExec-like tools
# Author: Florian Roth (Nextron Systems)
RuleName = Suspicious RunAs-Like Flag Combination
EventType = Process.Start
Tag = proc-start-suspicious-runas-like-flag-combination
RiskScore = 50
Query = ((Process.CommandLine like r"% -u system %" or Process.CommandLine like r"% --user system %" or Process.CommandLine like r"% -u NT%" or Process.CommandLine like r"% -u \"NT%" or Process.CommandLine like r"% -u 'NT%" or Process.CommandLine like r"% --system %" or Process.CommandLine like r"% -u administrator %") and (Process.CommandLine like r"% -c cmd%" or Process.CommandLine like r"% -c \"cmd%" or Process.CommandLine like r"% -c powershell%" or Process.CommandLine like r"% -c \"powershell%" or Process.CommandLine like r"% --command cmd%" or Process.CommandLine like r"% --command powershell%" or Process.CommandLine like r"% -c whoami%" or Process.CommandLine like r"% -c wscript%" or Process.CommandLine like r"% -c cscript%"))

[ActivityMonitoringRule]
# Detects suspicious powershell download cradle using nslookup. This cradle uses nslookup to extract payloads from DNS records
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleName = Nslookup PowerShell Download Cradle - ProcessCreation
EventType = Process.Start
Tag = proc-start-nslookup-powershell-download-cradle-processcreation
RiskScore = 50
Query = ((Process.Path like r"%\\nslookup.exe%" or Process.Name like r"\\nslookup.exe") and ((Parent.Path like r"%\\powershell.exe" or Parent.Path like r"%\\pwsh.exe") and (Process.CommandLine like r"% -q=txt %" or Process.CommandLine like r"% -querytype=txt %")))
GenericProperty1 = Parent.Path

[ActivityMonitoringRule]
# Detects suspicious child processes of SysAidServer (as seen in MERCURY threat actor intrusions)
# Author: Florian Roth (Nextron Systems)
RuleName = Suspicious SysAidServer Child
EventType = Process.Start
Tag = proc-start-suspicious-sysaidserver-child
RiskScore = 50
Query = ((Parent.Path like r"%\\java.exe" or Parent.Path like r"%\\javaw.exe") and Parent.CommandLine like r"%SysAidServer%")
GenericProperty1 = Parent.Path
GenericProperty2 = Parent.CommandLine

[ActivityMonitoringRule]
# Uninstall an application with wmic
# Author: frac113
RuleName = Application Removed Via Wmic.EXE
EventType = Process.Start
Tag = proc-start-application-removed-via-wmic.exe
RiskScore = 50
Query = ((Process.Path like r"%\\WMIC.exe" or Process.Name == "wmic.exe") and (Process.CommandLine like r"%call%" or Process.CommandLine like r"%uninstall%"))

[ActivityMonitoringRule]
# Deployment Image Servicing and Management tool. DISM is used to enumerate, install, uninstall, configure, and update features and packages in Windows images
# Author: frack113
RuleName = Dism Remove Online Package
EventType = Process.Start
Tag = proc-start-dism-remove-online-package
RiskScore = 50
Query = ((Process.Path like r"%\\DismHost.exe" and Parent.CommandLine like r"%/Online%" and Parent.CommandLine like r"%/Disable-Feature%") or (Process.Path like r"%\\Dism.exe" and Process.CommandLine like r"%/Online%" and Process.CommandLine like r"%/Disable-Feature%"))
GenericProperty1 = Parent.CommandLine

[ActivityMonitoringRule]
# Detects the usage of "mstsc.exe" with the "/v" flag to initiate a connection to a remote server.
# Adversaries may use valid accounts to log into a computer using the Remote Desktop Protocol (RDP). The adversary may then perform actions as the logged-on user.
# Author: frack113
RuleName = New Remote Desktop Connection Initiated Via Mstsc.EXE
EventType = Process.Start
Tag = proc-start-new-remote-desktop-connection-initiated-via-mstsc.exe
RiskScore = 50
Query = (((Process.Path like r"%\\mstsc.exe" or Process.Name == "mstsc.exe") and Process.CommandLine like r"% /v:%") and not ((Parent.Path like r"C:\\Windows\\System32\\lxss\\wslhost.exe" and Process.CommandLine like r"%C:\\ProgramData\\Microsoft\\WSL\\wslg.rdp%")))
GenericProperty1 = Parent.Path

[ActivityMonitoringRule]
# Detects execution of "rundll32" with potential obfuscated ordinal calls
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleName = Potential Obfuscated Ordinal Call Via Rundll32
EventType = Process.Start
Tag = proc-start-potential-obfuscated-ordinal-call-via-rundll32
RiskScore = 50
Query = ((Process.Path like r"%\\rundll32.exe" or Process.Name == "RUNDLL32.EXE" or Process.CommandLine like r"%rundll32%") and (Process.CommandLine like r"%#+%" or Process.CommandLine like r"%#-%"))

[ActivityMonitoringRule]
# Detects the usage of "reg.exe" to add Defender folder exclusions. Qbot has been seen using this technique to add exlcusions for folders within AppData and ProgramData.
# Author: frack113
RuleName = Suspicious Windows Defender Folder Exclusion Added Via Reg.EXE
EventType = Process.Start
Tag = proc-start-suspicious-windows-defender-folder-exclusion-added-via-reg.exe
RiskScore = 50
Query = (Process.Path like r"%\\reg.exe" and (Process.CommandLine like r"%SOFTWARE\\Microsoft\\Windows Defender\\Exclusions\\Paths%" or Process.CommandLine like r"%SOFTWARE\\Microsoft\\Microsoft Antimalware\\Exclusions\\Paths%") and Process.CommandLine like r"%ADD %" and Process.CommandLine like r"%/t %" and Process.CommandLine like r"%REG\_DWORD %" and Process.CommandLine like r"%/v %" and Process.CommandLine like r"%/d %" and Process.CommandLine like r"%0%")

[ActivityMonitoringRule]
# Detects execution of "certmgr" with the "add" flag in order to install a new certificate on the system.
# Adversaries may install a root certificate on a compromised system to avoid warnings when connecting to adversary controlled web servers.
# Author: oscd.community, @redcanary, Zach Stanford @svch0st
RuleName = New Root Certificate Installed Via CertMgr.EXE
EventType = Process.Start
Tag = proc-start-new-root-certificate-installed-via-certmgr.exe
RiskScore = 50
Query = ((Process.Path like r"%\\CertMgr.exe" or Process.Name == "CERTMGT.EXE") and (Process.CommandLine like r"%/add%" and Process.CommandLine like r"%root%"))

[ActivityMonitoringRule]
# This rule detects execution of a PowerShell code through the sqlps.exe utility, which is included in the standard set of utilities supplied with the MSSQL Server.
# Script blocks are not logged in this case, so this utility helps to bypass protection mechanisms based on the analysis of these logs.
# Author: Agro (@agro_sev) oscd.community
RuleName = Detection of PowerShell Execution via Sqlps.exe
EventType = Process.Start
Tag = proc-start-detection-of-powershell-execution-via-sqlps.exe
RiskScore = 50
Query = (Parent.Path like r"%\\sqlps.exe" or ((Process.Path like r"%\\sqlps.exe" or Process.Name == "sqlps.exe") and not (Parent.Path like r"%\\sqlagent.exe")))
GenericProperty1 = Parent.Path

[ActivityMonitoringRule]
# Detects the use of the 'Pubprn.vbs' Microsoft signed script to execute commands.
# Author: frack113
RuleName = Pubprn.vbs Proxy Execution
EventType = Process.Start
Tag = proc-start-pubprn.vbs-proxy-execution
RiskScore = 50
Query = (Process.CommandLine like r"%\\pubprn.vbs%" and Process.CommandLine like r"%script:%")

[ActivityMonitoringRule]
# Detects processes that query known 3rd party registry keys that holds credentials via commandline
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleName = Enumeration for 3rd Party Creds From CLI
EventType = Process.Start
Tag = proc-start-enumeration-for-3rd-party-creds-from-cli
RiskScore = 50
Query = (Process.CommandLine like r"%\\Software\\SimonTatham\\PuTTY\\Sessions%" or Process.CommandLine like r"%\\Software\\SimonTatham\\PuTTY\\SshHostKeys\\%" or Process.CommandLine like r"%\\Software\\Mobatek\\MobaXterm\\%" or Process.CommandLine like r"%\\Software\\WOW6432Node\\Radmin\\v3.0\\Server\\Parameters\\Radmin%" or Process.CommandLine like r"%\\Software\\Aerofox\\FoxmailPreview%" or Process.CommandLine like r"%\\Software\\Aerofox\\Foxmail\\V3.1%" or Process.CommandLine like r"%\\Software\\IncrediMail\\Identities%" or Process.CommandLine like r"%\\Software\\Qualcomm\\Eudora\\CommandLine%" or Process.CommandLine like r"%\\Software\\RimArts\\B2\\Settings%" or Process.CommandLine like r"%\\Software\\OpenVPN-GUI\\configs%" or Process.CommandLine like r"%\\Software\\Martin Prikryl\\WinSCP 2\\Sessions%" or Process.CommandLine like r"%\\Software\\FTPWare\\COREFTP\\Sites%" or Process.CommandLine like r"%\\Software\\DownloadManager\\Passwords%" or Process.CommandLine like r"%\\Software\\OpenSSH\\Agent\\Keys%" or Process.CommandLine like r"%\\Software\\TightVNC\\Server%" or Process.CommandLine like r"%\\Software\\ORL\\WinVNC3\\Password%" or Process.CommandLine like r"%\\Software\\RealVNC\\WinVNC4%")

[ActivityMonitoringRule]
# Detects suspicious sysprep process start with AppData folder as target (as used by Trojan Syndicasec in Thrip report by Symantec)
# Author: Florian Roth (Nextron Systems)
RuleName = Sysprep on AppData Folder
EventType = Process.Start
Tag = proc-start-sysprep-on-appdata-folder
RiskScore = 50
Query = (Process.Path like r"%\\sysprep.exe" and Process.CommandLine like r"%\\AppData\\%")

[ActivityMonitoringRule]
# Detects events that appear when a user click on a link file with a powershell command in it
# Author: frack113
RuleName = Hidden Powershell in Link File Pattern
EventType = Process.Start
Tag = proc-start-hidden-powershell-in-link-file-pattern
RiskScore = 50
Query = (Parent.Path like r"C:\\Windows\\explorer.exe" and Process.Path like r"C:\\Windows\\System32\\cmd.exe" and Process.CommandLine like r"%powershell%" and Process.CommandLine like r"%.lnk%")
GenericProperty1 = Parent.Path

[ActivityMonitoringRule]
# Detects a suspicious execution of csc.exe, which uses a source in a suspicious folder (e.g. AppData)
# Author: Florian Roth (Nextron Systems)
RuleName = Suspicious Csc.exe Source File Folder
EventType = Process.Start
Tag = proc-start-suspicious-csc.exe-source-file-folder
RiskScore = 50
Query = ((Process.Path like r"%\\csc.exe" and (Process.CommandLine like r"%\\AppData\\%" or Process.CommandLine like r"%\\Windows\\Temp\\%")) and not (Parent.Path like r"C:\\Program Files%" or (Parent.Path like r"%\\sdiagnhost.exe" or Parent.Path like r"%\\w3wp.exe" or Parent.Path like r"%\\choco.exe") or Parent.CommandLine like r"%\\ProgramData\\Microsoft\\Windows Defender Advanced Threat Protection%"))
GenericProperty1 = Parent.Path
GenericProperty2 = Parent.CommandLine

[ActivityMonitoringRule]
# Detects the use of a Microsoft signed script 'REGISTER_APP.VBS' to register a VSS/VDS Provider as a COM+ application.
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleName = REGISTER_APP.VBS Proxy Execution
EventType = Process.Start
Tag = proc-start-register_app.vbs-proxy-execution
RiskScore = 50
Query = (Process.CommandLine like r"%\\register\_app.vbs%" and Process.CommandLine like r"%-register%")

[ActivityMonitoringRule]
# Detects an attempt to execute code or create service on remote host via winrm.vbs.
# Author: Julia Fomina, oscd.community
RuleName = Remote Code Execute via Winrm.vbs
EventType = Process.Start
Tag = proc-start-remote-code-execute-via-winrm.vbs
RiskScore = 50
Query = ((Process.Path like r"%\\cscript.exe" or Process.Name == "cscript.exe") and (Process.CommandLine like r"%winrm%" and Process.CommandLine like r"%invoke Create wmicimv2/Win32\_%" and Process.CommandLine like r"%-r:http%"))

[ActivityMonitoringRule]
# Detects a JAVA process running with remote debugging allowing more than just localhost to connect
# Author: Florian Roth (Nextron Systems)
RuleName = Java Running with Remote Debugging
EventType = Process.Start
Tag = proc-start-java-running-with-remote-debugging
RiskScore = 50
Query = ((Process.CommandLine like r"%transport=dt\_socket,address=%" and (Process.CommandLine like r"%jre1.%" or Process.CommandLine like r"%jdk1.%")) and not ((Process.CommandLine like r"%address=127.0.0.1%" or Process.CommandLine like r"%address=localhost%")))

[ActivityMonitoringRule]
# Detects the use of a Microsoft signed script to execute commands and bypassing AppLocker.
# Author: frack113
RuleName = CL_LoadAssembly.ps1 Proxy Execution
EventType = Process.Start
Tag = proc-start-cl_loadassembly.ps1-proxy-execution
RiskScore = 50
Query = (Process.CommandLine like r"%\\CL\_LoadAssembly.ps1%" or Process.CommandLine like r"%LoadAssemblyFromPath %")

[ActivityMonitoringRule]
# Detects the execution of WMIC with the "csproduct" which is used to obtain information such as hardware models and vendor information
# Author: Florian Roth (Nextron Systems)
RuleName = Hardware Model Reconnaissance Via Wmic.EXE
EventType = Process.Start
Tag = proc-start-hardware-model-reconnaissance-via-wmic.exe
RiskScore = 50
Query = ((Process.Path like r"%\\wmic.exe" or Process.Name == "wmic.exe") and Process.CommandLine like r"%csproduct%")

[ActivityMonitoringRule]
# Adversaries may acquire credentials from web browsers by reading files specific to the target browser.
# Web browsers commonly save credentials such as website usernames and passwords so that they do not need to be entered manually in the future.
# Web browsers typically store the credentials in an encrypted format within a credential store.
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleName = Potential Browser Data Stealing
EventType = Process.Start
Tag = proc-start-potential-browser-data-stealing
RiskScore = 50
Query = (((Process.CommandLine like r"%copy-item%" or Process.CommandLine like r"%copy %" or Process.CommandLine like r"%cpi %" or Process.CommandLine like r"% cp %" or Process.CommandLine like r"%move %" or Process.CommandLine like r"%move-item%" or Process.CommandLine like r"% mi %" or Process.CommandLine like r"% mv %") or (Process.Path like r"%\\xcopy.exe" or Process.Path like r"%\\robocopy.exe") or Process.Name in ["XCOPY.EXE", "robocopy.exe"]) and (Process.CommandLine like r"%\\Opera Software\\Opera Stable\\%" or Process.CommandLine like r"%\\Mozilla\\Firefox\\Profiles%" or Process.CommandLine like r"%\\Microsoft\\Edge\\User Data\\%" or Process.CommandLine like r"%\\Google\\Chrome\\User Data\\%"))

[ActivityMonitoringRule]
# Detects an attempt to leverage dnscmd.exe to enumerate the DNS zones of a domain. DNS zones used to host the DNS records for a particular domain.
# Author: @gott_cyber
RuleName = Potential Discovery Activity Via Dnscmd.EXE
EventType = Process.Start
Tag = proc-start-potential-discovery-activity-via-dnscmd.exe
RiskScore = 50
Query = (Process.Path like r"%\\dnscmd.exe" and (Process.CommandLine like r"%/enumrecords%" or Process.CommandLine like r"%/enumzones%" or Process.CommandLine like r"%/ZonePrint%" or Process.CommandLine like r"%/info%"))

[ActivityMonitoringRule]
# Detects the execution of sigverif binary as a parent process which could indicate it being used as a LOLBIN to proxy execution
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleName = Suspicious Sigverif Execution
EventType = Process.Start
Tag = proc-start-suspicious-sigverif-execution
RiskScore = 50
Query = Parent.Path like r"%\\sigverif.exe"
GenericProperty1 = Parent.Path

[ActivityMonitoringRule]
# Detects Microsoft Visual Studio vsls-agent.exe lolbin execution with a suspicious library load using the --agentExtensionPath parameter
# Author: bohops
RuleName = Suspicious Vsls-Agent Command With AgentExtensionPath Load
EventType = Process.Start
Tag = proc-start-suspicious-vsls-agent-command-with-agentextensionpath-load
RiskScore = 50
Query = ((Process.Path like r"%\\vsls-agent.exe" and Process.CommandLine like r"%--agentExtensionPath%") and not (Process.CommandLine like r"%Microsoft.VisualStudio.LiveShare.Agent.%"))

[ActivityMonitoringRule]
# Well-known TAP software installation. Possible preparation for data exfiltration using tunneling techniques
# Author: Daniil Yugoslavskiy, Ian Davis, oscd.community
RuleName = Tap Installer Execution
EventType = Process.Start
Tag = proc-start-tap-installer-execution
RiskScore = 50
Query = (Process.Path like r"%\\tapinstall.exe" and not (((Process.Path like r"C:\\Program Files\\Avast Software\\SecureLine VPN\\tapinstall.exe" or Process.Path like r"C:\\Program Files (x86)\\Avast Software\\SecureLine VPN\\tapinstall.exe")) or (Process.Path like r"C:\\Program Files\\OpenVPN Connect\\drivers\\tap\\%") or (Process.Path like r"C:\\Program Files (x86)\\Proton Technologies\\ProtonVPNTap\\installer\\%")))

[ActivityMonitoringRule]
# Detects potential abuse of Windows Subsystem for Linux (WSL) binary as a LOLBIN to execute arbitrary linux and windows commands
# Author: oscd.community, Zach Stanford @svch0st, Nasreddine Bencherchali (Nextron Systems)
RuleName = Arbitrary Command Execution Using WSL
EventType = Process.Start
Tag = proc-start-arbitrary-command-execution-using-wsl
RiskScore = 50
Query = (((Process.Path like r"%\\wsl.exe" or Process.Name == "wsl.exe") and (Process.CommandLine like r"% -e %" or Process.CommandLine like r"% --exec%" or Process.CommandLine like r"% --system%" or Process.CommandLine like r"% --shell-type %" or Process.CommandLine like r"% /mnt/c%" or Process.CommandLine like r"% --user root%" or Process.CommandLine like r"% -u root%" or Process.CommandLine like r"%--debug-shell%")) and not ((Parent.Path like r"%\\cmd.exe" and Process.CommandLine like r"% -d %" and Process.CommandLine like r"% -e kill %")))
GenericProperty1 = Parent.Path

[ActivityMonitoringRule]
# Detects suspicious command line that adds an account to the local administrators/administrateurs group
# Author: Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)
RuleName = Add User to Local Administrators Group
EventType = Process.Start
Tag = proc-start-add-user-to-local-administrators-group
RiskScore = 50
Query = (((Process.CommandLine like r"%localgroup %" and Process.CommandLine like r"% /add%") or (Process.CommandLine like r"%Add-LocalGroupMember %" and Process.CommandLine like r"% -Group %")) and (Process.CommandLine like r"% administrators %" or Process.CommandLine like r"% administrateur%"))

[ActivityMonitoringRule]
# Detects usage of the "type" command to download/upload data from WebDAV server
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleName = Potential Download/Upload Activity Using Type Command
EventType = Process.Start
Tag = proc-start-potential-download/upload-activity-using-type-command
RiskScore = 50
Query = ((Process.CommandLine like r"%type %" and Process.CommandLine like r"% > \\\\\*") or (Process.CommandLine like r"%type \\\\\*" and Process.CommandLine like r"% > %"))

[ActivityMonitoringRule]
# Detects script file execution (.js, .jse, .vba, .vbe, .vbs, .wsf) by Wscript/Cscript
# Author: Michael Haag
RuleName = WSF/JSE/JS/VBA/VBE File Execution Via Cscript/Wscript
EventType = Process.Start
Tag = proc-start-wsf/jse/js/vba/vbe-file-execution-via-cscript/wscript
RiskScore = 50
Query = ((Process.Name in ["wscript.exe", "cscript.exe"] or (Process.Path like r"%\\wscript.exe" or Process.Path like r"%\\cscript.exe")) and (Process.CommandLine like r"%.js%" or Process.CommandLine like r"%.jse%" or Process.CommandLine like r"%.vba%" or Process.CommandLine like r"%.vbe%" or Process.CommandLine like r"%.vbs%" or Process.CommandLine like r"%.wsf%"))

[ActivityMonitoringRule]
# Adversaries may execute their own malicious payloads by hijacking the Registry entries used by services.
# Adversaries may use flaws in the permissions for registry to redirect from the originally specified executable to one that they control, in order to launch their own code at Service start.
# Windows stores local service configuration information in the Registry under HKLM\SYSTEM\CurrentControlSet\Services
# Author: frack113
RuleName = Changing Existing Service ImagePath Value Via Reg.EXE
EventType = Process.Start
Tag = proc-start-changing-existing-service-imagepath-value-via-reg.exe
RiskScore = 50
Query = (Process.Path like r"%\\reg.exe" and Process.CommandLine like r"%add %" and Process.CommandLine like r"%SYSTEM\\CurrentControlSet\\Services\\%" and Process.CommandLine like r"% ImagePath %" and (Process.CommandLine like r"% /d %" or Process.CommandLine like r"% -d %"))

[ActivityMonitoringRule]
# Extensible Stylesheet Language (XSL) files are commonly used to describe the processing and rendering of data within XML files. Rule detects when adversaries abuse this functionality to execute arbitrary files while potentially bypassing application whitelisting defenses.
# Author: Timur Zinniatullin, oscd.community, Swachchhanda Shrawan Poudel
RuleName = XSL Script Processing
EventType = Process.Start
Tag = proc-start-xsl-script-processing
RiskScore = 50
Query = (((Process.Path like r"%\\wmic.exe" and (Process.CommandLine like r"%/format%" or Process.CommandLine like r"%-format%")) and not ((Process.CommandLine like r"%Format:List%" or Process.CommandLine like r"%Format:htable%" or Process.CommandLine like r"%Format:hform%" or Process.CommandLine like r"%Format:table%" or Process.CommandLine like r"%Format:mof%" or Process.CommandLine like r"%Format:value%" or Process.CommandLine like r"%Format:rawxml%" or Process.CommandLine like r"%Format:xml%" or Process.CommandLine like r"%Format:csv%"))) or Process.Path like r"%\\msxsl.exe")

[ActivityMonitoringRule]
# Detects execution of "git" in order to clone a remote repository that contain suspicious keywords which might be suspicious
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleName = Suspicious Git Clone
EventType = Process.Start
Tag = proc-start-suspicious-git-clone
RiskScore = 50
Query = (((Process.Path like r"%\\git.exe" or Process.Path like r"%\\git-remote-https.exe") or Process.Name == "git.exe") and (Process.CommandLine like r"% clone %" or Process.CommandLine like r"%git-remote-https %") and (Process.CommandLine like r"%exploit%" or Process.CommandLine like r"%Vulns%" or Process.CommandLine like r"%vulnerability%" or Process.CommandLine like r"%RemoteCodeExecution%" or Process.CommandLine like r"%Invoke-%" or Process.CommandLine like r"%CVE-%" or Process.CommandLine like r"%poc-%" or Process.CommandLine like r"%ProofOfConcept%" or Process.CommandLine like r"%proxyshell%" or Process.CommandLine like r"%log4shell%" or Process.CommandLine like r"%eternalblue%" or Process.CommandLine like r"%eternal-blue%" or Process.CommandLine like r"%MS17-%"))

[ActivityMonitoringRule]
# Detects execution of wmic utility with the "computersystem" flag in order to obtain information about the machine such as the domain, username, model, etc.
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleName = Computer System Reconnaissance Via Wmic.EXE
EventType = Process.Start
Tag = proc-start-computer-system-reconnaissance-via-wmic.exe
RiskScore = 50
Query = ((Process.Path like r"%\\wmic.exe" or Process.Name == "wmic.exe") and Process.CommandLine like r"%computersystem%")

[ActivityMonitoringRule]
# Detects launch of executable by calling the LaunchApplication function from pcwutl.dll library.
# Author: Julia Fomina, oscd.community
RuleName = Code Execution via Pcwutl.dll
EventType = Process.Start
Tag = proc-start-code-execution-via-pcwutl.dll
RiskScore = 50
Query = ((Process.Path like r"%\\rundll32.exe" or Process.Name == "RUNDLL32.EXE") and (Process.CommandLine like r"%pcwutl%" and Process.CommandLine like r"%LaunchApplication%"))

[ActivityMonitoringRule]
# Detects the rare use of the command line tool shutdown to logoff a user
# Author: frack113
RuleName = Suspicious Execution of Shutdown to Log Out
EventType = Process.Start
Tag = proc-start-suspicious-execution-of-shutdown-to-log-out
RiskScore = 50
Query = (Process.Path like r"%\\shutdown.exe" and Process.CommandLine like r"%/l%")

[ActivityMonitoringRule]
# Detects remote PowerShell sections by monitoring for wsmprovhost (WinRM host process) as a parent or child process (sign of an active PowerShell remote session).
# Author: Roberto Rodriguez @Cyb3rWard0g
RuleName = Remote PowerShell Session Host Process (WinRM)
EventType = Process.Start
Tag = proc-start-remote-powershell-session-host-process-(winrm)
RiskScore = 50
Query = (Process.Path like r"%\\wsmprovhost.exe" or Parent.Path like r"%\\wsmprovhost.exe")
GenericProperty1 = Parent.Path

[ActivityMonitoringRule]
# Detects suspicious execution of rundll32, with specific calls to some DLLs with known LOLBIN functionalities
# Author: juju4, Jonhnathan Ribeiro, oscd.community, Nasreddine Bencherchali (Nextron Systems)
RuleName = Potentially Suspicious Rundll32 Activity
EventType = Process.Start
Tag = proc-start-potentially-suspicious-rundll32-activity
RiskScore = 50
Query = (((Process.CommandLine like r"%javascript:%" and Process.CommandLine like r"%.RegisterXLL%") or (Process.CommandLine like r"%url.dll%" and Process.CommandLine like r"%OpenURL%") or (Process.CommandLine like r"%url.dll%" and Process.CommandLine like r"%OpenURLA%") or (Process.CommandLine like r"%url.dll%" and Process.CommandLine like r"%FileProtocolHandler%") or (Process.CommandLine like r"%zipfldr.dll%" and Process.CommandLine like r"%RouteTheCall%") or (Process.CommandLine like r"%shell32.dll%" and Process.CommandLine like r"%Control\_RunDLL%") or (Process.CommandLine like r"%shell32.dll%" and Process.CommandLine like r"%ShellExec\_RunDLL%") or (Process.CommandLine like r"%mshtml.dll%" and Process.CommandLine like r"%PrintHTML%") or (Process.CommandLine like r"%advpack.dll%" and Process.CommandLine like r"%LaunchINFSection%") or (Process.CommandLine like r"%advpack.dll%" and Process.CommandLine like r"%RegisterOCX%") or (Process.CommandLine like r"%ieadvpack.dll%" and Process.CommandLine like r"%LaunchINFSection%") or (Process.CommandLine like r"%ieadvpack.dll%" and Process.CommandLine like r"%RegisterOCX%") or (Process.CommandLine like r"%ieframe.dll%" and Process.CommandLine like r"%OpenURL%") or (Process.CommandLine like r"%shdocvw.dll%" and Process.CommandLine like r"%OpenURL%") or (Process.CommandLine like r"%syssetup.dll%" and Process.CommandLine like r"%SetupInfObjectInstallAction%") or (Process.CommandLine like r"%setupapi.dll%" and Process.CommandLine like r"%InstallHinfSection%") or (Process.CommandLine like r"%pcwutl.dll%" and Process.CommandLine like r"%LaunchApplication%") or (Process.CommandLine like r"%dfshim.dll%" and Process.CommandLine like r"%ShOpenVerbApplication%") or (Process.CommandLine like r"%dfshim.dll%" and Process.CommandLine like r"%ShOpenVerbShortcut%") or (Process.CommandLine like r"%scrobj.dll%" and Process.CommandLine like r"%GenerateTypeLib%" and Process.CommandLine like r"%http%") or (Process.CommandLine like r"%shimgvw.dll%" and Process.CommandLine like r"%ImageView\_Fullscreen%" and Process.CommandLine like r"%http%") or (Process.CommandLine like r"%comsvcs.dll%" and Process.CommandLine like r"%MiniDump%")) and not ((Process.CommandLine like r"%shell32.dll,Control\_RunDLL desk.cpl,screensaver,@screensaver%") or (Parent.Path like r"C:\\Windows\\System32\\control.exe" and Parent.CommandLine like r"%.cpl%" and Process.CommandLine like r"%Shell32.dll%" and Process.CommandLine like r"%Control\_RunDLL%" and Process.CommandLine like r"%.cpl%") or (Parent.Path like r"C:\\Windows\\System32\\control.exe" and Process.CommandLine like r"\"C:\\Windows\\system32\\rundll32.exe\" Shell32.dll,Control\_RunDLL \"C:\\Windows\\System32\\%" and Process.CommandLine like r"%.cpl\",")))
GenericProperty1 = Parent.Path
GenericProperty2 = Parent.CommandLine

[ActivityMonitoringRule]
# Execute commands and binaries from the context of "forfiles". This is used as a LOLBIN for example to bypass application whitelisting.
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleName = Use of Forfiles For Execution
EventType = Process.Start
Tag = proc-start-use-of-forfiles-for-execution
RiskScore = 50
Query = ((Process.Path like r"%\\forfiles.exe" or Process.Name == "forfiles.exe") and (Process.CommandLine like r"% /p %" or Process.CommandLine like r"% -p %") and (Process.CommandLine like r"% /m %" or Process.CommandLine like r"% -m %") and (Process.CommandLine like r"% /c %" or Process.CommandLine like r"% -c %"))

[ActivityMonitoringRule]
# Detects a suspicious copy operation that tries to copy a program from a system (System32 or SysWOW64) directory to another on disk.
# Often used to move LOLBINs such as 'certutil' or 'desktopimgdownldr' to a different location with a different name in order to bypass detections based on locations
# Author: Florian Roth (Nextron Systems), Markus Neis, Tim Shelton (HAWK.IO), Nasreddine Bencherchali (Nextron Systems)
RuleName = Suspicious Copy From or To System32
EventType = Process.Start
Tag = proc-start-suspicious-copy-from-or-to-system32
RiskScore = 50
Query = (((Process.Path like r"%\\cmd.exe" and Process.CommandLine like r"%copy %") or ((Process.Path like r"%\\powershell.exe" or Process.Path like r"%\\pwsh.exe") and (Process.CommandLine like r"%copy-item%" or Process.CommandLine like r"% copy %" or Process.CommandLine like r"%cpi %" or Process.CommandLine like r"% cp %")) or ((Process.Path like r"%\\robocopy.exe" or Process.Path like r"%\\xcopy.exe") or Process.Name in ["robocopy.exe", "XCOPY.EXE"])) and (Process.CommandLine like r"%\\System32%" or Process.CommandLine like r"%\\SysWOW64%"))

[ActivityMonitoringRule]
# Adversaries may search the Registry on compromised systems for insecurely stored credentials.
# The Windows Registry stores configuration information that can be used by the system or other programs.
# Adversaries may query the Registry looking for credentials and passwords that have been stored for use by other programs or services
# Author: frack113
RuleName = Enumeration for Credentials in Registry
EventType = Process.Start
Tag = proc-start-enumeration-for-credentials-in-registry
RiskScore = 50
Query = ((Process.Path like r"%\\reg.exe" and Process.CommandLine like r"% query %" and Process.CommandLine like r"%/t %" and Process.CommandLine like r"%REG\_SZ%" and Process.CommandLine like r"%/s%") and ((Process.CommandLine like r"%/f %" and Process.CommandLine like r"%HKLM%") or (Process.CommandLine like r"%/f %" and Process.CommandLine like r"%HKCU%") or Process.CommandLine like r"%HKCU\\Software\\SimonTatham\\PuTTY\\Sessions%"))

[ActivityMonitoringRule]
# Detects the modification of an existing service in order to execute an arbitrary payload when the service is started or killed as a potential method for persistence.
# Author: Sreeman
RuleName = Potential Persistence Attempt Via Existing Service Tampering
EventType = Process.Start
Tag = proc-start-potential-persistence-attempt-via-existing-service-tampering
RiskScore = 50
Query = (((Process.CommandLine like r"%sc %" and Process.CommandLine like r"%config %" and Process.CommandLine like r"%binpath=%") or (Process.CommandLine like r"%sc %" and Process.CommandLine like r"%failure%" and Process.CommandLine like r"%command=%")) or (((Process.CommandLine like r"%reg %" and Process.CommandLine like r"%add %" and Process.CommandLine like r"%FailureCommand%") or (Process.CommandLine like r"%reg %" and Process.CommandLine like r"%add %" and Process.CommandLine like r"%ImagePath%")) and (Process.CommandLine like r"%.sh%" or Process.CommandLine like r"%.exe%" or Process.CommandLine like r"%.dll%" or Process.CommandLine like r"%.bin$%" or Process.CommandLine like r"%.bat%" or Process.CommandLine like r"%.cmd%" or Process.CommandLine like r"%.js%" or Process.CommandLine like r"%.msh$%" or Process.CommandLine like r"%.reg$%" or Process.CommandLine like r"%.scr%" or Process.CommandLine like r"%.ps%" or Process.CommandLine like r"%.vb%" or Process.CommandLine like r"%.jar%" or Process.CommandLine like r"%.pl%")))

[ActivityMonitoringRule]
# Threat actors performed dumping of SAM, SECURITY and SYSTEM registry hives using DelegateExecute key
# Author: frack113
RuleName = Suspicious Reg Add Open Command
EventType = Process.Start
Tag = proc-start-suspicious-reg-add-open-command
RiskScore = 50
Query = ((Process.CommandLine like r"%reg%" and Process.CommandLine like r"%add%" and Process.CommandLine like r"%hkcu\\software\\classes\\ms-settings\\shell\\open\\command%" and Process.CommandLine like r"%/ve %" and Process.CommandLine like r"%/d%") or (Process.CommandLine like r"%reg%" and Process.CommandLine like r"%add%" and Process.CommandLine like r"%hkcu\\software\\classes\\ms-settings\\shell\\open\\command%" and Process.CommandLine like r"%/v%" and Process.CommandLine like r"%DelegateExecute%") or (Process.CommandLine like r"%reg%" and Process.CommandLine like r"%delete%" and Process.CommandLine like r"%hkcu\\software\\classes\\ms-settings%"))

[ActivityMonitoringRule]
# Detects suspicious msiexec process starts with web addresses as parameter
# Author: Florian Roth (Nextron Systems)
RuleName = MsiExec Web Install
EventType = Process.Start
Tag = proc-start-msiexec-web-install
RiskScore = 50
Query = (Process.CommandLine like r"% msiexec%" and Process.CommandLine like r"%://%")

[ActivityMonitoringRule]
# The "VSIISExeLauncher.exe" binary part of the Visual Studio/VS Code can be used to execute arbitrary binaries
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleName = Use of VSIISExeLauncher.exe
EventType = Process.Start
Tag = proc-start-use-of-vsiisexelauncher.exe
RiskScore = 50
Query = ((Process.Path like r"%\\VSIISExeLauncher.exe" or Process.Name == "VSIISExeLauncher.exe") and (Process.CommandLine like r"% -p %" or Process.CommandLine like r"% -a %"))

[ActivityMonitoringRule]
# Detect usage of the "driverquery" utility. Which can be used to perform reconnaissance on installed drivers
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleName = DriverQuery.EXE Execution
EventType = Process.Start
Tag = proc-start-driverquery.exe-execution
RiskScore = 50
Query = (Process.Path like r"%driverquery.exe" or Process.Name == "drvqry.exe")

[ActivityMonitoringRule]
# Detects usage of findstr to identify and execute a lnk file as seen within the HHS redirect attack
# Author: Trent Liffick
RuleName = Findstr Launching .lnk File
EventType = Process.Start
Tag = proc-start-findstr-launching-.lnk-file
RiskScore = 50
Query = ((Process.Path like r"%\\findstr.exe" or Process.Name == "FINDSTR.EXE") and Process.CommandLine like r"%.lnk")

[ActivityMonitoringRule]
# Detects suspicious child processes of Wscript/Cscript
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleName = Cscript/Wscript Suspicious Child Process
EventType = Process.Start
Tag = proc-start-cscript/wscript-suspicious-child-process
RiskScore = 50
Query = ((Parent.Path like r"%\\wscript.exe" or Parent.Path like r"%\\cscript.exe") and (Process.Path like r"%\\cmd.exe" or Process.Path like r"%\\powershell.exe" or Process.Path like r"%\\pwsh.exe") and ((Process.CommandLine like r"%mshta%" and Process.CommandLine like r"%http%") or (Process.CommandLine like r"%rundll32%" or Process.CommandLine like r"%regsvr32%" or Process.CommandLine like r"%msiexec%")))
GenericProperty1 = Parent.Path

[ActivityMonitoringRule]
# Detects a suspicious command line execution that invokes PowerShell with reference to an AppData folder
# Author: Florian Roth (Nextron Systems), Jonhnathan Ribeiro, oscd.community
RuleName = PowerShell Script Run in AppData
EventType = Process.Start
Tag = proc-start-powershell-script-run-in-appdata
RiskScore = 50
Query = ((Process.CommandLine like r"%powershell.exe%" or Process.CommandLine like r"%\\powershell%" or Process.CommandLine like r"%\\pwsh%" or Process.CommandLine like r"%pwsh.exe%") and Process.CommandLine like r"%/c %" and Process.CommandLine like r"%\\AppData\\%" and (Process.CommandLine like r"%Local\\%" or Process.CommandLine like r"%Roaming\\%"))

[ActivityMonitoringRule]
# The Workflow Command-line Compiler can be used for AWL bypass and is listed in Microsoft's recommended block rules.
# Author: Christopher Peacock @SecurePeacock, SCYTHE @scythe_io
RuleName = Use of Wfc.exe
EventType = Process.Start
Tag = proc-start-use-of-wfc.exe
RiskScore = 50
Query = (Process.Path like r"%\\wfc.exe" or Process.Name == "wfc.exe")

[ActivityMonitoringRule]
# Detects use of chcp to look up the system locale value as part of host discovery
# Author: _pete_0, TheDFIRReport
RuleName = Console CodePage Lookup Via CHCP
EventType = Process.Start
Tag = proc-start-console-codepage-lookup-via-chcp
RiskScore = 50
Query = (Parent.Path like r"%\\cmd.exe" and (Parent.CommandLine like r"% /c %" or Parent.CommandLine like r"% /r %" or Parent.CommandLine like r"% /k %") and Process.Path like r"%\\chcp.com" and (Process.CommandLine like r"%chcp" or Process.CommandLine like r"%chcp " or Process.CommandLine like r"%chcp  "))
GenericProperty1 = Parent.Path
GenericProperty2 = Parent.CommandLine

[ActivityMonitoringRule]
# Detects potentially suspicious SQL queries using SQLCmd targeting the Veeam backup databases in order to steal information.
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleName = Veeam Backup Database Suspicious Query
EventType = Process.Start
Tag = proc-start-veeam-backup-database-suspicious-query
RiskScore = 50
Query = (Process.Path like r"%\\sqlcmd.exe" and Process.CommandLine like r"%VeeamBackup%" and Process.CommandLine like r"%From %" and (Process.CommandLine like r"%BackupRepositories%" or Process.CommandLine like r"%Backups%" or Process.CommandLine like r"%Credentials%" or Process.CommandLine like r"%HostCreds%" or Process.CommandLine like r"%SmbFileShares%" or Process.CommandLine like r"%Ssh\_creds%" or Process.CommandLine like r"%VSphereInfo%"))

[ActivityMonitoringRule]
# Detects usage of the built-in PowerShell cmdlet "Enable-WindowsOptionalFeature" used as a Deployment Image Servicing and Management tool.
# Similar to DISM.exe, this cmdlet is used to enumerate, install, uninstall, configure, and update features and packages in Windows images
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleName = Potential Suspicious Windows Feature Enabled - ProcCreation
EventType = Process.Start
Tag = proc-start-potential-suspicious-windows-feature-enabled-proccreation
RiskScore = 50
Query = (Process.CommandLine like r"%Enable-WindowsOptionalFeature%" and Process.CommandLine like r"%-Online%" and Process.CommandLine like r"%-FeatureName%" and (Process.CommandLine like r"%TelnetServer%" or Process.CommandLine like r"%Internet-Explorer-Optional-amd64%" or Process.CommandLine like r"%TFTP%" or Process.CommandLine like r"%SMB1Protocol%" or Process.CommandLine like r"%Client-ProjFS%" or Process.CommandLine like r"%Microsoft-Windows-Subsystem-Linux%"))

[ActivityMonitoringRule]
# Detects launch of the PSEXESVC service, which means that this system was the target of a psexec remote execution
# Author: Thomas Patzke, Romaissa Adjailia, Florian Roth (Nextron Systems)
RuleName = PsExec Service Execution
EventType = Process.Start
Tag = proc-start-psexec-service-execution
RiskScore = 50
Query = (Process.Path like r"C:\\Windows\\PSEXESVC.exe" or Process.Name == "psexesvc.exe")

[ActivityMonitoringRule]
# The "ScriptRunner.exe" binary can be abused to proxy execution through it and bypass possible whitelisting
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleName = Use of Scriptrunner.exe
EventType = Process.Start
Tag = proc-start-use-of-scriptrunner.exe
RiskScore = 50
Query = ((Process.Path like r"%\\ScriptRunner.exe" or Process.Name == "ScriptRunner.exe") and Process.CommandLine like r"% -appvscript %")

[ActivityMonitoringRule]
# Detects the use of the 'Launch-VsDevShell.ps1' Microsoft signed script to execute commands.
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleName = Launch-VsDevShell.PS1 Proxy Execution
EventType = Process.Start
Tag = proc-start-launch-vsdevshell.ps1-proxy-execution
RiskScore = 50
Query = (Process.CommandLine like r"%Launch-VsDevShell.ps1%" and (Process.CommandLine like r"%VsWherePath %" or Process.CommandLine like r"%VsInstallationPath %"))

[ActivityMonitoringRule]
# There is an option for a MS VS Just-In-Time Debugger "vsjitdebugger.exe" to launch specified executable and attach a debugger.
# This option may be used adversaries to execute malicious code by signed verified binary.
# The debugger is installed alongside with Microsoft Visual Studio package.
# Author: Agro (@agro_sev), Ensar Şamil (@sblmsrsn), oscd.community
RuleName = Malicious PE Execution by Microsoft Visual Studio Debugger
EventType = Process.Start
Tag = proc-start-malicious-pe-execution-by-microsoft-visual-studio-debugger
RiskScore = 50
Query = (Parent.Path like r"%\\vsjitdebugger.exe" and not ((Process.Path like r"%\\vsimmersiveactivatehelper%.exe" or Process.Path like r"%\\devenv.exe")))
GenericProperty1 = Parent.Path

[ActivityMonitoringRule]
# Detects the desktopimgdownldr utility being used to download a remote file. An adversary may use desktopimgdownldr to download arbitrary files as an alternative to certutil.
# Author: Tim Rauch
RuleName = Remote File Download via Desktopimgdownldr Utility
EventType = Process.Start
Tag = proc-start-remote-file-download-via-desktopimgdownldr-utility
RiskScore = 50
Query = (Process.Path like r"%\\desktopimgdownldr.exe" and Parent.Path like r"%\\desktopimgdownldr.exe" and Process.CommandLine like r"%/lockscreenurl:http%")
GenericProperty1 = Parent.Path

[ActivityMonitoringRule]
# Detects suspicious process related to rundll32 based on arguments
# Author: frack113, Zaw Min Htun (ZETA)
RuleName = Suspicious Rundll32 Script in CommandLine
EventType = Process.Start
Tag = proc-start-suspicious-rundll32-script-in-commandline
RiskScore = 50
Query = (Process.CommandLine like r"%rundll32%" and (Process.CommandLine like r"%mshtml,RunHTMLApplication%" or Process.CommandLine like r"%mshtml,#135%") and (Process.CommandLine like r"%javascript:%" or Process.CommandLine like r"%vbscript:%"))

[ActivityMonitoringRule]
# Detects suspicious start of rundll32.exe with a parent process of Explorer.exe. Variant of Raspberry Robin, as first reported by Red Canary.
# Author: CD_ROM_
RuleName = Rundll32 With Suspicious Parent Process
EventType = Process.Start
Tag = proc-start-rundll32-with-suspicious-parent-process
RiskScore = 50
Query = (((Process.Path like r"%\\rundll32.exe" or Process.Name == "RUNDLL32.EXE") and Parent.Path like r"%\\explorer.exe") and not (Process.CommandLine like r"% C:\\Windows\\System32\\%" or Process.CommandLine like r"% -localserver 22d8c27b-47a1-48d1-ad08-7da7abd79617"))
GenericProperty1 = Parent.Path

[ActivityMonitoringRule]
# Detects the execution of "dotnet-dump" with the "collect" flag. The execution could indicate potential process dumping of critical processes such as LSASS
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleName = Process Memory Dump Via Dotnet-Dump
EventType = Process.Start
Tag = proc-start-process-memory-dump-via-dotnet-dump
RiskScore = 50
Query = ((Process.Path like r"%\\dotnet-dump.exe" or Process.Name == "dotnet-dump.dll") and Process.CommandLine like r"%collect%")

[ActivityMonitoringRule]
# Detects execution of ftp.exe script execution with the "-s" flag and any child processes ran by ftp.exe
# Author: Victor Sergeev, oscd.community
RuleName = LOLBIN Execution Of The FTP.EXE Binary
EventType = Process.Start
Tag = proc-start-lolbin-execution-of-the-ftp.exe-binary
RiskScore = 50
Query = (Parent.Path like r"%\\ftp.exe" or ((Process.Path like r"%\\ftp.exe" or Process.Name == "ftp.exe") and Process.CommandLine like r"%-s:%"))
GenericProperty1 = Parent.Path

[ActivityMonitoringRule]
# Commandline to launch powershell with a base64 payload
# Author: frack113
RuleName = Suspicious Execution of Powershell with Base64
EventType = Process.Start
Tag = proc-start-suspicious-execution-of-powershell-with-base64
RiskScore = 50
Query = (((Process.Path like r"%\\powershell.exe" or Process.Path like r"%\\pwsh.exe") and (Process.CommandLine like r"% -e %" or Process.CommandLine like r"% -en %" or Process.CommandLine like r"% -enc %" or Process.CommandLine like r"% -enco%" or Process.CommandLine like r"% -ec %")) and not ((Process.CommandLine like r"% -Encoding %") or ((Parent.Path like r"%C:\\Packages\\Plugins\\Microsoft.GuestConfiguration.ConfigurationforWindows\\%" or Parent.Path like r"%\\gc\_worker.exe%"))))
GenericProperty1 = Parent.Path

[ActivityMonitoringRule]
# This rule detects execution of a PowerShell code through the sqltoolsps.exe utility, which is included in the standard set of utilities supplied with the Microsoft SQL Server Management studio.
# Script blocks are not logged in this case, so this utility helps to bypass protection mechanisms based on the analysis of these logs.
# Author: Agro (@agro_sev) oscd.communitly
RuleName = SQL Client Tools PowerShell Session Detection
EventType = Process.Start
Tag = proc-start-sql-client-tools-powershell-session-detection
RiskScore = 50
Query = ((Process.Path like r"%\\sqltoolsps.exe" or Parent.Path like r"%\\sqltoolsps.exe" or Process.Name like r"\\sqltoolsps.exe") and not (Parent.Path like r"%\\smss.exe"))
GenericProperty1 = Parent.Path

[ActivityMonitoringRule]
# Performs execution of specified file, can be used for defensive evasion.
# Author: frack113
RuleName = Suspicious Subsystem for Linux Bash Execution
EventType = Process.Start
Tag = proc-start-suspicious-subsystem-for-linux-bash-execution
RiskScore = 50
Query = ((Process.CommandLine like r"%bash.exe%" and Process.CommandLine like r"%-c %") and not (((Parent.CommandLine like r"%C:\\Program Files\\Git\\post-install.bat%" or Parent.CommandLine like r"%C:\\Program Files (x86)\\Git\\post-install.bat%" or Parent.CommandLine like r"%echo /etc/post-install/%.post%") or Process.CommandLine like r"%echo /etc/post-install/%.post%")))
GenericProperty1 = Parent.CommandLine

[ActivityMonitoringRule]
# An adversary may compress or encrypt data that is collected prior to exfiltration using 3rd party utilities
# Author: frack113
RuleName = Compress Data and Lock With Password for Exfiltration With WINZIP
EventType = Process.Start
Tag = proc-start-compress-data-and-lock-with-password-for-exfiltration-with-winzip
RiskScore = 50
Query = ((Process.CommandLine like r"%winzip.exe%" or Process.CommandLine like r"%winzip64.exe%") and Process.CommandLine like r"%-s\"%" and (Process.CommandLine like r"% -min %" or Process.CommandLine like r"% -a %"))

[ActivityMonitoringRule]
# Detects the execution of AdvancedRun utility
# Author: Florian Roth (Nextron Systems)
RuleName = PUA - AdvancedRun Execution
EventType = Process.Start
Tag = proc-start-pua-advancedrun-execution
RiskScore = 50
Query = (Process.Name == "AdvancedRun.exe" or (Process.CommandLine like r"% /EXEFilename %" and Process.CommandLine like r"% /Run%") or (Process.CommandLine like r"% /WindowState 0%" and Process.CommandLine like r"% /RunAs %" and Process.CommandLine like r"% /CommandLine %"))

[ActivityMonitoringRule]
# Detect usage of the "defaultpack.exe" binary as a proxy to launch other programs
# Author: frack113
RuleName = Lolbin Defaultpack.exe Use As Proxy
EventType = Process.Start
Tag = proc-start-lolbin-defaultpack.exe-use-as-proxy
RiskScore = 50
Query = Parent.Path like r"%\\defaultpack.exe"
GenericProperty1 = Parent.Path

[ActivityMonitoringRule]
# Detects suspicious execution of "PDQDeployRunner" which is part of the PDQDeploy service stack that is responsible for executing commands and packages on a remote machines
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleName = Suspicious Execution Of PDQDeployRunner
EventType = Process.Start
Tag = proc-start-suspicious-execution-of-pdqdeployrunner
RiskScore = 50
Query = (Parent.Path like r"%PDQDeployRunner-%" and ((Process.Path like r"%\\wscript.exe" or Process.Path like r"%\\cscript.exe" or Process.Path like r"%\\rundll32.exe" or Process.Path like r"%\\regsvr32.exe" or Process.Path like r"%\\wmic.exe" or Process.Path like r"%\\msiexec.exe" or Process.Path like r"%\\mshta.exe" or Process.Path like r"%\\csc.exe" or Process.Path like r"%\\dllhost.exe" or Process.Path like r"%\\certutil.exe" or Process.Path like r"%\\scriptrunner.exe" or Process.Path like r"%\\bash.exe" or Process.Path like r"%\\wsl.exe") or (Process.Path like r"%C:\\Users\\Public\\%" or Process.Path like r"%C:\\ProgramData\\%" or Process.Path like r"%C:\\Windows\\TEMP\\%" or Process.Path like r"%\\AppData\\Local\\Temp%") or (Process.CommandLine like r"%iex %" or Process.CommandLine like r"%Invoke-%" or Process.CommandLine like r"%DownloadString%" or Process.CommandLine like r"%http%" or Process.CommandLine like r"% -enc %" or Process.CommandLine like r"% -encodedcommand %" or Process.CommandLine like r"%FromBase64String%" or Process.CommandLine like r"% -decode %" or Process.CommandLine like r"% -w hidden%")))
GenericProperty1 = Parent.Path

[ActivityMonitoringRule]
# Detects possible payload obfuscation via the commandline
# Author: frack113, Nasreddine Bencherchali (Nextron Systems)
RuleName = Potential Dosfuscation Activity
EventType = Process.Start
Tag = proc-start-potential-dosfuscation-activity
RiskScore = 50
Query = (Process.CommandLine like r"%^^%" or Process.CommandLine like r"%^|^%" or Process.CommandLine like r"%,;,%" or Process.CommandLine like r"%;;;;%" or Process.CommandLine like r"%;; ;;%" or Process.CommandLine like r"%(,(,%" or Process.CommandLine like r"%\%COMSPEC:~%" or Process.CommandLine like r"% c^m^d%" or Process.CommandLine like r"%^c^m^d%" or Process.CommandLine like r"% c^md%" or Process.CommandLine like r"% cm^d%" or Process.CommandLine like r"%^cm^d%" or Process.CommandLine like r"% s^et %" or Process.CommandLine like r"% s^e^t %" or Process.CommandLine like r"% se^t %")

[ActivityMonitoringRule]
# Detects the execution of WMIC in order to get a list of firewall and antivirus products
# Author: Michael Haag, Florian Roth (Nextron Systems), juju4, oscd.community
RuleName = Potential Product Class Reconnaissance Via Wmic.EXE
EventType = Process.Start
Tag = proc-start-potential-product-class-reconnaissance-via-wmic.exe
RiskScore = 50
Query = ((Process.Path like r"%\\wmic.exe" or Process.Name == "wmic.exe") and (Process.CommandLine like r"%AntiVirusProduct%" or Process.CommandLine like r"%FirewallProduct%"))

[ActivityMonitoringRule]
# Detects usage of the "cipher" built-in utility in order to overwrite deleted data from disk.
# Adversaries may destroy data and files on specific systems or in large numbers on a network to interrupt availability to systems, services, and network resources.
# Data destruction is likely to render stored data irrecoverable by forensic techniques through overwriting files or data on local and remote drives
# Author: frack113
RuleName = Deleted Data Overwritten Via Cipher.EXE
EventType = Process.Start
Tag = proc-start-deleted-data-overwritten-via-cipher.exe
RiskScore = 50
Query = ((Process.Name == "CIPHER.EXE" or Process.Path like r"%\\cipher.exe") and Process.CommandLine like r"% /w:%")

[ActivityMonitoringRule]
# Detects a when net.exe is called with a password in the command line
# Author: Tim Shelton (HAWK.IO)
RuleName = Password Provided In Command Line Of Net.EXE
EventType = Process.Start
Tag = proc-start-password-provided-in-command-line-of-net.exe
RiskScore = 50
Query = ((((Process.Path like r"%\\net.exe" or Process.Path like r"%\\net1.exe") or Process.Name in ["net.exe", "net1.exe"]) and (Process.CommandLine like r"% use %" and Process.CommandLine like r"%:%\\\*" and Process.CommandLine like r"%/USER:% %")) and not ((Process.CommandLine like r"% ")))

[ActivityMonitoringRule]
# Detects execution of powershell scripts via Runscripthelper.exe
# Author: Victor Sergeev, oscd.community
RuleName = Suspicious Runscripthelper.exe
EventType = Process.Start
Tag = proc-start-suspicious-runscripthelper.exe
RiskScore = 50
Query = (Process.Path like r"%\\Runscripthelper.exe" and Process.CommandLine like r"%surfacecheck%")

[ActivityMonitoringRule]
# Detects weak passwords or often abused passwords (seen used by threat actors) via the CLI. An example would be a threat actor creating a new user via the net command and providing the password inline
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleName = Weak or Abused Passwords In CLI
EventType = Process.Start
Tag = proc-start-weak-or-abused-passwords-in-cli
RiskScore = 50
Query = (Process.CommandLine like r"%Asd123.aaaa%" or Process.CommandLine like r"%password123%" or Process.CommandLine like r"%123456789%" or Process.CommandLine like r"%P@ssw0rd!%")

[ActivityMonitoringRule]
# Detects execution of of Dxcap.exe
# Author: Beyu Denis, oscd.community, Nasreddine Bencherchali (Nextron Systems)
RuleName = Application Whitelisting Bypass via Dxcap.exe
EventType = Process.Start
Tag = proc-start-application-whitelisting-bypass-via-dxcap.exe
RiskScore = 50
Query = ((Process.Path like r"%\\DXCap.exe" or Process.Name == "DXCap.exe") and Process.CommandLine like r"% -c %")

[ActivityMonitoringRule]
# An adversary might use WMI to check if a certain remote service is running on a remote device.
# When the test completes, a service information will be displayed on the screen if it exists.
# A common feedback message is that "No instance(s) Available" if the service queried is not running.
# A common error message is "Node - (provided IP or default) ERROR Description =The RPC server is unavailable" if the provided remote host is unreachable
# Author: frack113, Nasreddine Bencherchali (Nextron Systems)
RuleName = Service Reconnaissance Via Wmic.EXE
EventType = Process.Start
Tag = proc-start-service-reconnaissance-via-wmic.exe
RiskScore = 50
Query = ((Process.Path like r"%\\WMIC.exe" or Process.Name == "wmic.exe") and Process.CommandLine like r"%service%")

[ActivityMonitoringRule]
# Detects execution of perl using the "-e"/"-E" flags. This is could be used as a way to launch a reverse shell or execute live perl code.
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleName = Perl Inline Command Execution
EventType = Process.Start
Tag = proc-start-perl-inline-command-execution
RiskScore = 50
Query = ((Process.Path like r"%\\perl.exe" or Process.Name == "perl.exe") and Process.CommandLine like r"% -e%")

[ActivityMonitoringRule]
# Detects the execution of Sysinternals ADExplorer with the "-snapshot" flag in order to save a local copy of the active directory database.
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleName = Active Directory Database Snapshot Via ADExplorer
EventType = Process.Start
Tag = proc-start-active-directory-database-snapshot-via-adexplorer
RiskScore = 50
Query = ((Process.Path like r"%\\ADExplorer.exe" or Process.Name == "AdExp") and Process.CommandLine like r"%snapshot%")

[ActivityMonitoringRule]
# Detects binaries that use the same name as legitimate sysinternals tools to evade detection
# Author: frack113
RuleName = Potential Binary Impersonating Sysinternals Tools
EventType = Process.Start
Tag = proc-start-potential-binary-impersonating-sysinternals-tools
RiskScore = 50
Query = ((Process.Path like r"%\\accesschk.exe" or Process.Path like r"%\\accesschk64.exe" or Process.Path like r"%\\AccessEnum.exe" or Process.Path like r"%\\ADExplorer.exe" or Process.Path like r"%\\ADExplorer64.exe" or Process.Path like r"%\\ADInsight.exe" or Process.Path like r"%\\ADInsight64.exe" or Process.Path like r"%\\adrestore.exe" or Process.Path like r"%\\adrestore64.exe" or Process.Path like r"%\\Autologon.exe" or Process.Path like r"%\\Autologon64.exe" or Process.Path like r"%\\Autoruns.exe" or Process.Path like r"%\\Autoruns64.exe" or Process.Path like r"%\\autorunsc.exe" or Process.Path like r"%\\autorunsc64.exe" or Process.Path like r"%\\Bginfo.exe" or Process.Path like r"%\\Bginfo64.exe" or Process.Path like r"%\\Cacheset.exe" or Process.Path like r"%\\Cacheset64.exe" or Process.Path like r"%\\Clockres.exe" or Process.Path like r"%\\Clockres64.exe" or Process.Path like r"%\\Contig.exe" or Process.Path like r"%\\Contig64.exe" or Process.Path like r"%\\Coreinfo.exe" or Process.Path like r"%\\Coreinfo64.exe" or Process.Path like r"%\\CPUSTRES.EXE" or Process.Path like r"%\\CPUSTRES64.EXE" or Process.Path like r"%\\ctrl2cap.exe" or Process.Path like r"%\\Dbgview.exe" or Process.Path like r"%\\dbgview64.exe" or Process.Path like r"%\\Desktops.exe" or Process.Path like r"%\\Desktops64.exe" or Process.Path like r"%\\disk2vhd.exe" or Process.Path like r"%\\disk2vhd64.exe" or Process.Path like r"%\\diskext.exe" or Process.Path like r"%\\diskext64.exe" or Process.Path like r"%\\Diskmon.exe" or Process.Path like r"%\\Diskmon64.exe" or Process.Path like r"%\\DiskView.exe" or Process.Path like r"%\\DiskView64.exe" or Process.Path like r"%\\du.exe" or Process.Path like r"%\\du64.exe" or Process.Path like r"%\\efsdump.exe" or Process.Path like r"%\\FindLinks.exe" or Process.Path like r"%\\FindLinks64.exe" or Process.Path like r"%\\handle.exe" or Process.Path like r"%\\handle64.exe" or Process.Path like r"%\\hex2dec.exe" or Process.Path like r"%\\hex2dec64.exe" or Process.Path like r"%\\junction.exe" or Process.Path like r"%\\junction64.exe" or Process.Path like r"%\\ldmdump.exe" or Process.Path like r"%\\listdlls.exe" or Process.Path like r"%\\listdlls64.exe" or Process.Path like r"%\\livekd.exe" or Process.Path like r"%\\livekd64.exe" or Process.Path like r"%\\loadOrd.exe" or Process.Path like r"%\\loadOrd64.exe" or Process.Path like r"%\\loadOrdC.exe" or Process.Path like r"%\\loadOrdC64.exe" or Process.Path like r"%\\logonsessions.exe" or Process.Path like r"%\\logonsessions64.exe" or Process.Path like r"%\\movefile.exe" or Process.Path like r"%\\movefile64.exe" or Process.Path like r"%\\notmyfault.exe" or Process.Path like r"%\\notmyfault64.exe" or Process.Path like r"%\\notmyfaultc.exe" or Process.Path like r"%\\notmyfaultc64.exe" or Process.Path like r"%\\ntfsinfo.exe" or Process.Path like r"%\\ntfsinfo64.exe" or Process.Path like r"%\\pendmoves.exe" or Process.Path like r"%\\pendmoves64.exe" or Process.Path like r"%\\pipelist.exe" or Process.Path like r"%\\pipelist64.exe" or Process.Path like r"%\\portmon.exe" or Process.Path like r"%\\procdump.exe" or Process.Path like r"%\\procdump64.exe" or Process.Path like r"%\\procexp.exe" or Process.Path like r"%\\procexp64.exe" or Process.Path like r"%\\Procmon.exe" or Process.Path like r"%\\Procmon64.exe" or Process.Path like r"%\\psExec.exe" or Process.Path like r"%\\psExec64.exe" or Process.Path like r"%\\psfile.exe" or Process.Path like r"%\\psfile64.exe" or Process.Path like r"%\\psGetsid.exe" or Process.Path like r"%\\psGetsid64.exe" or Process.Path like r"%\\psInfo.exe" or Process.Path like r"%\\psInfo64.exe" or Process.Path like r"%\\pskill.exe" or Process.Path like r"%\\pskill64.exe" or Process.Path like r"%\\pslist.exe" or Process.Path like r"%\\pslist64.exe" or Process.Path like r"%\\psLoggedon.exe" or Process.Path like r"%\\psLoggedon64.exe" or Process.Path like r"%\\psloglist.exe" or Process.Path like r"%\\psloglist64.exe" or Process.Path like r"%\\pspasswd.exe" or Process.Path like r"%\\pspasswd64.exe" or Process.Path like r"%\\psping.exe" or Process.Path like r"%\\psping64.exe" or Process.Path like r"%\\psService.exe" or Process.Path like r"%\\psService64.exe" or Process.Path like r"%\\psshutdown.exe" or Process.Path like r"%\\psshutdown64.exe" or Process.Path like r"%\\pssuspend.exe" or Process.Path like r"%\\pssuspend64.exe" or Process.Path like r"%\\RAMMap.exe" or Process.Path like r"%\\RDCMan.exe" or Process.Path like r"%\\RegDelNull.exe" or Process.Path like r"%\\RegDelNull64.exe" or Process.Path like r"%\\regjump.exe" or Process.Path like r"%\\ru.exe" or Process.Path like r"%\\ru64.exe" or Process.Path like r"%\\sdelete.exe" or Process.Path like r"%\\sdelete64.exe" or Process.Path like r"%\\ShareEnum.exe" or Process.Path like r"%\\ShareEnum64.exe" or Process.Path like r"%\\shellRunas.exe" or Process.Path like r"%\\sigcheck.exe" or Process.Path like r"%\\sigcheck64.exe" or Process.Path like r"%\\streams.exe" or Process.Path like r"%\\streams64.exe" or Process.Path like r"%\\strings.exe" or Process.Path like r"%\\strings64.exe" or Process.Path like r"%\\sync.exe" or Process.Path like r"%\\sync64.exe" or Process.Path like r"%\\Sysmon.exe" or Process.Path like r"%\\Sysmon64.exe" or Process.Path like r"%\\tcpvcon.exe" or Process.Path like r"%\\tcpvcon64.exe" or Process.Path like r"%\\tcpview.exe" or Process.Path like r"%\\tcpview64.exe" or Process.Path like r"%\\Testlimit.exe" or Process.Path like r"%\\Testlimit64.exe" or Process.Path like r"%\\vmmap.exe" or Process.Path like r"%\\vmmap64.exe" or Process.Path like r"%\\Volumeid.exe" or Process.Path like r"%\\Volumeid64.exe" or Process.Path like r"%\\whois.exe" or Process.Path like r"%\\whois64.exe" or Process.Path like r"%\\Winobj.exe" or Process.Path like r"%\\Winobj64.exe" or Process.Path like r"%\\ZoomIt.exe" or Process.Path like r"%\\ZoomIt64.exe") and not ((Process.Company in ["Sysinternals - www.sysinternals.com", "Sysinternals"]) or (Process.Company == '')))
GenericProperty1 = Process.Company

[ActivityMonitoringRule]
# Detects the presence of unicode characters which are homoglyphs, or identical in appearance, to ASCII letter characters.
# This is used as an obfuscation and masquerading techniques. Only "perfect" homoglyphs are included; these are characters that
# are indistinguishable from ASCII characters and thus may make excellent candidates for homoglyph attack characters.
# Author: Micah Babinski, @micahbabinski
RuleName = Potential Homoglyph Attack Using Lookalike Characters
EventType = Process.Start
Tag = proc-start-potential-homoglyph-attack-using-lookalike-characters
RiskScore = 50
Query = ((Process.CommandLine like r"%А%" or Process.CommandLine like r"%В%" or Process.CommandLine like r"%Е%" or Process.CommandLine like r"%К%" or Process.CommandLine like r"%М%" or Process.CommandLine like r"%Н%" or Process.CommandLine like r"%О%" or Process.CommandLine like r"%Р%" or Process.CommandLine like r"%С%" or Process.CommandLine like r"%Т%" or Process.CommandLine like r"%Х%" or Process.CommandLine like r"%Ѕ%" or Process.CommandLine like r"%І%" or Process.CommandLine like r"%Ј%" or Process.CommandLine like r"%Ү%" or Process.CommandLine like r"%Ӏ%" or Process.CommandLine like r"%Ԍ%" or Process.CommandLine like r"%Ԛ%" or Process.CommandLine like r"%Ԝ%" or Process.CommandLine like r"%Α%" or Process.CommandLine like r"%Β%" or Process.CommandLine like r"%Ε%" or Process.CommandLine like r"%Ζ%" or Process.CommandLine like r"%Η%" or Process.CommandLine like r"%Ι%" or Process.CommandLine like r"%Κ%" or Process.CommandLine like r"%Μ%" or Process.CommandLine like r"%Ν%" or Process.CommandLine like r"%Ο%" or Process.CommandLine like r"%Ρ%" or Process.CommandLine like r"%Τ%" or Process.CommandLine like r"%Υ%" or Process.CommandLine like r"%Χ%") or (Process.CommandLine like r"%а%" or Process.CommandLine like r"%е%" or Process.CommandLine like r"%о%" or Process.CommandLine like r"%р%" or Process.CommandLine like r"%с%" or Process.CommandLine like r"%х%" or Process.CommandLine like r"%ѕ%" or Process.CommandLine like r"%і%" or Process.CommandLine like r"%ӏ%" or Process.CommandLine like r"%ј%" or Process.CommandLine like r"%һ%" or Process.CommandLine like r"%ԁ%" or Process.CommandLine like r"%ԛ%" or Process.CommandLine like r"%ԝ%" or Process.CommandLine like r"%ο%"))

[ActivityMonitoringRule]
# Detects suspicious process run from unusual locations
# Author: juju4, Jonhnathan Ribeiro, oscd.community
RuleName = Suspicious Process Start Locations
EventType = Process.Start
Tag = proc-start-suspicious-process-start-locations
RiskScore = 50
Query = ((Process.Path like r"%:\\RECYCLER\\%" or Process.Path like r"%:\\SystemVolumeInformation\\%") or (Process.Path like r"C:\\Windows\\Tasks\\%" or Process.Path like r"C:\\Windows\\debug\\%" or Process.Path like r"C:\\Windows\\fonts\\%" or Process.Path like r"C:\\Windows\\help\\%" or Process.Path like r"C:\\Windows\\drivers\\%" or Process.Path like r"C:\\Windows\\addins\\%" or Process.Path like r"C:\\Windows\\cursors\\%" or Process.Path like r"C:\\Windows\\system32\\tasks\\%"))

[ActivityMonitoringRule]
# Detects shell spawned from Java host process, which could be a sign of exploitation (e.g. log4j exploitation)
# Author: Andreas Hunkeler (@Karneades), Nasreddine Bencherchali
RuleName = Shells Spawned by Java
EventType = Process.Start
Tag = proc-start-shells-spawned-by-java
RiskScore = 50
Query = ((Parent.Path like r"%\\java.exe" and (Process.Path like r"%\\cmd.exe" or Process.Path like r"%\\powershell.exe" or Process.Path like r"%\\pwsh.exe")) and not (Parent.Path like r"%build%" and Process.CommandLine like r"%build%"))
GenericProperty1 = Parent.Path

[ActivityMonitoringRule]
# Detects usage of the SysInternals Procdump utility
# Author: Florian Roth (Nextron Systems)
RuleName = Procdump Execution
EventType = Process.Start
Tag = proc-start-procdump-execution
RiskScore = 50
Query = (Process.Path like r"%\\procdump.exe" or Process.Path like r"%\\procdump64.exe")

[ActivityMonitoringRule]
# Detects potential DLL files being downloaded using the PowerShell Invoke-WebRequest cmdlet
# Author: Florian Roth (Nextron Systems), Hieu Tran
RuleName = Potential DLL File Download Via PowerShell Invoke-WebRequest
EventType = Process.Start
Tag = proc-start-potential-dll-file-download-via-powershell-invoke-webrequest
RiskScore = 50
Query = ((Process.CommandLine like r"%Invoke-WebRequest %" or Process.CommandLine like r"%IWR %") and Process.CommandLine like r"%http%" and Process.CommandLine like r"%OutFile%" and Process.CommandLine like r"%.dll%")

[ActivityMonitoringRule]
# The "AdPlus.exe" binary that is part of the Windows SDK can be used as a lolbin to dump process memory and execute arbitrary commands
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleName = Use of Adplus.exe
EventType = Process.Start
Tag = proc-start-use-of-adplus.exe
RiskScore = 50
Query = ((Process.Path like r"%\\adplus.exe" or Process.Name == "Adplus.exe") and (Process.CommandLine like r"% -hang %" or Process.CommandLine like r"% -pn %" or Process.CommandLine like r"% -pmn %" or Process.CommandLine like r"% -p %" or Process.CommandLine like r"% -po %" or Process.CommandLine like r"% -c %" or Process.CommandLine like r"% -sc %"))

[ActivityMonitoringRule]
# Detects using Rasautou.exe for loading arbitrary .DLL specified in -d option and executes the export specified in -p.
# Author: Julia Fomina, oscd.community
RuleName = DLL Execution via Rasautou.exe
EventType = Process.Start
Tag = proc-start-dll-execution-via-rasautou.exe
RiskScore = 50
Query = ((Process.Path like r"%\\rasautou.exe" or Process.Name == "rasdlui.exe") and (Process.CommandLine like r"% -d %" and Process.CommandLine like r"% -p %"))

[ActivityMonitoringRule]
# Detects usage of attrib.exe to hide files from users.
# Author: Sami Ruohonen
RuleName = Hiding Files with Attrib.exe
EventType = Process.Start
Tag = proc-start-hiding-files-with-attrib.exe
RiskScore = 50
Query = (((Process.Path like r"%\\attrib.exe" or Process.Name == "ATTRIB.EXE") and Process.CommandLine like r"% +h %") and not ((Process.CommandLine like r"%\\desktop.ini %") or (Parent.Path like r"%\\cmd.exe" and Process.CommandLine like r"+R +H +S +A \\\*.cui" and Parent.CommandLine like r"C:\\WINDOWS\\system32\\\*.bat")))
GenericProperty1 = Parent.Path
GenericProperty2 = Parent.CommandLine

[ActivityMonitoringRule]
# Detects the execution of a renamed "ftp.exe" binary based on the PE metadata fields
# Author: Victor Sergeev, oscd.community
RuleName = Renamed FTP.EXE Execution
EventType = Process.Start
Tag = proc-start-renamed-ftp.exe-execution
RiskScore = 50
Query = (Process.Name == "ftp.exe" and not (Process.Path like r"%\\ftp.exe"))

[ActivityMonitoringRule]
# A symbolic link is a type of file that contains a reference to another file.
# This is probably done to make sure that the ransomware is able to follow shortcuts on the machine in order to find the original file to encrypt
# Author: frack113
RuleName = Fsutil Behavior Set SymlinkEvaluation
EventType = Process.Start
Tag = proc-start-fsutil-behavior-set-symlinkevaluation
RiskScore = 50
Query = ((Process.Path like r"%\\fsutil.exe" or Process.Name == "fsutil.exe") and (Process.CommandLine like r"%behavior %" and Process.CommandLine like r"%set %" and Process.CommandLine like r"%SymlinkEvaluation%"))

[ActivityMonitoringRule]
# Detects modification addition to the 'TypedPaths' key in the user or admin registry via the commandline. Which might indicate persistence attempt
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleName = Persistence Via TypedPaths - CommandLine
EventType = Process.Start
Tag = proc-start-persistence-via-typedpaths-commandline
RiskScore = 50
Query = Process.CommandLine like r"%\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\TypedPaths%"

[ActivityMonitoringRule]
# Detects execution of ntdsutil.exe, which can be used for various attacks against the NTDS database (NTDS.DIT)
# Author: Thomas Patzke
RuleName = Invocation of Active Directory Diagnostic Tool (ntdsutil.exe)
EventType = Process.Start
Tag = proc-start-invocation-of-active-directory-diagnostic-tool-(ntdsutil.exe)
RiskScore = 50
Query = Process.Path like r"%\\ntdsutil.exe"

[ActivityMonitoringRule]
# Detection of sc.exe utility adding a new service with special permission which hides that service.
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleName = Service Security Descriptor Tampering Via Sc.EXE
EventType = Process.Start
Tag = proc-start-service-security-descriptor-tampering-via-sc.exe
RiskScore = 50
Query = ((Process.Path like r"%\\sc.exe" or Process.Name == "sc.exe") and Process.CommandLine like r"%sdset%")

[ActivityMonitoringRule]
# Detects the execution of "Ldifde.exe" with the import flag "-i". The can be abused to include HTTP-based arguments which will allow the arbitrary download of files from a remote server.
# Author: @gott_cyber
RuleName = Import LDAP Data Interchange Format File Via Ldifde.EXE
EventType = Process.Start
Tag = proc-start-import-ldap-data-interchange-format-file-via-ldifde.exe
RiskScore = 50
Query = ((Process.Path like r"%\\ldifde.exe" or Process.Name == "ldifde.exe") and (Process.CommandLine like r"%-i%" and Process.CommandLine like r"%-f%"))

[ActivityMonitoringRule]
# Detects the presence of the keywords "Wscript", "Shell" and "Run" in the command, which could indicate a suspicious activity
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleName = Wscript Shell Run In CommandLine
EventType = Process.Start
Tag = proc-start-wscript-shell-run-in-commandline
RiskScore = 50
Query = (Process.CommandLine like r"%Wscript.%" and Process.CommandLine like r"%.Shell%" and Process.CommandLine like r"%.Run%")

[ActivityMonitoringRule]
# Detects the usage of "hh.exe" to execute ".chm" files.
# Author: E.M. Anhaus (originally from Atomic Blue Detections, Dan Beavin), oscd.community
RuleName = HH.EXE Execution
EventType = Process.Start
Tag = proc-start-hh.exe-execution
RiskScore = 50
Query = ((Process.Name == "HH.exe" or Process.Path like r"%\\hh.exe") and Process.CommandLine like r"%.chm%")

[ActivityMonitoringRule]
# Detects the execution of the certutil with the "exportPFX" flag which allows the utility to export certificates.
# Author: Florian Roth (Nextron Systems), Jonhnathan Ribeiro, oscd.community, Nasreddine Bencherchali (Nextron Systems)
RuleName = Certificate Exported Via Certutil.EXE
EventType = Process.Start
Tag = proc-start-certificate-exported-via-certutil.exe
RiskScore = 50
Query = ((Process.Path like r"%\\certutil.exe" or Process.Name == "CertUtil.exe") and (Process.CommandLine like r"%-exportPFX %" or Process.CommandLine like r"%/exportPFX %"))

[ActivityMonitoringRule]
# Detects the use of Jlaive to execute assemblies in a copied PowerShell
# Author: Jose Luis Sanchez Martinez (@Joseliyo_Jstnk)
RuleName = HackTool - Jlaive In-Memory Assembly Execution
EventType = Process.Start
Tag = proc-start-hacktool-jlaive-in-memory-assembly-execution
RiskScore = 50
Query = ((Parent.Path like r"%\\cmd.exe" and Parent.CommandLine like r"%.bat") and ((Process.Path like r"%\\xcopy.exe" and Process.CommandLine like r"%powershell.exe%" and Process.CommandLine like r"%.bat.exe%") or (Process.Path like r"%\\xcopy.exe" and Process.CommandLine like r"%pwsh.exe%" and Process.CommandLine like r"%.bat.exe%") or (Process.Path like r"%\\attrib.exe" and Process.CommandLine like r"%+s%" and Process.CommandLine like r"%+h%" and Process.CommandLine like r"%.bat.exe%")))
GenericProperty1 = Parent.Path
GenericProperty2 = Parent.CommandLine

[ActivityMonitoringRule]
# Detects execution of the Notepad++ updater (gup) to launch other commands or executables
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleName = Arbitrary Binary Execution Using GUP Utility
EventType = Process.Start
Tag = proc-start-arbitrary-binary-execution-using-gup-utility
RiskScore = 50
Query = ((Parent.Path like r"%\\gup.exe" and Process.Path like r"%\\explorer.exe") and not ((Process.Path like r"%\\explorer.exe" and Process.CommandLine like r"%\\Notepad++\\notepad++.exe%") or (Parent.Path like r"%\\Notepad++\\updater\\%") or (Process.CommandLine == '')))
GenericProperty1 = Parent.Path

[ActivityMonitoringRule]
# Detects usage of Sysinternals PsSuspend which can be abused to suspend critical processes
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleName = Sysinternals PsSuspend Execution
EventType = Process.Start
Tag = proc-start-sysinternals-pssuspend-execution
RiskScore = 50
Query = (Process.Name == "pssuspend.exe" or (Process.Path like r"%\\pssuspend.exe" or Process.Path like r"%\\pssuspend64.exe"))

[ActivityMonitoringRule]
# Detect usage of the "runexehelper.exe" binary as a proxy to launch other programs
# Author: frack113
RuleName = Lolbin Runexehelper Use As Proxy
EventType = Process.Start
Tag = proc-start-lolbin-runexehelper-use-as-proxy
RiskScore = 50
Query = Parent.Path like r"%\\runexehelper.exe"
GenericProperty1 = Parent.Path

[ActivityMonitoringRule]
# Detects Obfuscated Powershell via COMPRESS OBFUSCATION
# Author: Timur Zinniatullin, oscd.community
RuleName = Invoke-Obfuscation COMPRESS OBFUSCATION
EventType = Process.Start
Tag = proc-start-invoke-obfuscation-compress-obfuscation
RiskScore = 50
Query = (Process.CommandLine like r"%new-object%" and Process.CommandLine like r"%text.encoding]::ascii%" and (Process.CommandLine like r"%system.io.compression.deflatestream%" or Process.CommandLine like r"%system.io.streamreader%" or Process.CommandLine like r"%readtoend(%"))

[ActivityMonitoringRule]
# Once established within a system or network, an adversary may use automated techniques for collecting internal data.
# Author: frack113
RuleName = Recon Information for Export with Command Prompt
EventType = Process.Start
Tag = proc-start-recon-information-for-export-with-command-prompt
RiskScore = 50
Query = (((Process.Path like r"%\\tree.com" or Process.Path like r"%\\WMIC.exe" or Process.Path like r"%\\doskey.exe" or Process.Path like r"%\\sc.exe") or Process.Name in ["wmic.exe", "DOSKEY.EXE", "sc.exe"]) and (Parent.CommandLine like r"% > \%TEMP\%\\%" or Parent.CommandLine like r"% > \%TMP\%\\%"))
GenericProperty1 = Parent.CommandLine

[ActivityMonitoringRule]
# Detects usage of bitsadmin downloading a file to uncommon target folder
# Author: Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)
RuleName = File Download Via Bitsadmin To An Uncommon Target Folder
EventType = Process.Start
Tag = proc-start-file-download-via-bitsadmin-to-an-uncommon-target-folder
RiskScore = 50
Query = ((Process.Path like r"%\\bitsadmin.exe" or Process.Name == "bitsadmin.exe") and (Process.CommandLine like r"% /transfer %" or Process.CommandLine like r"% /create %" or Process.CommandLine like r"% /addfile %") and (Process.CommandLine like r"%\%AppData\%%" or Process.CommandLine like r"%\%temp\%%" or Process.CommandLine like r"%\%tmp\%%" or Process.CommandLine like r"%\\AppData\\Local\\%" or Process.CommandLine like r"%C:\\Windows\\Temp\\%"))

[ActivityMonitoringRule]
# Adversaries can use the built-in expand utility to decompress cab files as seen in recent Iranian MeteorExpress attack
# Author: Bhabesh Raj
RuleName = Suspicious Cabinet File Expansion
EventType = Process.Start
Tag = proc-start-suspicious-cabinet-file-expansion
RiskScore = 50
Query = ((Process.Path like r"%\\expand.exe" and (Process.CommandLine like r"%.cab%" or Process.CommandLine like r"%/F:%" or Process.CommandLine like r"%-F:%" or Process.CommandLine like r"%C:\\ProgramData\\%" or Process.CommandLine like r"%C:\\Public\\%" or Process.CommandLine like r"%\\AppData\\Local\\Temp\\%" or Process.CommandLine like r"%\\AppData\\Roaming\\Temp\\%")) and not ((Parent.Path like r"C:\\Program Files (x86)\\Dell\\UpdateService\\ServiceShell.exe" and Process.CommandLine like r"%C:\\ProgramData\\Dell\\UpdateService\\Temp\\%")))
GenericProperty1 = Parent.Path

[ActivityMonitoringRule]
# Detects the execution of "ldifde.exe" in order to export organizational Active Directory structure.
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleName = Active Directory Structure Export Via Ldifde.EXE
EventType = Process.Start
Tag = proc-start-active-directory-structure-export-via-ldifde.exe
RiskScore = 50
Query = (((Process.Path like r"%\\ldifde.exe" or Process.Name == "ldifde.exe") and Process.CommandLine like r"%-f%") and not ((Process.CommandLine like r"% -i%")))

[ActivityMonitoringRule]
# Detects execition of commands and binaries from the context of The program compatibility assistant (Pcalua.exe). This can be used as a LOLBIN in order to bypass application whitelisting.
# Author: Nasreddine Bencherchali (Nextron Systems), E.M. Anhaus (originally from Atomic Blue Detections, Endgame), oscd.community
RuleName = Use of Pcalua For Execution
EventType = Process.Start
Tag = proc-start-use-of-pcalua-for-execution
RiskScore = 50
Query = (Process.Path like r"%\\pcalua.exe" and Process.CommandLine like r"% -a%")

[ActivityMonitoringRule]
# Detects execution of the SharpLDAPmonitor. Which can monitor the creation, deletion and changes to LDAP objects.
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleName = HackTool - SharpLDAPmonitor Execution
EventType = Process.Start
Tag = proc-start-hacktool-sharpldapmonitor-execution
RiskScore = 50
Query = ((Process.Path like r"%\\SharpLDAPmonitor.exe" or Process.Name == "SharpLDAPmonitor.exe") or (Process.CommandLine like r"%/user:%" and Process.CommandLine like r"%/pass:%" and Process.CommandLine like r"%/dcip:%"))

[ActivityMonitoringRule]
# Detects cases in which a user uses the built-in Windows utility gpresult to display the Resultant Set of Policy (RSoP) information
# Author: frack113
RuleName = Gpresult Display Group Policy Information
EventType = Process.Start
Tag = proc-start-gpresult-display-group-policy-information
RiskScore = 50
Query = (Process.Path like r"%\\gpresult.exe" and (Process.CommandLine like r"%/z%" or Process.CommandLine like r"%/v%"))

[ActivityMonitoringRule]
# Detects the execution of certutil with either the "decode" or "decodehex" flags to decode base64 or hex encoded files. This can be abused by attackers to decode an encoded payload before execution
# Author: Florian Roth (Nextron Systems), Jonhnathan Ribeiro, oscd.community
RuleName = File Decoded From Base64/Hex Via Certutil.EXE
EventType = Process.Start
Tag = proc-start-file-decoded-from-base64/hex-via-certutil.exe
RiskScore = 50
Query = ((Process.Path like r"%\\certutil.exe" or Process.Name == "CertUtil.exe") and (Process.CommandLine like r"%-decode %" or Process.CommandLine like r"%/decode %" or Process.CommandLine like r"%-decodehex %" or Process.CommandLine like r"%/decodehex %"))

[ActivityMonitoringRule]
# Detects the use of various web request commands with commandline tools and Windows PowerShell cmdlets (including aliases) via CommandLine
# Author: James Pemberton / @4A616D6573, Endgame, JHasenbusch, oscd.community, Austin Songer @austinsonger
RuleName = Usage Of Web Request Commands And Cmdlets
EventType = Process.Start
Tag = proc-start-usage-of-web-request-commands-and-cmdlets
RiskScore = 50
Query = (Process.CommandLine like r"%[System.Net.WebRequest]::create%" or Process.CommandLine like r"%curl %" or Process.CommandLine like r"%Invoke-RestMethod%" or Process.CommandLine like r"%Invoke-WebRequest%" or Process.CommandLine like r"%iwr %" or Process.CommandLine like r"%Net.WebClient%" or Process.CommandLine like r"%Resume-BitsTransfer%" or Process.CommandLine like r"%Start-BitsTransfer%" or Process.CommandLine like r"%wget %" or Process.CommandLine like r"%WinHttp.WinHttpRequest%")

[ActivityMonitoringRule]
# Detects using Rpcping.exe to send a RPC test connection to the target server (-s) and force the NTLM hash to be sent in the process.
# Author: Julia Fomina, oscd.community
RuleName = Capture Credentials with Rpcping.exe
EventType = Process.Start
Tag = proc-start-capture-credentials-with-rpcping.exe
RiskScore = 50
Query = ((Process.Path like r"%\\rpcping.exe" and (Process.CommandLine like r"%-s%" or Process.CommandLine like r"%/s%")) and ((Process.CommandLine like r"%-u%" and Process.CommandLine like r"%NTLM%") or (Process.CommandLine like r"%/u%" and Process.CommandLine like r"%NTLM%") or (Process.CommandLine like r"%-t%" and Process.CommandLine like r"%ncacn\_np%") or (Process.CommandLine like r"%/t%" and Process.CommandLine like r"%ncacn\_np%")))

[ActivityMonitoringRule]
# Detects manual execution of the "Microsoft Compatibility Appraiser" task via schtasks.
# In order to trigger persistence stored in the "\AppCompatFlags\TelemetryController" registry key.
# Author: Sreeman
RuleName = Potential Persistence Via Microsoft Compatibility Appraiser
EventType = Process.Start
Tag = proc-start-potential-persistence-via-microsoft-compatibility-appraiser
RiskScore = 50
Query = ((Process.Path like r"%\\schtasks.exe" or Process.Name == "schtasks.exe") and (Process.CommandLine like r"%run %" and Process.CommandLine like r"%\\Application Experience\\Microsoft Compatibility Appraiser%"))

[ActivityMonitoringRule]
# Detects the execution of CustomShellHost binary where the child isn't located in 'C:\Windows\explorer.exe'
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleName = Suspicious CustomShellHost Execution
EventType = Process.Start
Tag = proc-start-suspicious-customshellhost-execution
RiskScore = 50
Query = (Parent.Path like r"%\\CustomShellHost.exe" and not (Process.Path like r"C:\\Windows\\explorer.exe"))
GenericProperty1 = Parent.Path

[ActivityMonitoringRule]
# Detects creation of a scheduled task with a GUID like name
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleName = Suspicious Scheduled Task Name As GUID
EventType = Process.Start
Tag = proc-start-suspicious-scheduled-task-name-as-guid
RiskScore = 50
Query = (Process.Path like r"%\\schtasks.exe" and Process.CommandLine like r"%/Create %" and (Process.CommandLine like r"%/TN \"{%" or Process.CommandLine like r"%/TN '{%" or Process.CommandLine like r"%/TN {%") and (Process.CommandLine like r"%}\"%" or Process.CommandLine like r"%}'%" or Process.CommandLine like r"%} %"))

[ActivityMonitoringRule]
# Detects direct modification of autostart extensibility point (ASEP) in registry using reg.exe.
# Author: Victor Sergeev, Daniil Yugoslavskiy, oscd.community
RuleName = Direct Autorun Keys Modification
EventType = Process.Start
Tag = proc-start-direct-autorun-keys-modification
RiskScore = 50
Query = (Process.Path like r"%\\reg.exe" and Process.CommandLine like r"%add%" and (Process.CommandLine like r"%\\software\\Microsoft\\Windows\\CurrentVersion\\Run%" or Process.CommandLine like r"%\\software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Userinit%" or Process.CommandLine like r"%\\software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Shell%" or Process.CommandLine like r"%\\software\\Microsoft\\Windows NT\\CurrentVersion\\Windows%" or Process.CommandLine like r"%\\software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders%" or Process.CommandLine like r"%\\system\\CurrentControlSet\\Control\\SafeBoot\\AlternateShell%"))

[ActivityMonitoringRule]
# Detects when verclsid.exe is used to run COM object via GUID
# Author: Victor Sergeev, oscd.community
RuleName = Verclsid.exe Runs COM Object
EventType = Process.Start
Tag = proc-start-verclsid.exe-runs-com-object
RiskScore = 50
Query = ((Process.Path like r"%\\verclsid.exe" or Process.Name == "verclsid.exe") and (Process.CommandLine like r"%/S%" and Process.CommandLine like r"%/C%"))

[ActivityMonitoringRule]
# An attacker may execute an application as a SCR File using rundll32.exe desk.cpl,InstallScreenSaver
# Author: Christopher Peacock @securepeacock, SCYTHE @scythe_io, TactiKoolSec
RuleName = Rundll32 InstallScreenSaver Execution
EventType = Process.Start
Tag = proc-start-rundll32-installscreensaver-execution
RiskScore = 50
Query = ((Process.Path like r"%\\rundll32.exe" or Process.Name == "RUNDLL32.EXE") and Process.CommandLine like r"%InstallScreenSaver%")

[ActivityMonitoringRule]
# Detects piping the password to an anydesk instance via CMD and the '--set-password' flag.
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleName = Remote Access Tool - AnyDesk Piped Password Via CLI
EventType = Process.Start
Tag = proc-start-remote-access-tool-anydesk-piped-password-via-cli
RiskScore = 50
Query = (Process.CommandLine like r"%/c %" and Process.CommandLine like r"%echo %" and Process.CommandLine like r"%.exe --set-password%")

[ActivityMonitoringRule]
# Detects suspicious execution of 'Powercfg.exe' to change lock screen timeout
# Author: frack113
RuleName = Suspicious Powercfg Execution To Change Lock Screen Timeout
EventType = Process.Start
Tag = proc-start-suspicious-powercfg-execution-to-change-lock-screen-timeout
RiskScore = 50
Query = ((Process.Path like r"%\\powercfg.exe" or Process.Name == "PowerCfg.exe") and ((Process.CommandLine like r"%/setacvalueindex %" and Process.CommandLine like r"%SCHEME\_CURRENT%" and Process.CommandLine like r"%SUB\_VIDEO%" and Process.CommandLine like r"%VIDEOCONLOCK%") or (Process.CommandLine like r"%-change %" and Process.CommandLine like r"%-standby-timeout-%")))

[ActivityMonitoringRule]
# Detects MsiExec loading a DLL and calling its DllUnregisterServer function
# Author: frack113
RuleName = DllUnregisterServer Function Call Via Msiexec.EXE
EventType = Process.Start
Tag = proc-start-dllunregisterserver-function-call-via-msiexec.exe
RiskScore = 50
Query = ((Process.Path like r"%\\msiexec.exe" or Process.Name like r"\\msiexec.exe") and (Process.CommandLine like r"% /z %" or Process.CommandLine like r"% -z %") and Process.CommandLine like r"%.dll%")

[ActivityMonitoringRule]
# Detects uncommon or suspicious child processes spawning from a VsCode "code.exe" process. This could indicate an attempt of persistence via VsCode tasks or terminal profiles.
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleName = VsCode Child Process Anomaly
EventType = Process.Start
Tag = proc-start-vscode-child-process-anomaly
RiskScore = 50
Query = (Parent.Path like r"%\\code.exe" and ((Process.Path like r"%\\calc.exe" or Process.Path like r"%\\regsvr32.exe" or Process.Path like r"%\\rundll32.exe" or Process.Path like r"%\\cscript.exe" or Process.Path like r"%\\wscript.exe") or ((Process.Path like r"%\\powershell.exe" or Process.Path like r"%\\pwsh.exe" or Process.Path like r"%\\cmd.exe") and (Process.CommandLine like r"%Invoke-Expressions%" or Process.CommandLine like r"%IEX%" or Process.CommandLine like r"%Invoke-Command%" or Process.CommandLine like r"%ICM%" or Process.CommandLine like r"%DownloadString%" or Process.CommandLine like r"%rundll32%" or Process.CommandLine like r"%regsvr32%" or Process.CommandLine like r"%wscript%" or Process.CommandLine like r"%cscript%")) or (Process.Path like r"%C:\\Users\\Public\\%" or Process.Path like r"%C:\\Windows\\Temp\\%" or Process.Path like r"%C:\\Temp\\%")))
GenericProperty1 = Parent.Path

[ActivityMonitoringRule]
# Detects the execution of WMIC to query information on a remote system
# Author: frack113, Nasreddine Bencherchali (Nextron Systems)
RuleName = WMIC Remote Command Execution
EventType = Process.Start
Tag = proc-start-wmic-remote-command-execution
RiskScore = 50
Query = (((Process.Path like r"%\\WMIC.exe" or Process.Name == "wmic.exe") and Process.CommandLine like r"%/node:%") and not (((Process.CommandLine like r"%/node:127.0.0.1 %" or Process.CommandLine like r"%/node:localhost %"))))

[ActivityMonitoringRule]
# Detects potential use of an SSH utility to establish RDP over a reverse SSH Tunnel. This can be used by attackers to enable routing of network packets that would otherwise not reach their intended destination.
# Author: Tim Rauch
RuleName = Potential Remote Desktop Tunneling
EventType = Process.Start
Tag = proc-start-potential-remote-desktop-tunneling
RiskScore = 50
Query = (Process.CommandLine like r"%:3389%" and (Process.CommandLine like r"% -L %" or Process.CommandLine like r"% -P %" or Process.CommandLine like r"% -R %" or Process.CommandLine like r"% -pw %" or Process.CommandLine like r"% -ssh %"))

[ActivityMonitoringRule]
# Detects possible search for office tokens via CLI by looking for the string "eyJ0eX". This string is used as an anchor to look for the start of the JWT token used by office and similar apps.
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleName = Suspicious Office Token Search Via CLI
EventType = Process.Start
Tag = proc-start-suspicious-office-token-search-via-cli
RiskScore = 50
Query = (Process.CommandLine like r"%eyJ0eXAiOi%" or Process.CommandLine like r"% eyJ0eX%" or Process.CommandLine like r"% \"eyJ0eX\"%" or Process.CommandLine like r"% 'eyJ0eX'%")

[ActivityMonitoringRule]
# dotnet.exe will execute any DLL and execute unsigned code
# Author: Beyu Denis, oscd.community
RuleName = Dotnet.exe Exec Dll and Execute Unsigned Code LOLBIN
EventType = Process.Start
Tag = proc-start-dotnet.exe-exec-dll-and-execute-unsigned-code-lolbin
RiskScore = 50
Query = ((Process.Path like r"%\\dotnet.exe" or Process.Name == ".NET Host") and (Process.CommandLine like r"%.dll" or Process.CommandLine like r"%.csproj"))

[ActivityMonitoringRule]
# Detects usage of the "wusa.exe" (Windows Update Standalone Installer) utility to extract cab using the "/extract" argument which is not longer supported. This could indicate an attacker using an old technique
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleName = Wusa Extracting Cab Files
EventType = Process.Start
Tag = proc-start-wusa-extracting-cab-files
RiskScore = 50
Query = (Process.Path like r"%\\wusa.exe" and Process.CommandLine like r"%/extract:%")

[ActivityMonitoringRule]
# Detects usage of "ProtocolHandler" to download files. Downloaded files will be located in the cache folder (for example - %LOCALAPPDATA%\Microsoft\Windows\INetCache\IE)
# Author: frack113
RuleName = File Download Using ProtocolHandler.exe
EventType = Process.Start
Tag = proc-start-file-download-using-protocolhandler.exe
RiskScore = 50
Query = ((Process.Path like r"%\\protocolhandler.exe" or Process.Name == "ProtocolHandler.exe") and ((Process.CommandLine like r"%\"ms-word%" and Process.CommandLine like r"%.docx\"%") or Process.CommandLine like r"% http%"))

[ActivityMonitoringRule]
# The FSharp Interpreters, FsiAnyCpu.exe and FSi.exe, can be used for AWL bypass and is listed in Microsoft recommended block rules.
# Author: Christopher Peacock @SecurePeacock, SCYTHE @scythe_io
RuleName = Use of FSharp Interpreters
EventType = Process.Start
Tag = proc-start-use-of-fsharp-interpreters
RiskScore = 50
Query = (Process.Path like r"%\\fsianycpu.exe" or Process.Name == "fsianycpu.exe" or Process.Path like r"%\\fsi.exe" or Process.Name == "fsi.exe")

[ActivityMonitoringRule]
# Detects the execution of wmic with the "qfe" flag in order to obtain information about installed hotfix updates on the system. This is often used by pentester and attacker enumeration scripts
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleName = Windows Hotfix Updates Reconnaissance Via Wmic.EXE
EventType = Process.Start
Tag = proc-start-windows-hotfix-updates-reconnaissance-via-wmic.exe
RiskScore = 50
Query = ((Process.Name == "wmic.exe" or Process.Path like r"%\\WMIC.exe") and Process.CommandLine like r"% qfe%")

[ActivityMonitoringRule]
# Detects the execution of certutil with certain flags that allow the utility to download files.
# Author: Florian Roth (Nextron Systems), Jonhnathan Ribeiro, oscd.community, Nasreddine Bencherchali (Nextron Systems)
RuleName = Suspicious Download Via Certutil.EXE
EventType = Process.Start
Tag = proc-start-suspicious-download-via-certutil.exe
RiskScore = 50
Query = ((Process.Path like r"%\\certutil.exe" or Process.Name == "CertUtil.exe") and (Process.CommandLine like r"%urlcache %" or Process.CommandLine like r"%verifyctl %") and Process.CommandLine like r"%http%")

[ActivityMonitoringRule]
# Detects suspicious process related to rasdial.exe
# Author: juju4
RuleName = Suspicious RASdial Activity
EventType = Process.Start
Tag = proc-start-suspicious-rasdial-activity
RiskScore = 50
Query = Process.Path like r"%rasdial.exe"

[ActivityMonitoringRule]
# Detects the use of the PowerShell "Set-Service" cmdlet to change the startup type of a service to "disabled" or "manual"
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleName = Service StartupType Change Via PowerShell Set-Service
EventType = Process.Start
Tag = proc-start-service-startuptype-change-via-powershell-set-service
RiskScore = 50
Query = ((Process.Path like r"%\\powershell.exe" or Process.Name == "PowerShell.EXE") and (Process.CommandLine like r"%Set-Service%" and Process.CommandLine like r"%-StartupType%" and (Process.CommandLine like r"%Disabled%" or Process.CommandLine like r"%Manual%")))

[ActivityMonitoringRule]
# Adversaries may abuse msiexec.exe to proxy the execution of malicious payloads
# Author: frack113
RuleName = Suspicious MsiExec Embedding Parent
EventType = Process.Start
Tag = proc-start-suspicious-msiexec-embedding-parent
RiskScore = 50
Query = (((Process.Path like r"%\\powershell.exe" or Process.Path like r"%\\pwsh.exe" or Process.Path like r"%\\cmd.exe") and Parent.CommandLine like r"%MsiExec.exe%" and Parent.CommandLine like r"%-Embedding %") and not ((Process.Path like r"%:\\Windows\\System32\\cmd.exe" and Process.CommandLine like r"%C:\\Program Files\\SplunkUniversalForwarder\\bin\\%") or (Process.CommandLine like r"%\\DismFoDInstall.cmd%" or Parent.CommandLine like r"%\\MsiExec.exe -Embedding %" and Parent.CommandLine like r"%Global\\MSI0000%")))
GenericProperty1 = Parent.CommandLine

[ActivityMonitoringRule]
# Detects usage of the "Import-Module" cmdlet to load the "Microsoft.ActiveDirectory.Management.dl" DLL. Which is often used by attackers to perform AD enumeration.
# Author: frack113
RuleName = Potential Active Directory Enumeration Using AD Module - ProcCreation
EventType = Process.Start
Tag = proc-start-potential-active-directory-enumeration-using-ad-module-proccreation
RiskScore = 50
Query = (((Process.Path like r"%\\powershell.exe" or Process.Path like r"%\\pwsh.exe") or Process.Name in ["PowerShell.EXE", "pwsh.dll"]) and (Process.CommandLine like r"%Import-Module %" or Process.CommandLine like r"%ipmo %") and Process.CommandLine like r"%Microsoft.ActiveDirectory.Management.dll%")

[ActivityMonitoringRule]
# Detects when the Console Window Host (conhost.exe) process is spawned by an uncommon parent process, which could be indicative of potential code injection activity.
# Author: Tim Rauch
RuleName = Conhost Spawned By Uncommon Parent Process
EventType = Process.Start
Tag = proc-start-conhost-spawned-by-uncommon-parent-process
RiskScore = 50
Query = (((Process.Path like r"%\\conhost.exe" and (Parent.Path like r"%\\explorer.exe" or Parent.Path like r"%\\lsass.exe" or Parent.Path like r"%\\regsvr32.exe" or Parent.Path like r"%\\rundll32.exe" or Parent.Path like r"%\\services.exe" or Parent.Path like r"%\\smss.exe" or Parent.Path like r"%\\spoolsv.exe" or Parent.Path like r"%\\svchost.exe" or Parent.Path like r"%\\userinit.exe" or Parent.Path like r"%\\wininit.exe" or Parent.Path like r"%\\winlogon.exe")) and not (((Parent.CommandLine like r"%-k apphost -s AppHostSvc%" or Parent.CommandLine like r"%-k imgsvc%" or Parent.CommandLine like r"%-k localService -p -s RemoteRegistry%" or Parent.CommandLine like r"%-k LocalSystemNetworkRestricted -p -s NgcSvc%" or Parent.CommandLine like r"%-k NetSvcs -p -s NcaSvc%" or Parent.CommandLine like r"%-k netsvcs -p -s NetSetupSvc%" or Parent.CommandLine like r"%-k netsvcs -p -s wlidsvc%" or Parent.CommandLine like r"%-k NetworkService -p -s DoSvc%" or Parent.CommandLine like r"%-k wsappx -p -s AppXSvc%" or Parent.CommandLine like r"%-k wsappx -p -s ClipSVC%")))) and not (((Parent.CommandLine like r"%C:\\Program Files (x86)\\Dropbox\\Client\\%" or Parent.CommandLine like r"%C:\\Program Files\\Dropbox\\Client\\%"))))
GenericProperty1 = Parent.Path
GenericProperty2 = Parent.CommandLine

[ActivityMonitoringRule]
# Detects suspicious IIS native-code module installations via command line
# Author: Florian Roth (Nextron Systems)
RuleName = IIS Native-Code Module Command Line Installation
EventType = Process.Start
Tag = proc-start-iis-native-code-module-command-line-installation
RiskScore = 50
Query = (((Process.Path like r"%\\appcmd.exe" or Process.Name == "appcmd.exe") and (Process.CommandLine like r"%install%" and Process.CommandLine like r"%module%" and (Process.CommandLine like r"%/name:%" or Process.CommandLine like r"%-name:%"))) and not ((Parent.Path like r"C:\\Windows\\System32\\inetsrv\\iissetup.exe")))
GenericProperty1 = Parent.Path

[ActivityMonitoringRule]
# Detects the use of "DumpMinitool.exe" a tool that allows the dump of process memory via the use of the "MiniDumpWriteDump"
# Author: Nasreddine Bencherchali (Nextron Systems), Florian Roth (Nextron Systems)
RuleName = DumpMinitool Execution
EventType = Process.Start
Tag = proc-start-dumpminitool-execution
RiskScore = 50
Query = (((Process.Path like r"%\\DumpMinitool.exe" or Process.Path like r"%\\DumpMinitool.x86.exe" or Process.Path like r"%\\DumpMinitool.arm64.exe") or Process.Name in ["DumpMinitool.exe", "DumpMinitool.x86.exe", "DumpMinitool.arm64.exe"]) and (Process.CommandLine like r"% Full%" or Process.CommandLine like r"% Mini%" or Process.CommandLine like r"% WithHeap%"))

[ActivityMonitoringRule]
# Application Virtualization Utility is included with Microsoft Office. We are able to abuse "AppVLP" to execute shell commands.
# Normally, this binary is used for Application Virtualization, but we can use it as an abuse binary to circumvent the ASR file path rule folder
# or to mark a file as a system file.
# Author: Sreeman
RuleName = Using AppVLP To Circumvent ASR File Path Rule
EventType = Process.Start
Tag = proc-start-using-appvlp-to-circumvent-asr-file-path-rule
RiskScore = 50
Query = (Parent.Path like r"%\\appvlp.exe" and not ((Process.Path like r"%\\msoasb.exe" or Process.Path like r"%\\rundll32.exe")))
GenericProperty1 = Parent.Path

[ActivityMonitoringRule]
# Detects suspicious command line reg.exe tool adding key to RUN key in Registry
# Author: Florian Roth (Nextron Systems)
RuleName = Potential Persistence Attempt Via Run Keys Using Reg.EXE
EventType = Process.Start
Tag = proc-start-potential-persistence-attempt-via-run-keys-using-reg.exe
RiskScore = 50
Query = (Process.CommandLine like r"%reg%" and Process.CommandLine like r"% ADD %" and Process.CommandLine like r"%Software\\Microsoft\\Windows\\CurrentVersion\\Run%")

[ActivityMonitoringRule]
# Detects the execution of DeviceCredentialDeployment to hide a process from view
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleName = DeviceCredentialDeployment Execution
EventType = Process.Start
Tag = proc-start-devicecredentialdeployment-execution
RiskScore = 50
Query = Process.Path like r"%\\DeviceCredentialDeployment.exe"

[ActivityMonitoringRule]
# Detects usage of Dsacls to grant over permissive permissions
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleName = Potentially Over Permissive Permissions Granted Using Dsacls.EXE
EventType = Process.Start
Tag = proc-start-potentially-over-permissive-permissions-granted-using-dsacls.exe
RiskScore = 50
Query = ((Process.Path like r"%\\dsacls.exe" or Process.Name == "DSACLS.EXE") and Process.CommandLine like r"% /G %" and (Process.CommandLine like r"%GR%" or Process.CommandLine like r"%GE%" or Process.CommandLine like r"%GW%" or Process.CommandLine like r"%GA%" or Process.CommandLine like r"%WP%" or Process.CommandLine like r"%WD%"))

[ActivityMonitoringRule]
# Detects suspicious execution of 'Msbuild.exe' by a uncommon parent process
# Author: frack113
RuleName = Suspicious Msbuild Execution By Uncommon Parent Process
EventType = Process.Start
Tag = proc-start-suspicious-msbuild-execution-by-uncommon-parent-process
RiskScore = 50
Query = ((Process.Path like r"%\\MSBuild.exe" or Process.Name == "MSBuild.exe") and not ((Parent.Path like r"%\\devenv.exe" or Parent.Path like r"%\\cmd.exe" or Parent.Path like r"%\\msbuild.exe" or Parent.Path like r"%\\python.exe" or Parent.Path like r"%\\explorer.exe" or Parent.Path like r"%\\nuget.exe")))
GenericProperty1 = Parent.Path

[ActivityMonitoringRule]
# Detects powershell scripts that import modules from suspicious directories
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleName = Import PowerShell Modules From Suspicious Directories - ProcCreation
EventType = Process.Start
Tag = proc-start-import-powershell-modules-from-suspicious-directories-proccreation
RiskScore = 50
Query = (Process.CommandLine like r"%Import-Module \"$Env:Temp\\%" or Process.CommandLine like r"%Import-Module '$Env:Temp\\%" or Process.CommandLine like r"%Import-Module $Env:Temp\\%" or Process.CommandLine like r"%Import-Module \"$Env:Appdata\\%" or Process.CommandLine like r"%Import-Module '$Env:Appdata\\%" or Process.CommandLine like r"%Import-Module $Env:Appdata\\%" or Process.CommandLine like r"%Import-Module C:\\Users\\Public\\%" or Process.CommandLine like r"%ipmo \"$Env:Temp\\%" or Process.CommandLine like r"%ipmo '$Env:Temp\\%" or Process.CommandLine like r"%ipmo $Env:Temp\\%" or Process.CommandLine like r"%ipmo \"$Env:Appdata\\%" or Process.CommandLine like r"%ipmo '$Env:Appdata\\%" or Process.CommandLine like r"%ipmo $Env:Appdata\\%" or Process.CommandLine like r"%ipmo C:\\Users\\Public\\%")

[ActivityMonitoringRule]
# Detects usage of Sysinternals PsService which can be abused for service reconnaissance and tampering
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleName = Sysinternals PsService Execution
EventType = Process.Start
Tag = proc-start-sysinternals-psservice-execution
RiskScore = 50
Query = (Process.Name == "psservice.exe" or (Process.Path like r"%\\PsService.exe" or Process.Path like r"%\\PsService64.exe"))

[ActivityMonitoringRule]
# Adversaries may establish persistence by executing malicious content triggered by user inactivity.
# Screensavers are programs that execute after a configurable time of user inactivity and consist of Portable Executable (PE) files with a .scr file extension
# Author: frack113
RuleName = Suspicious ScreenSave Change by Reg.exe
EventType = Process.Start
Tag = proc-start-suspicious-screensave-change-by-reg.exe
RiskScore = 50
Query = ((Process.Path like r"%\\reg.exe" and (Process.CommandLine like r"%HKEY\_CURRENT\_USER\\Control Panel\\Desktop%" or Process.CommandLine like r"%HKCU\\Control Panel\\Desktop%")) and ((Process.CommandLine like r"%/v ScreenSaveActive%" and Process.CommandLine like r"%/t REG\_SZ%" and Process.CommandLine like r"%/d 1%" and Process.CommandLine like r"%/f%") or (Process.CommandLine like r"%/v ScreenSaveTimeout%" and Process.CommandLine like r"%/t REG\_SZ%" and Process.CommandLine like r"%/d %" and Process.CommandLine like r"%/f%") or (Process.CommandLine like r"%/v ScreenSaverIsSecure%" and Process.CommandLine like r"%/t REG\_SZ%" and Process.CommandLine like r"%/d 0%" and Process.CommandLine like r"%/f%") or (Process.CommandLine like r"%/v SCRNSAVE.EXE%" and Process.CommandLine like r"%/t REG\_SZ%" and Process.CommandLine like r"%/d %" and Process.CommandLine like r"%.scr%" and Process.CommandLine like r"%/f%")))

[ActivityMonitoringRule]
# Detects browsers starting with the remote debugging flags. Which is a technique often used to perform browser injection attacks
# Author: pH-T (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)
RuleName = Browser Started with Remote Debugging
EventType = Process.Start
Tag = proc-start-browser-started-with-remote-debugging
RiskScore = 50
Query = (Process.CommandLine like r"% --remote-debugging-%" or (Process.Path like r"%\\firefox.exe" and Process.CommandLine like r"% -start-debugger-server%"))

[ActivityMonitoringRule]
# Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system
# Author: frack113
RuleName = Suspicious Scan Loop Network
EventType = Process.Start
Tag = proc-start-suspicious-scan-loop-network
RiskScore = 50
Query = ((Process.CommandLine like r"%for %" or Process.CommandLine like r"%foreach %") and (Process.CommandLine like r"%nslookup%" or Process.CommandLine like r"%ping%"))

[ActivityMonitoringRule]
# Detects a file or folder's permissions being modified or tampered with.
# Author: Jakob Weinzettl, oscd.community, Nasreddine Bencherchali
RuleName = File or Folder Permissions Modifications
EventType = Process.Start
Tag = proc-start-file-or-folder-permissions-modifications
RiskScore = 50
Query = ((((Process.Path like r"%\\cacls.exe" or Process.Path like r"%\\icacls.exe" or Process.Path like r"%\\net.exe" or Process.Path like r"%\\net1.exe") and (Process.CommandLine like r"%/grant%" or Process.CommandLine like r"%/setowner%" or Process.CommandLine like r"%/inheritance:r%")) or (Process.Path like r"%\\attrib.exe" and Process.CommandLine like r"%-r%") or Process.Path like r"%\\takeown.exe") and not ((Process.CommandLine like r"%ICACLS C:\\ProgramData\\dynatrace\\gateway\\config\\connectivity.history /reset") or (Process.CommandLine like r"%ICACLS C:\\ProgramData\\dynatrace\\gateway\\config\\config.properties /grant :r %" and Process.CommandLine like r"%S-1-5-19:F%") or (Process.CommandLine like r"%\\AppData\\Local\\Programs\\Microsoft VS Code%" or Parent.Path like r"%\\Microsoft VS Code\\Code.exe")))
GenericProperty1 = Parent.Path

[ActivityMonitoringRule]
# ZipExec is a Proof-of-Concept (POC) tool to wrap binary-based tools into a password-protected zip file.
# Author: frack113
RuleName = Suspicious ZipExec Execution
EventType = Process.Start
Tag = proc-start-suspicious-zipexec-execution
RiskScore = 50
Query = ((Process.CommandLine like r"%/generic:Microsoft\_Windows\_Shell\_ZipFolder:filename=%" and Process.CommandLine like r"%.zip%" and Process.CommandLine like r"%/pass:%" and Process.CommandLine like r"%/user:%") or (Process.CommandLine like r"%/delete%" and Process.CommandLine like r"%Microsoft\_Windows\_Shell\_ZipFolder:filename=%" and Process.CommandLine like r"%.zip%"))

[ActivityMonitoringRule]
# Detects Powershell as a child of the WmiPrvSE process. Which could be a sign of lateral movement via WMI.
# Author: Markus Neis @Karneades
RuleName = Potential WMI Lateral Movement WmiPrvSE Spawned PowerShell
EventType = Process.Start
Tag = proc-start-potential-wmi-lateral-movement-wmiprvse-spawned-powershell
RiskScore = 50
Query = (Parent.Path like r"%\\WmiPrvSE.exe" and ((Process.Path like r"%\\powershell.exe" or Process.Path like r"%\\pwsh.exe") or Process.Name in ["PowerShell.EXE", "pwsh.dll"]))
GenericProperty1 = Parent.Path

[ActivityMonitoringRule]
# Detects usage of "appcmd" to create new global URL rewrite rules. This behaviour has been observed being used by threat actors to add new rules so they can access their webshells.
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleName = Suspicious IIS URL GlobalRules Rewrite Via AppCmd
EventType = Process.Start
Tag = proc-start-suspicious-iis-url-globalrules-rewrite-via-appcmd
RiskScore = 50
Query = ((Process.Path like r"%\\appcmd.exe" or Process.Name == "appcmd.exe") and (Process.CommandLine like r"%set%" and Process.CommandLine like r"%config%" and Process.CommandLine like r"%section:system.webServer/rewrite/globalRules%" and Process.CommandLine like r"%commit:%"))

[ActivityMonitoringRule]
# Detects usage of "cdb.exe" to launch 64-bit shellcode or arbitrary processes or commands from a debugger script file
# Author: Beyu Denis, oscd.community, Nasreddine Bencherchali
RuleName = WinDbg/CDB LOLBIN Usage
EventType = Process.Start
Tag = proc-start-windbg/cdb-lolbin-usage
RiskScore = 50
Query = ((Process.Path like r"%\\cdb.exe" or Process.Name == "CDB.Exe") and (Process.CommandLine like r"% -c %" or Process.CommandLine like r"% -cf %"))

[ActivityMonitoringRule]
# Detects code execution via Pester.bat (Pester - Powershell Modulte for testing)
# Author: Julia Fomina, oscd.community
RuleName = Execute Code with Pester.bat
EventType = Process.Start
Tag = proc-start-execute-code-with-pester.bat
RiskScore = 50
Query = (((Process.Path like r"%\\powershell.exe" or Process.Path like r"%\\pwsh.exe") and Process.CommandLine like r"%Pester%" and Process.CommandLine like r"%Get-Help%") or (Process.Path like r"%\\cmd.exe" and Process.CommandLine like r"%pester%" and Process.CommandLine like r"%;%" and (Process.CommandLine like r"%help%" or Process.CommandLine like r"%_%")))

[ActivityMonitoringRule]
# Detects the execution of whoami.exe with the /group command line flag to show group membership for the current user, account type, security identifiers (SID), and attributes.
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleName = Group Membership Reconnaissance Via Whoami.EXE
EventType = Process.Start
Tag = proc-start-group-membership-reconnaissance-via-whoami.exe
RiskScore = 50
Query = ((Process.Path like r"%\\whoami.exe" or Process.Name == "whoami.exe") and (Process.CommandLine like r"% /groups%" or Process.CommandLine like r"% -groups%"))

[ActivityMonitoringRule]
# Executes arbitrary PowerShell code using SyncAppvPublishingServer.vbs
# Author: frack113
RuleName = SyncAppvPublishingServer VBS Execute Arbitrary PowerShell Code
EventType = Process.Start
Tag = proc-start-syncappvpublishingserver-vbs-execute-arbitrary-powershell-code
RiskScore = 50
Query = (Process.CommandLine like r"%\\SyncAppvPublishingServer.vbs%" and Process.CommandLine like r"%;%")

[ActivityMonitoringRule]
# Detects usage of the Get-ADComputer cmdlet to collect computer information and output it to a file
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleName = Computer Discovery And Export Via Get-ADComputer Cmdlet
EventType = Process.Start
Tag = proc-start-computer-discovery-and-export-via-get-adcomputer-cmdlet
RiskScore = 50
Query = (((Process.Path like r"%\\powershell.exe" or Process.Path like r"%\\pwsh.exe") or Process.Name in ["PowerShell.EXE", "pwsh.dll"]) and (Process.CommandLine like r"%Get-ADComputer %" and Process.CommandLine like r"% -Filter \*" and (Process.CommandLine like r"% > %" or Process.CommandLine like r"% | Select %" or Process.CommandLine like r"%Out-File%" or Process.CommandLine like r"%Set-Content%" or Process.CommandLine like r"%Add-Content%")))

[ActivityMonitoringRule]
# Detects execution of python using the "-c" flag. This is could be used as a way to launch a reverse shell or execute live python code.
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleName = Python Inline Command Execution
EventType = Process.Start
Tag = proc-start-python-inline-command-execution
RiskScore = 50
Query = (((Process.Name == "python.exe" or (Process.Path like r"%python.exe" or Process.Path like r"%python3.exe" or Process.Path like r"%python2.exe")) and Process.CommandLine like r"% -c%") and not ((Parent.Path like r"C:\\Program Files\\Python%" and Parent.Path like r"%\\python.exe" and Parent.CommandLine like r"%-E -s -m ensurepip -U --default-pip%") or (Parent.Path like r"%\\AppData\\Local\\Programs\\Microsoft VS Code\\Code.exe")))
GenericProperty1 = Parent.Path
GenericProperty2 = Parent.CommandLine

[ActivityMonitoringRule]
# Detects the removal of a port or application rule in the Windows Firewall configuration using netsh
# Author: frack113
RuleName = Firewall Rule Deleted Via Netsh.EXE
EventType = Process.Start
Tag = proc-start-firewall-rule-deleted-via-netsh.exe
RiskScore = 50
Query = (((Process.Path like r"%\\netsh.exe" or Process.Name == "netsh.exe") and (Process.CommandLine like r"%firewall%" and Process.CommandLine like r"%delete %")) and not (Parent.Path like r"%\\Dropbox.exe" and Process.CommandLine like r"%name=Dropbox%"))
GenericProperty1 = Parent.Path

[ActivityMonitoringRule]
# Adversaries may modify system firewalls in order to bypass controls limiting network usage
# Author: frack113
RuleName = Netsh Allow Group Policy on Microsoft Defender Firewall
EventType = Process.Start
Tag = proc-start-netsh-allow-group-policy-on-microsoft-defender-firewall
RiskScore = 50
Query = ((Process.Path like r"%\\netsh.exe" or Process.Name == "netsh.exe") and (Process.CommandLine like r"%advfirewall%" and Process.CommandLine like r"%firewall%" and Process.CommandLine like r"%set%" and Process.CommandLine like r"%rule%" and Process.CommandLine like r"%group=%" and Process.CommandLine like r"%new%" and Process.CommandLine like r"%enable=Yes%"))

[ActivityMonitoringRule]
# Detects a suspicious command line execution that includes an URL and AppData string in the command line parameters as used by several droppers (js/vbs > powershell)
# Author: Florian Roth (Nextron Systems), Jonhnathan Ribeiro, oscd.community
RuleName = Command Line Execution with Suspicious URL and AppData Strings
EventType = Process.Start
Tag = proc-start-command-line-execution-with-suspicious-url-and-appdata-strings
RiskScore = 50
Query = (Process.Path like r"%\\cmd.exe" and Process.CommandLine like r"%http%" and Process.CommandLine like r"%://%" and Process.CommandLine like r"%\%AppData\%%")

[ActivityMonitoringRule]
# Detects the execution of a renamed binary often used by attackers or malware leveraging new Sysmon OriginalFileName datapoint.
# Author: Matthew Green @mgreen27, Ecco, James Pemberton @4A616D6573, oscd.community, Andreas Hunkeler (@Karneades)
RuleName = Potential Defense Evasion Via Binary Rename
EventType = Process.Start
Tag = proc-start-potential-defense-evasion-via-binary-rename
RiskScore = 50
Query = (Process.Name in ["Cmd.Exe", "CONHOST.EXE", "7z.exe", "WinRAR.exe", "wevtutil.exe", "net.exe", "net1.exe", "netsh.exe", "InstallUtil.exe"] and not ((Process.Path like r"%\\cmd.exe" or Process.Path like r"%\\conhost.exe" or Process.Path like r"%\\7z.exe" or Process.Path like r"%\\WinRAR.exe" or Process.Path like r"%\\wevtutil.exe" or Process.Path like r"%\\net.exe" or Process.Path like r"%\\net1.exe" or Process.Path like r"%\\netsh.exe" or Process.Path like r"%\\InstallUtil.exe")))

[ActivityMonitoringRule]
# Detects usage of the "Add-AppxPackage" or it's alias "Add-AppPackage" to install unsigned AppX packages
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleName = Unsigned AppX Installation Attempt Using Add-AppxPackage
EventType = Process.Start
Tag = proc-start-unsigned-appx-installation-attempt-using-add-appxpackage
RiskScore = 50
Query = (((Process.Path like r"%\\powershell.exe" or Process.Path like r"%\\pwsh.exe") or Process.Name in ["PowerShell.EXE", "pwsh.dll"]) and (Process.CommandLine like r"%Add-AppPackage %" or Process.CommandLine like r"%Add-AppxPackage %") and Process.CommandLine like r"% -AllowUnsigned%")

[ActivityMonitoringRule]
# Detects potential malicious and unauthorized usage of bcdedit.exe
# Author: @neu5ron
RuleName = Potential Ransomware or Unauthorized MBR Tampering Via Bcdedit.EXE
EventType = Process.Start
Tag = proc-start-potential-ransomware-or-unauthorized-mbr-tampering-via-bcdedit.exe
RiskScore = 50
Query = ((Process.Path like r"%\\bcdedit.exe" or Process.Name == "bcdedit.exe") and (Process.CommandLine like r"%delete%" or Process.CommandLine like r"%deletevalue%" or Process.CommandLine like r"%import%" or Process.CommandLine like r"%safeboot%" or Process.CommandLine like r"%network%"))

[ActivityMonitoringRule]
# Download and compress a remote file and store it in a cab file on local machine.
# Author: frack113
RuleName = Suspicious Diantz Download and Compress Into a CAB File
EventType = Process.Start
Tag = proc-start-suspicious-diantz-download-and-compress-into-a-cab-file
RiskScore = 50
Query = (Process.CommandLine like r"%diantz.exe%" and Process.CommandLine like r"% \\\\\*" and Process.CommandLine like r"%.cab%")

[ActivityMonitoringRule]
# Detect usage of the "ssh.exe" binary as a proxy to launch other programs
# Author: frack113, Nasreddine Bencherchali
RuleName = Lolbin Ssh.exe Use As Proxy
EventType = Process.Start
Tag = proc-start-lolbin-ssh.exe-use-as-proxy
RiskScore = 50
Query = (Parent.Path like r"C:\\Windows\\System32\\OpenSSH\\sshd.exe" or (Process.Path like r"%\\ssh.exe" and (Process.CommandLine like r"%ProxyCommand=%" or (Process.CommandLine like r"%PermitLocalCommand%" and Process.CommandLine like r"%LocalCommand%"))))
GenericProperty1 = Parent.Path

[ActivityMonitoringRule]
# Detects calls to cmdlets that are used to export certificates from the local certificate store. Threat actors were seen abusing this to steal private keys from compromised machines.
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleName = Certificate Exported Via PowerShell
EventType = Process.Start
Tag = proc-start-certificate-exported-via-powershell
RiskScore = 50
Query = (Process.CommandLine like r"%Export-PfxCertificate %" or Process.CommandLine like r"%Export-Certificate %")

[ActivityMonitoringRule]
# Detects execution of "certutil" with the "addstore" flag in order to install a new certificate on the system.
# Adversaries may install a root certificate on a compromised system to avoid warnings when connecting to adversary controlled web servers.
# Author: oscd.community, @redcanary, Zach Stanford @svch0st
RuleName = New Root Certificate Installed Via Certutil.EXE
EventType = Process.Start
Tag = proc-start-new-root-certificate-installed-via-certutil.exe
RiskScore = 50
Query = ((Process.Path like r"%\\certutil.exe" or Process.Name == "CertUtil.exe") and (Process.CommandLine like r"%/addstore%" or Process.CommandLine like r"%-addstore%") and Process.CommandLine like r"%root%")

[ActivityMonitoringRule]
# Detects suspicious PowerShell invocation command parameters
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleName = Suspicious PowerShell Invocations - Specific - ProcessCreation
EventType = Process.Start
Tag = proc-start-suspicious-powershell-invocations-specific-processcreation
RiskScore = 50
Query = (((Process.CommandLine like r"%-nop%" and Process.CommandLine like r"% -w %" and Process.CommandLine like r"%hidden%" and Process.CommandLine like r"% -c %" and Process.CommandLine like r"%[Convert]::FromBase64String%") or (Process.CommandLine like r"% -w %" and Process.CommandLine like r"%hidden%" and Process.CommandLine like r"%-noni%" and Process.CommandLine like r"%-nop%" and Process.CommandLine like r"% -c %" and Process.CommandLine like r"%iex%" and Process.CommandLine like r"%New-Object%") or (Process.CommandLine like r"% -w %" and Process.CommandLine like r"%hidden%" and Process.CommandLine like r"%-ep%" and Process.CommandLine like r"%bypass%" and Process.CommandLine like r"%-Enc%") or (Process.CommandLine like r"%powershell%" and Process.CommandLine like r"%reg%" and Process.CommandLine like r"%add%" and Process.CommandLine like r"%\\software\\%") or (Process.CommandLine like r"%bypass%" and Process.CommandLine like r"%-noprofile%" and Process.CommandLine like r"%-windowstyle%" and Process.CommandLine like r"%hidden%" and Process.CommandLine like r"%new-object%" and Process.CommandLine like r"%system.net.webclient%" and Process.CommandLine like r"%.download%") or (Process.CommandLine like r"%iex%" and Process.CommandLine like r"%New-Object%" and Process.CommandLine like r"%Net.WebClient%" and Process.CommandLine like r"%.Download%")) and not (((Process.CommandLine like r"%(New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1%" or Process.CommandLine like r"%Write-ChocolateyWarning%"))))

[ActivityMonitoringRule]
# Detect attacker collecting audio via SoundRecorder application.
# Author: E.M. Anhaus (originally from Atomic Blue Detections, Endgame), oscd.community
RuleName = Audio Capture via SoundRecorder
EventType = Process.Start
Tag = proc-start-audio-capture-via-soundrecorder
RiskScore = 50
Query = (Process.Path like r"%\\SoundRecorder.exe" and Process.CommandLine like r"%/FILE%")

[ActivityMonitoringRule]
# Detects suspicious ways to download files or content using PowerShell
# Author: Florian Roth (Nextron Systems)
RuleName = PowerShell Web Download
EventType = Process.Start
Tag = proc-start-powershell-web-download
RiskScore = 50
Query = (Process.CommandLine like r"%.DownloadString(%" or Process.CommandLine like r"%.DownloadFile(%" or Process.CommandLine like r"%Invoke-WebRequest %" or Process.CommandLine like r"%iwr %")

[ActivityMonitoringRule]
# Detects file execution using the msdeploy.exe lolbin
# Author: Beyu Denis, oscd.community
RuleName = Execute Files with Msdeploy.exe
EventType = Process.Start
Tag = proc-start-execute-files-with-msdeploy.exe
RiskScore = 50
Query = (Process.CommandLine like r"%verb:sync%" and Process.CommandLine like r"%-source:RunCommand%" and Process.CommandLine like r"%-dest:runCommand%" and Process.Path like r"%\\msdeploy.exe")

[ActivityMonitoringRule]
# Detects execution of msdt.exe using the "cab" flag which could indicates suspicious diagcab files with embedded answer files leveraging CVE-2022-30190
# Author: Nasreddine Bencherchali (Nextron Systems), GossiTheDog, frack113
RuleName = Suspicious Cabinet File Execution Via Msdt.EXE
EventType = Process.Start
Tag = proc-start-suspicious-cabinet-file-execution-via-msdt.exe
RiskScore = 50
Query = ((Process.Path like r"%\\msdt.exe" or Process.Name == "msdt.exe") and (Process.CommandLine like r"% /cab %" or Process.CommandLine like r"% -cab %"))

[ActivityMonitoringRule]
# Looks for changes to registry to disable any write-protect property for storage devices. This could be a precursor to a ransomware attack and has been an observed technique used by cypherpunk group.
# Author: Sreeman
RuleName = Write Protect For Storage Disabled
EventType = Process.Start
Tag = proc-start-write-protect-for-storage-disabled
RiskScore = 50
Query = (Process.CommandLine like r"%reg add%" and Process.CommandLine like r"%\\system\\currentcontrolset\\control%" and Process.CommandLine like r"%write protection%" and Process.CommandLine like r"%0%" and (Process.CommandLine like r"%storage%" or Process.CommandLine like r"%storagedevicepolicies%"))

[ActivityMonitoringRule]
# Detects scheduled task creations or modification to be run with high privileges on a suspicious schedule type
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleName = Suspicious Schtasks Schedule Type With High Privileges
EventType = Process.Start
Tag = proc-start-suspicious-schtasks-schedule-type-with-high-privileges
RiskScore = 50
Query = ((Process.Path like r"%\\schtasks.exe" or Process.Name == "schtasks.exe") and (Process.CommandLine like r"% ONLOGON %" or Process.CommandLine like r"% ONSTART %" or Process.CommandLine like r"% ONCE %" or Process.CommandLine like r"% ONIDLE %") and (Process.CommandLine like r"%NT AUT%" or Process.CommandLine like r"% SYSTEM%" or Process.CommandLine like r"%HIGHEST%"))

[ActivityMonitoringRule]
# Use living off the land tools to zip a file and stage it in the Windows temporary folder for later exfiltration
# Author: frack113
RuleName = Zip A Folder With PowerShell For Staging In Temp
EventType = Process.Start
Tag = proc-start-zip-a-folder-with-powershell-for-staging-in-temp
RiskScore = 50
Query = (Process.CommandLine like r"%Compress-Archive %" and Process.CommandLine like r"% -Path %" and Process.CommandLine like r"% -DestinationPath %" and Process.CommandLine like r"%$env:TEMP\\%")

[ActivityMonitoringRule]
# Detects potential network sniffing via use of network tools such as "tshark", "windump".
# Network sniffing refers to using the network interface on a system to monitor or capture information sent over a wired or wireless connection.
# An adversary may place a network interface into promiscuous mode to passively access data in transit over the network, or use span ports to capture a larger amount of data.
# Author: Timur Zinniatullin, oscd.community, Nasreddine Bencherchali (Nextron Systems)
RuleName = Potential Network Sniffing Activity Using Network Tools
EventType = Process.Start
Tag = proc-start-potential-network-sniffing-activity-using-network-tools
RiskScore = 50
Query = ((Process.Path like r"%\\tshark.exe" and Process.CommandLine like r"%-i%") or Process.Path like r"%\\windump.exe")

[ActivityMonitoringRule]
# Detects when the registration of a VSS/VDS Provider as a COM+ application.
# Author: Austin Songer @austinsonger
RuleName = Suspicious Registration via cscript.exe
EventType = Process.Start
Tag = proc-start-suspicious-registration-via-cscript.exe
RiskScore = 50
Query = (Process.Path like r"%\\cscript.exe" and Process.CommandLine like r"%-register%" and (Process.CommandLine like r"%\\Windows Kits\\10\\bin\\10.0.22000.0\\x64%" or Process.CommandLine like r"%\\Windows Kits\\10\\bin\\10.0.19041.0\\x64%" or Process.CommandLine like r"%\\Windows Kits\\10\\bin\\10.0.17763.0\\x64%"))

[ActivityMonitoringRule]
# Detects usage of findstr with the "EVERYONE" or "BUILTIN" keywords. This is seen being used in combination with "icacls" to look for misconfigured files or folders permissions
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleName = Permission Misconfiguration Reconnaissance Via Findstr.EXE
EventType = Process.Start
Tag = proc-start-permission-misconfiguration-reconnaissance-via-findstr.exe
RiskScore = 50
Query = (((Process.Path like r"%\\findstr.exe" or Process.Name == "FINDSTR.EXE") and (Process.CommandLine like r"%\"Everyone\"%" or Process.CommandLine like r"%'Everyone'%" or Process.CommandLine like r"%\"BUILTIN\\\"%" or Process.CommandLine like r"%'BUILTIN\\'%")) or (Process.CommandLine like r"%icacls %" and Process.CommandLine like r"%findstr %" and Process.CommandLine like r"%Everyone%"))

[ActivityMonitoringRule]
# Detects requests to exclude files, folders or processes from Antivirus scanning using PowerShell cmdlets
# Author: Florian Roth (Nextron Systems)
RuleName = Powershell Defender Exclusion
EventType = Process.Start
Tag = proc-start-powershell-defender-exclusion
RiskScore = 50
Query = ((Process.CommandLine like r"%Add-MpPreference %" or Process.CommandLine like r"%Set-MpPreference %") and (Process.CommandLine like r"% -ExclusionPath %" or Process.CommandLine like r"% -ExclusionExtension %" or Process.CommandLine like r"% -ExclusionProcess %" or Process.CommandLine like r"% -ExclusionIpAddress %"))

[ActivityMonitoringRule]
# Detects the use of a Microsoft signed script executing a managed DLL with PowerShell.
# Author: frack113
RuleName = UtilityFunctions.ps1 Proxy Dll
EventType = Process.Start
Tag = proc-start-utilityfunctions.ps1-proxy-dll
RiskScore = 50
Query = (Process.CommandLine like r"%UtilityFunctions.ps1%" or Process.CommandLine like r"%RegSnapin %")

[ActivityMonitoringRule]
# Detects defence evasion attempt via odbcconf.exe execution to load DLL
# Author: Kirill Kiryanov, Beyu Denis, Daniil Yugoslavskiy, oscd.community
RuleName = Application Whitelisting Bypass via DLL Loaded by odbcconf.exe
EventType = Process.Start
Tag = proc-start-application-whitelisting-bypass-via-dll-loaded-by-odbcconf.exe
RiskScore = 50
Query = (((Process.Path like r"%\\odbcconf.exe" or Process.Name == "odbcconf.exe") and (Process.CommandLine like r"%-a%" or Process.CommandLine like r"%-f%" or Process.CommandLine like r"%/a%" or Process.CommandLine like r"%/f%" or Process.CommandLine like r"%regsvr%")) or (Parent.Path like r"%\\odbcconf.exe" and (Process.Path like r"%\\rundll32.exe" or Process.Name == "RUNDLL32.EXE")))
GenericProperty1 = Parent.Path

[ActivityMonitoringRule]
# Detects potential DLL sideloading using the Microsoft Office winword process via the '/l' flag.
# Author: Victor Sergeev, oscd.community
RuleName = Potential Arbitrary DLL Load Using Winword
EventType = Process.Start
Tag = proc-start-potential-arbitrary-dll-load-using-winword
RiskScore = 50
Query = ((Process.Path like r"%\\WINWORD.exe" or Process.Name == "WinWord.exe") and (Process.CommandLine like r"%/l %" and Process.CommandLine like r"%.dll%"))

[ActivityMonitoringRule]
# Execution of well known tools for data exfiltration and tunneling
# Author: Daniil Yugoslavskiy, oscd.community
RuleName = Exfiltration and Tunneling Tools Execution
EventType = Process.Start
Tag = proc-start-exfiltration-and-tunneling-tools-execution
RiskScore = 50
Query = (Process.Path like r"%\\plink.exe" or Process.Path like r"%\\socat.exe" or Process.Path like r"%\\stunnel.exe" or Process.Path like r"%\\httptunnel.exe")

[ActivityMonitoringRule]
# Download or Copy file with Extrac32
# Author: frack113
RuleName = Suspicious Extrac32 Execution
EventType = Process.Start
Tag = proc-start-suspicious-extrac32-execution
RiskScore = 50
Query = ((Process.CommandLine like r"%extrac32.exe%" or Process.Path like r"%\\extrac32.exe" or Process.Name == "extrac32.exe") and Process.CommandLine like r"%.cab%" and (Process.CommandLine like r"%/C%" or Process.CommandLine like r"%/Y%" or Process.CommandLine like r"% \\\\\*"))

[ActivityMonitoringRule]
# Detects execution of "dsquery.exe" for domain trust discovery
# Author: E.M. Anhaus, Tony Lambert, oscd.community, omkar72
RuleName = Domain Trust Discovery Via Dsquery
EventType = Process.Start
Tag = proc-start-domain-trust-discovery-via-dsquery
RiskScore = 50
Query = ((Process.Path like r"%\\dsquery.exe" or Process.Name == "dsquery.exe") and Process.CommandLine like r"%trustedDomain%")

[ActivityMonitoringRule]
# Detects Wscript or Cscript executing from a drive other than C. This has been observed with Qakbot executing from within a mounted ISO file.
# Author: Aaron Herman
RuleName = Wscript Execution from Non C Drive
EventType = Process.Start
Tag = proc-start-wscript-execution-from-non-c-drive
RiskScore = 50
Query = (((Process.Path like r"%\\wscript.exe" or Process.Path like r"%\\cscript.exe") and (Process.CommandLine like r"%.js%" or Process.CommandLine like r"%.vbs%" or Process.CommandLine like r"%.vbe%") and Process.CommandLine like r"%:\\%") and not (((Process.CommandLine like r"% C:\\\*" or Process.CommandLine like r"% 'C:\\%" or Process.CommandLine like r"% \"C:\\\*")) or (Process.CommandLine like r"%\%%") or (Process.CommandLine like r"% \\\\\*")))

[ActivityMonitoringRule]
# Detect use of the Windows 8.3 short name. Which could be used as a method to avoid command-line detection
# Author: frack113, Nasreddine Bencherchali
RuleName = Use Short Name Path in Command Line
EventType = Process.Start
Tag = proc-start-use-short-name-path-in-command-line
RiskScore = 50
Query = ((Process.CommandLine like r"%~1\\%" or Process.CommandLine like r"%~2\\%") and not ((Parent.Path like r"C:\\Windows\\System32\\Dism.exe" or Parent.Path like r"C:\\Windows\\System32\\cleanmgr.exe" or Parent.Path like r"C:\\Program Files\\GPSoftware\\Directory Opus\\dopus.exe") or (Parent.Path like r"%\\WebEx\\WebexHost.exe" or Parent.Path like r"%\\thor\\thor64.exe" or Parent.Path like r"%\\veam.backup.shell.exe" or Parent.Path like r"%\\winget.exe" or Parent.Path like r"%\\Everything\\Everything.exe") or Parent.Path like r"%\\AppData\\Local\\Temp\\WinGet\\%" or (Process.CommandLine like r"%\\appdata\\local\\webex\\webex64\\meetings\\wbxreport.exe%" or Process.CommandLine like r"%C:\\Program Files\\Git\\post-install.bat%" or Process.CommandLine like r"%C:\\Program Files\\Git\\cmd\\scalar.exe%")))
GenericProperty1 = Parent.Path

[ActivityMonitoringRule]
# Detects Windows Installer service (msiexec.exe) spawning "cmd" or "powershell"
# Author: Teymur Kheirkhabarov (idea), Mangatas Tondang (rule), oscd.community
RuleName = Always Install Elevated MSI Spawned Cmd And Powershell
EventType = Process.Start
Tag = proc-start-always-install-elevated-msi-spawned-cmd-and-powershell
RiskScore = 50
Query = (((Process.Path like r"%\\cmd.exe" or Process.Path like r"%\\powershell.exe" or Process.Path like r"%\\pwsh.exe") or Process.Name in ["Cmd.Exe", "PowerShell.EXE", "pwsh.dll"]) and (Parent.Path like r"%\\Windows\\Installer\\%" and Parent.Path like r"%msi%" and Parent.Path like r"%tmp"))
GenericProperty1 = Parent.Path

[ActivityMonitoringRule]
# Detects process creation events that use the Sysnative folder (common for CobaltStrike spawns)
# Author: Max Altgelt (Nextron Systems)
RuleName = Process Creation Using Sysnative Folder
EventType = Process.Start
Tag = proc-start-process-creation-using-sysnative-folder
RiskScore = 50
Query = Process.CommandLine like r"C:\\Windows\\Sysnative\\%"

[ActivityMonitoringRule]
# Detects suspicious parent process for cmd.exe
# Author: Tim Rauch
RuleName = Unusual Parent Process For Cmd.EXE
EventType = Process.Start
Tag = proc-start-unusual-parent-process-for-cmd.exe
RiskScore = 50
Query = (Process.Path like r"%\\cmd.exe" and (Parent.Path like r"%\\csrss.exe" or Parent.Path like r"%\\ctfmon.exe" or Parent.Path like r"%\\dllhost.exe" or Parent.Path like r"%\\epad.exe" or Parent.Path like r"%\\FlashPlayerUpdateService.exe" or Parent.Path like r"%\\GoogleUpdate.exe" or Parent.Path like r"%\\jucheck.exe" or Parent.Path like r"%\\jusched.exe" or Parent.Path like r"%\\LogonUI.exe" or Parent.Path like r"%\\lsass.exe" or Parent.Path like r"%\\regsvr32.exe" or Parent.Path like r"%\\SearchIndexer.exe" or Parent.Path like r"%\\SearchProtocolHost.exe" or Parent.Path like r"%\\SIHClient.exe" or Parent.Path like r"%\\sihost.exe" or Parent.Path like r"%\\slui.exe" or Parent.Path like r"%\\spoolsv.exe" or Parent.Path like r"%\\sppsvc.exe" or Parent.Path like r"%\\taskhostw.exe" or Parent.Path like r"%\\unsecapp.exe" or Parent.Path like r"%\\WerFault.exe" or Parent.Path like r"%\\wergmgr.exe" or Parent.Path like r"%\\wlanext.exe" or Parent.Path like r"%\\WUDFHost.exe"))
GenericProperty1 = Parent.Path

[ActivityMonitoringRule]
# Detects calls to PowerShell with Invoke-WebRequest cmdlet using direct IP access
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleName = Suspicious Invoke-WebRequest Execution With DirectIP
EventType = Process.Start
Tag = proc-start-suspicious-invoke-webrequest-execution-with-directip
RiskScore = 50
Query = (((Process.Path like r"%\\powershell.exe" or Process.Path like r"%\\pwsh.exe") or Process.Name in ["PowerShell.EXE", "pwsh.dll"]) and (Process.CommandLine like r"%curl %" or Process.CommandLine like r"%Invoke-WebRequest%" or Process.CommandLine like r"%iwr %" or Process.CommandLine like r"%wget %") and (Process.CommandLine like r"%://1%" or Process.CommandLine like r"%://2%" or Process.CommandLine like r"%://3%" or Process.CommandLine like r"%://4%" or Process.CommandLine like r"%://5%" or Process.CommandLine like r"%://6%" or Process.CommandLine like r"%://7%" or Process.CommandLine like r"%://8%" or Process.CommandLine like r"%://9%"))

[ActivityMonitoringRule]
# Attackers can use findstr to hide their artifacts or search specific strings and evade defense mechanism
# Author: Furkan CALISKAN, @caliskanfurkan_, @oscd_initiative, Nasreddine Bencherchali
RuleName = Abusing Findstr for Defense Evasion
EventType = Process.Start
Tag = proc-start-abusing-findstr-for-defense-evasion
RiskScore = 50
Query = ((Process.CommandLine like r"%findstr%" or Process.Path like r"%findstr.exe" or Process.Name == "FINDSTR.EXE") and (((Process.CommandLine like r"% /v %" or Process.CommandLine like r"% -v %") and (Process.CommandLine like r"% /l %" or Process.CommandLine like r"% -l %")) or ((Process.CommandLine like r"% /s %" or Process.CommandLine like r"% -s %") and (Process.CommandLine like r"% /i %" or Process.CommandLine like r"% -i %"))))

[ActivityMonitoringRule]
# Detects potential evasion or obfuscation attempts using bogus path traversal via the commandline
# Author: Christian Burkard (Nextron Systems)
RuleName = Potential Command Line Path Traversal Evasion Attempt
EventType = Process.Start
Tag = proc-start-potential-command-line-path-traversal-evasion-attempt
RiskScore = 50
Query = (((Process.Path like r"%\\Windows\\%" and (Process.CommandLine like r"%\\..\\Windows\\%" or Process.CommandLine like r"%\\..\\System32\\%" or Process.CommandLine like r"%\\..\\..\\%")) or Process.CommandLine like r"%.exe\\..\\%") and not ((Process.CommandLine like r"%\\Google\\Drive\\googledrivesync.exe\\..\\%") or (Process.CommandLine like r"%\\Citrix\\Virtual Smart Card\\Citrix.Authentication.VirtualSmartcard.Launcher.exe\\..\\%")))

[ActivityMonitoringRule]
# Detects suspicious connections from Microsoft Sync Center to non-private IPs.
# Author: elhoim
RuleName = Microsoft Sync Center Suspicious Network Connections
EventType = Net.Any
Tag = microsoft-sync-center-suspicious-network-connections
RiskScore = 50
Query = (Process.Path like r"%\\mobsync.exe" and not ((Net.Target.Ip like r"10.%" or Net.Target.Ip like r"192.168.%" or Net.Target.Ip like r"172.16.%" or Net.Target.Ip like r"172.17.%" or Net.Target.Ip like r"172.18.%" or Net.Target.Ip like r"172.19.%" or Net.Target.Ip like r"172.20.%" or Net.Target.Ip like r"172.21.%" or Net.Target.Ip like r"172.22.%" or Net.Target.Ip like r"172.23.%" or Net.Target.Ip like r"172.24.%" or Net.Target.Ip like r"172.25.%" or Net.Target.Ip like r"172.26.%" or Net.Target.Ip like r"172.27.%" or Net.Target.Ip like r"172.28.%" or Net.Target.Ip like r"172.29.%" or Net.Target.Ip like r"172.30.%" or Net.Target.Ip like r"172.31.%") and Net.Target.IpIsV6 == "false"))
GenericProperty1 = Net.Target.Ip
GenericProperty2 = Net.Target.IpIsV6

[ActivityMonitoringRule]
# Detects external IP address lookups by non-browser processes via services such as "api.ipify.org". This could be indicative of potential post compromise internet test activity.
# Author: Janantha Marasinghe, Nasreddine Bencherchali (Nextron Systems)
RuleName = Suspicious Network Connection to IP Lookup Service APIs
EventType = Net.Any
Tag = suspicious-network-connection-to-ip-lookup-service-apis
RiskScore = 50
Query = ((Net.Target.Name like r"%api.2ip.ua%" or Net.Target.Name like r"%api.ipify.org%" or Net.Target.Name like r"%bot.whatismyipaddress.com%" or Net.Target.Name like r"%canireachthe.net%" or Net.Target.Name like r"%checkip.amazonaws.com%" or Net.Target.Name like r"%checkip.dyndns.org%" or Net.Target.Name like r"%curlmyip.com%" or Net.Target.Name like r"%edns.ip-api.com%" or Net.Target.Name like r"%eth0.me%" or Net.Target.Name like r"%freegeoip.app%" or Net.Target.Name like r"%geoipy.com%" or Net.Target.Name like r"%getip.pro%" or Net.Target.Name like r"%icanhazip.com%" or Net.Target.Name like r"%ident.me%" or Net.Target.Name like r"%ifconfig.io%" or Net.Target.Name like r"%ifconfig.me%" or Net.Target.Name like r"%ip-api.com%" or Net.Target.Name like r"%ip.anysrc.net%" or Net.Target.Name like r"%ip.tyk.nu%" or Net.Target.Name like r"%ipaddressworld.com%" or Net.Target.Name like r"%ipecho.net%" or Net.Target.Name like r"%ipinfo.io%" or Net.Target.Name like r"%ipof.in%" or Net.Target.Name like r"%ipv4.icanhazip.com%" or Net.Target.Name like r"%ipv4bot.whatismyipaddress.com%" or Net.Target.Name like r"%ipwho.is%" or Net.Target.Name like r"%l2.io%" or Net.Target.Name like r"%myexternalip.com%" or Net.Target.Name like r"%wgetip.com%" or Net.Target.Name like r"%whatismyip.akamai.com%" or Net.Target.Name like r"%wtfismyip.com%") and not ((Process.Path like r"%\\brave.exe") or ((Process.Path like r"C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe" or Process.Path like r"C:\\Program Files (x86)\\Google\\Chrome\\Application\\chrome.exe")) or ((Process.Path like r"C:\\Program Files\\Mozilla Firefox\\firefox.exe" or Process.Path like r"C:\\Program Files (x86)\\Mozilla Firefox\\firefox.exe")) or ((Process.Path like r"C:\\Program Files (x86)\\Internet Explorer\\iexplore.exe" or Process.Path like r"C:\\Program Files\\Internet Explorer\\iexplore.exe")) or (Process.Path like r"%\\maxthon.exe") or (Process.Path like r"C:\\Program Files (x86)\\Microsoft\\EdgeWebView\\Application\\%" or Process.Path like r"%\\WindowsApps\\MicrosoftEdge.exe" or (Process.Path like r"C:\\Program Files (x86)\\Microsoft\\Edge\\Application\\msedge.exe" or Process.Path like r"C:\\Program Files\\Microsoft\\Edge\\Application\\msedge.exe")) or ((Process.Path like r"C:\\Program Files (x86)\\Microsoft\\EdgeCore\\%" or Process.Path like r"C:\\Program Files\\Microsoft\\EdgeCore\\%") and (Process.Path like r"%\\msedge.exe" or Process.Path like r"%\\msedgewebview2.exe")) or (Process.Path like r"%\\opera.exe") or (Process.Path like r"%\\safari.exe") or (Process.Path like r"%\\seamonkey.exe") or (Process.Path like r"%\\vivaldi.exe") or (Process.Path like r"%\\whale.exe")))
GenericProperty1 = Net.Target.Name

[ActivityMonitoringRule]
# Detects an a non-browser process interacting with the Telegram API which could indicate use of a covert C2
# Author: Nasreddine Bencherchali (Nextron Systems)
RuleName = Suspicious Non-Browser Network Communication With Telegram API
EventType = Net.Any
Tag = suspicious-non-browser-network-communication-with-telegram-api
RiskScore = 50
Query = (Net.Target.Name like r"%api.telegram.org%" and not ((Process.Path like r"%\\brave.exe") or ((Process.Path like r"C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe" or Process.Path like r"C:\\Program Files (x86)\\Google\\Chrome\\Application\\chrome.exe")) or ((Process.Path like r"C:\\Program Files\\Mozilla Firefox\\firefox.exe" or Process.Path like r"C:\\Program Files (x86)\\Mozilla Firefox\\firefox.exe")) or ((Process.Path like r"C:\\Program Files (x86)\\Internet Explorer\\iexplore.exe" or Process.Path like r"C:\\Program Files\\Internet Explorer\\iexplore.exe")) or (Process.Path like r"%\\maxthon.exe") or (Process.Path like r"C:\\Program Files (x86)\\Microsoft\\EdgeWebView\\Application\\%" or Process.Path like r"%\\WindowsApps\\MicrosoftEdge.exe" or (Process.Path like r"C:\\Program Files (x86)\\Microsoft\\Edge\\Application\\msedge.exe" or Process.Path like r"C:\\Program Files\\Microsoft\\Edge\\Application\\msedge.exe")) or ((Process.Path like r"C:\\Program Files (x86)\\Microsoft\\EdgeCore\\%" or Process.Path like r"C:\\Program Files\\Microsoft\\EdgeCore\\%") and (Process.Path like r"%\\msedge.exe" or Process.Path like r"%\\msedgewebview2.exe")) or (Process.Path like r"%\\opera.exe") or (Process.Path like r"%\\safari.exe") or (Process.Path like r"%\\seamonkey.exe") or (Process.Path like r"%\\vivaldi.exe") or (Process.Path like r"%\\whale.exe")))
GenericProperty1 = Net.Target.Name

[ActivityMonitoringRule]
# Detects a non-browser process interacting with the Google API which could indicate the use of a covert C2 such as Google Sheet C2 (GC2-sheet)
# Author: Gavin Knapp
RuleName = Suspicious Non-Browser Network Communication With Google API
EventType = Net.Any
Tag = suspicious-non-browser-network-communication-with-google-api
RiskScore = 50
Query = ((Net.Target.Name like r"%oauth2.googleapis.com%" or Net.Target.Name like r"%sheets.googleapis.com%" or Net.Target.Name like r"%drive.googleapis.com%" or Net.Target.Name like r"%www.googleapis.com%") and not ((Process.Path like r"%\\brave.exe") or ((Process.Path like r"C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe" or Process.Path like r"C:\\Program Files (x86)\\Google\\Chrome\\Application\\chrome.exe")) or ((Process.Path like r"C:\\Program Files\\Google\\Drive File Stream\\%" or Process.Path like r"C:\\Program Files\\Google\\Drive File Stream\*\\GoogleDriveFS.exe%")) or ((Process.Path like r"C:\\Program Files\\Mozilla Firefox\\firefox.exe" or Process.Path like r"C:\\Program Files (x86)\\Mozilla Firefox\\firefox.exe")) or ((Process.Path like r"C:\\Program Files (x86)\\Internet Explorer\\iexplore.exe" or Process.Path like r"C:\\Program Files\\Internet Explorer\\iexplore.exe")) or (Process.Path like r"%\\maxthon.exe") or (Process.Path like r"C:\\Program Files (x86)\\Microsoft\\EdgeWebView\\Application\\%" or Process.Path like r"%\\WindowsApps\\MicrosoftEdge.exe" or (Process.Path like r"C:\\Program Files (x86)\\Microsoft\\Edge\\Application\\msedge.exe" or Process.Path like r"C:\\Program Files\\Microsoft\\Edge\\Application\\msedge.exe")) or ((Process.Path like r"C:\\Program Files (x86)\\Microsoft\\EdgeCore\\%" or Process.Path like r"C:\\Program Files\\Microsoft\\EdgeCore\\%") and (Process.Path like r"%\\msedge.exe" or Process.Path like r"%\\msedgewebview2.exe")) or (Process.Path like r"%\\opera.exe") or (Process.Path like r"%\\safari.exe") or (Process.Path like r"%\\seamonkey.exe") or (Process.Path like r"%\\vivaldi.exe") or (Process.Path like r"%\\whale.exe") or (Process.Path like r"%\\GoogleUpdate.exe") or (Process.Path like r"%\\outlook.exe") or (Process.Path like r"%\\teams.exe")))
GenericProperty1 = Net.Target.Name

[ActivityMonitoringRule]
# Detects the use of the Windows Update Client binary (wuauclt.exe) to proxy execute code and making a network connections.
# One could easily make the DLL spawn a new process and inject to it to proxy the network connection and bypass this rule.
# Author: Roberto Rodriguez (Cyb3rWard0g), OTR (Open Threat Research)
RuleName = Wuauclt Network Connection
EventType = Net.Any
Tag = wuauclt-network-connection
RiskScore = 50
Query = (Process.Path like r"%wuauclt%" and not (((Net.Target.Ip like r"20.184.%" or Net.Target.Ip like r"20.185.%" or Net.Target.Ip like r"20.186.%" or Net.Target.Ip like r"20.187.%" or Net.Target.Ip like r"20.188.%" or Net.Target.Ip like r"20.189.%" or Net.Target.Ip like r"20.190.%" or Net.Target.Ip like r"20.191.%" or Net.Target.Ip like r"23.79.%" or Net.Target.Ip like r"51.10.%" or Net.Target.Ip like r"51.103.%" or Net.Target.Ip like r"51.104.%" or Net.Target.Ip like r"51.105.%" or Net.Target.Ip like r"52.239.%")) or (Process.CommandLine like r"%\\UpdateDeploy.dll /ClassId %")))
GenericProperty1 = Net.Target.Ip

[ActivityMonitoringRule]
# Detects an a non-browser process interacting with the Reddit API which could indicate use of a covert C2 such as RedditC2
# Author: Gavin Knapp
RuleName = Suspicious Non-Browser Network Communication With Reddit API
EventType = Net.Any
Tag = suspicious-non-browser-network-communication-with-reddit-api
RiskScore = 50
Query = (Net.Target.Name like r"%reddit.com%" and not ((Process.Path like r"%\\brave.exe") or ((Process.Path like r"C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe" or Process.Path like r"C:\\Program Files (x86)\\Google\\Chrome\\Application\\chrome.exe")) or ((Process.Path like r"C:\\Program Files\\Mozilla Firefox\\firefox.exe" or Process.Path like r"C:\\Program Files (x86)\\Mozilla Firefox\\firefox.exe")) or ((Process.Path like r"C:\\Program Files (x86)\\Internet Explorer\\iexplore.exe" or Process.Path like r"C:\\Program Files\\Internet Explorer\\iexplore.exe")) or (Process.Path like r"%\\maxthon.exe") or (Process.Path like r"C:\\Program Files (x86)\\Microsoft\\EdgeWebView\\Application\\%" or Process.Path like r"%\\WindowsApps\\MicrosoftEdge.exe" or (Process.Path like r"C:\\Program Files (x86)\\Microsoft\\Edge\\Application\\msedge.exe" or Process.Path like r"C:\\Program Files\\Microsoft\\Edge\\Application\\msedge.exe")) or ((Process.Path like r"C:\\Program Files (x86)\\Microsoft\\EdgeCore\\%" or Process.Path like r"C:\\Program Files\\Microsoft\\EdgeCore\\%") and (Process.Path like r"%\\msedge.exe" or Process.Path like r"%\\msedgewebview2.exe")) or (Process.Path like r"%\\opera.exe") or (Process.Path like r"%\\safari.exe") or (Process.Path like r"%\\seamonkey.exe") or (Process.Path like r"%\\vivaldi.exe") or (Process.Path like r"%\\whale.exe")))
GenericProperty1 = Net.Target.Name

